@charset "UTF-8";
/**
 * Vendors
 * All external librarie needed in the project.
 */
/**
 * Vendors
 * All external librarie needed in the project.
 */
/**
 * @name 	Functions API
 * This are all the API functions that are exposed by gridle.
 */
/**
 * Get states count
 * @return 	{Integer} 	The number of states defined
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Get the current state map
 * @return 		{Map} 	The current state map
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Get the current state name
 * @return 		{String} 	The current state name
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Get the column width in percent for the global or a specific context
 *
 * @param 	{Integer} 		[$columns=1] 							The number of columns to calculate
 * @param 	{Integer} 		[$stateMap-or-stateName=current] 	 	The state to calculate the column width for
 * @return 	{Percent} 												The width in percent
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/*
 * Get a state map
 *
 * @param 	{String|Map} 		[$state=current] 		The name or map of the state to get
 * @return 	{Map} 				A state map object
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Check if a state exist :
 * @param 	{String} 		$name 		The name of the state to check
 * @return 	{Boolean} 					true if exist
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Get a state variable
 *
 * @param 	{String} 		$varName 								The variable name
 * @param  	{String} 		[$stateMap-or-stateName=current] 	 	The state name or a map state value
 * @return 	{Mixed} 												The finded value
 */
/**
 * Set a variable in a state
 * @param  		{String} 	$var                    	Variable name to assign
 * @param  		{Mixed} 	$newValue          			The new value to assign
 * @param 		{String} 	[$state=current] 			The state to apply the variable for
 * @return 		{List}                         			The states list (full)
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * get the registered gridle states
 * @return 	{Map} 		All the registered states
 * @author 	Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * get the registered gridle states names
 * @return 	{List} 		All the registered states names
 * @author 	Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Get the register columns map
 * @param 	{String|List<String>} 		[$state=current] 		The state name or map
 * @return 	{Map} 												The map of registered columns for the specified state
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Will return the generated selector depending on the "package" wanted, the state and some optional values that might be needed by the package (like for row-align that need a "side" value)
 * @param 		{String} 							$package 			The package to generate the selector for (see _settings.scss file)
 * @param 		{String|List<String} 				[$states=null] 		The list of state to generate the selector for. If not specified, will generate for all registered states
 * @param 		{Mixed} 							[$value=null] 		The value that will be used to replace the "%{tokenName}" inside the package pattern
 * @example 	scss
 * g-selector(grid, mobile, 2) {
 * 	// your code here
 * 	// The selector will be .gr-2@mobile
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Return the current used driver
 * @return 	{String} 		The used driver like default or driver
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Check if the used driver is the specified one
 * @param 		{String} 		$driver 	The driver to check
 * @return 		{Boolean} 					True if is the current driver
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Get the media query for a particular state, or width, etc...
 *
 * @param 	{Mixed} 		[$stateName-or-stateMap=current] 		The state name of the min width
 * @return 	{String} 												The media query string without the @media
 */
/**
 * @name 	Setting mixins
 * This are all the mixins that are exposed by gridle for the setting up your grid.
 */
/**
 * Setting up your grid
 * @param 		{Map} 		$settings 		Your default grid settings
 * @example 	scss
 * // default settings
 * $_gridle-settings : (
 *	name : default,
 *	min-width : null,
 *	max-width : null,
 *	query : null,
 *	classes : true,
 *	context : 12,
 *	column-width : null,
 *	gutter-width : 20px,
 *	gutter-height : 0,
 *	gutter-top : 0,
 *	gutter-right : 10px,
 *	gutter-bottom : 0,
 *	gutter-left : 10px,
 *	direction : ltr,
 *	dir-attribute : false,
 *	name-multiplicator : 1,
 *	states-classes : false,
 *	classes-prefix : null
 * );
 *
 * // setting up your grid
 * \@include g-setup((
 * 	context : 12
 * 	// other settings
 * ));
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Register a new state with some settings
 * @param 		{String} 		$name 		The new state name
 * @param 		{Map} 			$settings 	The state settings
 * @example 	scss
 * \@include g-register-state(mobile, (
 * 	max-width : 600px
 * ));
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Register some clear each that will been generated in classes
 * @param 		{Integer} 		$count 		The n each item to clear
 * @param 		{String} 		$what 		What to clear (left, right, both)
 * @example 	scss
 * \@include g-register-clear-each(2, left);
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Register a new custom column in case the generated ones are not enough.
 * This is useful when you have a 12 columns grid and you need some 1/5 ones.
 * @param 		{String} 		$name 		The column name
 * @param 		{Integer} 		$columns 	The column width
 * @param 		{Integer} 		$context 	The context on which to calculate the column width
 *
 * @example 	scss
 * \@include g-register-column(1on5, 1, 5);
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Set a pattern for a specified package used to generate the classnames
 * @param 		{String} 	$package 		The package name to specify the pattern for
 * @param 		{List} 		$pattern 		The new classname pattern
 *
 * @example 	scss
 * \@include g-set-classname-map(grid, ('grid','-','%count','@','%state'));
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Set a generic selector for a specific package. This generic selector will be used to target some elements like [class*="gr-"].
 * If not specified for a package, the generic selector will be generated automatically but sometimes it's better to hardcode it.
 * @param 		{String} 		$package 		The package to specify the generic selector for
 * @param 		{String} 		$selector 		The generic selector like [class*="gr-"], or whatever...
 * @example 	scss
 * \@include g-set-generic-selector(grid, '[class*="gr-"]');
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Register some basics states:
 *
 * - mobile : 0 to 480px
 * - tablet : 481px to 1024px
 *
 * @example 	scss
 * \@include g-register-default-states();
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Register some basics mobile first states:
 *
 * - mobile : 320px to infinite
 * - tablet : 640px to infinite
 * - desktop : 992px to infinite
 * - large : 1200px to infinite
 *
 * @example 	scss
 * \@include g-register-mobile-first-states();
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Register bootstrap 3 states
 *
 * - xs : 0 to 750px
 * - sm : 750px to infinite
 * - md : 970px to infinite
 * - lg : 1170px to infinite
 *
 * @example 	scss
 * \@include g-register-bootstrap3-states();
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Register bootstrap 4 states
 *
 * - xs : 0 to 576px
 * - sm : 576px to infinite
 * - md : 970px to infinite
 * - lg : 1200px to infinite
 *
 * @example 	scss
 * \@include g-register-bootstrap4-states();
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * @name 	Base API
 * This are all the base API mixins that are exposed by gridle.
 */
/**
 * Specify a layout using a single call like in the example bellow
 * @param 		{Map} 				$layout 				The map layout wanted
 * @param 		{Map|List|String} 	[$context=null] 		The context in which to apply the layout
 * @example 	scss
 * body {
 * 	\@include g-layout((
 * 	 	'#header' : 12,
 * 	 	'#sidebar' : 4 mobile 12,
 * 	 	'#content' : 8 mobile 12,
 * 	 	'#footer' : 12
 * 	));
 * }
 *
 * @author 	Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply some styling in a passed state
 * @param 		{Map|List|String} 		$states 		The states to apply the css for. Can be a state map, a list of states or a state name
 * @example 	scss
 * .my-cool-element {
 * 	// specify a register state name
 * 	\@include g-state(mobile) {
 * 		// your css code here...
 * 	}
 * 	// specify more than one register states
 * 	\@include g-state(mobile tablet) {
 * 		// your css code here...
 * 	}
 *  // specify a min and max width
 * 	\@include g-state(200px, 500px) {
 * 		// your css code here...
 * 	}
 * 	// passing a state map (complexe usage)
 * 	\@include g-state((
 * 		query : 'print only'
 * 	)) {
 * 		// your code here...
 * 	}
 * }
 *
 * @author 	Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply some css depending on the element size (element queries)
 * **Using this mixin requires that you import the ```gridle-eq.js``` file into your javascript code**
 * @param 	{Number} 	$size 				The size to take care of. If negative, mean lower than, if positive, mean greater than.
 * @param 	{Boolean} 	[$height=false] 	Set to true to handle height instead of width
 * @example 	scss
 * .my-cool-element {
 *  	\@include g-eq(-400px) {
 *  		// your css that will be applied when element
 *  		// is between 0 and 399px wide
 *  	}
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Basically, this is the same as the ```g-state``` mixin, with the difference that it will not print any media queries. It will just create a state context in which your inside code will refer.
 * @param 		{Map|List|String} 		$states 		The states to apply the css for. Can be a state map, a list of states or a state name
 * @example 	scss
 * @warn(g-get-state-var(min-width)); // will output the min-width of the default state
 * \@include g-state-context(mobile) {
 *  	@warn(g-get-state-var(min-width)); // will output the min-width of the mobile state
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Will print the generated selector depending on the "package" wanted, the state and some optional values that might be needed by the package (like for row-align that need a "side" value)
 * @param 		{String} 							$package 			The package to generate the selector for (see _settings.scss file)
 * @param 		{String|List<String} 				[$states=null] 		The list of state to generate the selector for. If not specified, will generate for all registered states
 * @param 		{Mixed} 							[$value=null] 		The value that will be used to replace the "%{tokenName}" inside the package pattern
 * @example 	scss
 * \@include g-selector(grid, mobile, 2) {
 * 	// your code here
 * 	// The selector will be .gr-2@mobile
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Helper gridle mixin that let you specify the grid properties through ```g-set``` map, or a list of properties like "8 push 2 mobile 12 push 0"
 * @param 		{Map|List} 			$properties 			The grid properties to apply
 * @example 	scss
 * #content {
 * 	// using list
 * 	\@include gridle(8 mobile 12);
 * 	// using a map
 * 	\@include gridle((
 * 		grid : 8,
 * 		mobile : (
 * 			grid : 12
 * 		)
 * 	));
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Helper mixin that let you specify the grid properties through map formated like in the example bellow.
 * Here's the possible properties:
 *
 * - ```grid``` {Integer} : The grid column count
 * - ```container``` {Boolean} : Set the element as container
 * - ```grid-grow``` {Boolean} : Set the element a grid column that grow
 * - ```grid-adapt``` {Boolean} : Set the element a grid column that adapt
 * - ```grid-table``` {Boolean} : Set the element a grid column of type table
 * - ```push``` {Integer} : Set the push count
 * - ```pull``` {Integer} : Set the pull count
 * - ```prefix``` {Integer} : Set the prefix count
 * - ```suffix``` {Integer} : Set the suffix count
 * - ```clear-each``` {Integer} : Set the clear each count
 * - ```grid-centered``` {Boolean} : Set the grid column as centered
 * - ```row``` {Boolean} : Set the element as a grid row
 * - ```row-full``` {Boolean} : Set the element as a grid row full
 * - ```col``` {Boolean} : Set the element as a grid column (vertical)
 * - ```row-align``` {String} : Set the row alignement
 * - ```row-no-gutter``` {Boolean} : Remove the gutters on columns inside this row
 * - ```nowrap``` {Boolean} : Set a nowrap on the row
 * - ```wrap``` {Boolean} : Reset the wrap property on the row
 * - ```order``` {Integer} : Set the order of the column (flex driver)
 * - ```hide``` {Boolean} : Hide the element
 * - ```show``` {Boolean} : Show the element
 * - ```visible``` {Boolean} : Set the visibility of the element to visible
 * - ```not-visible``` {Boolean} : Set the visibility of the element to hidden
 * - ```invisible``` {Boolean} : Set the visibility of the element to hidden
 * - ```show-inline``` {Boolean} : Set the display of the element to inline-block
 * - ```float``` {String} : Set the specified float of the element
 * - ```clear``` {String} : Clear the specified float of the element
 * - ```no-gutter``` {Boolean|String|List<String>} : Remove the specified gutters
 * - ```gutter``` {Boolean|String|List<String>} : Apply the specified gutters
 *
 * @param 		{Map} 			$properties 			The grid map properties to apply
 * @example 	scss
 * #content {
 * 	// using a map
 * 	\@include gridle((
 * 		grid : 8,
 * 		push : 2
 * 		mobile : (
 * 			grid : 12
 * 		),
 * 		{stateName} : {mapProperties}
 * 	));
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Set the push count for the column
 * @param 		{Integer} 		$columns 			The number of columns to push this column
 * @param 		{Integer} 		[$context=null]  	The context on which to calculate the push value. By default, it is the default context setted with ```g-setup```.
 * @example 	scss
 * .my-cool-column {
 * 	\@include g-push(2);
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Set the pull count for the column
 * @param 		{Integer} 		$columns 			The number of columns to pull this column
 * @param 		{Integer} 		[$context=null]  	The context on which to calculate the pull value. By default, it is the default context setted with ```g-setup```.
 * @example 	scss
 * .my-cool-column {
 * 	\@include g-pull(2);
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Set the prefix count for the column
 * @param 		{Integer} 		$columns 			The number of columns to prefix this column
 * @param 		{Integer} 		[$context=null]  	The context on which to calculate the prefix value. By default, it is the default context setted with ```g-setup```.
 * @example 	scss
 * .my-cool-column {
 * 	\@include g-prefix(2);
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Set the suffix count for the column
 * @param 		{Integer} 		$columns 			The number of columns to suffix this column
 * @param 		{Integer} 		[$context=null]  	The context on which to calculate the suffix value. By default, it is the default context setted with ```g-setup```.
 * @example 	scss
 * .my-cool-column {
 * 	\@include g-suffix(2);
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Display a debug grid on top of the row
 * @example 	scss
 * .my-row {
 * 	\@include g-row-debug();
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Make the element a grid container
 * @example 	scss
 * .my-cool-container {
 * 	\@include g-container();
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Remove the gutters on each columns inside the row
 * @param 		{String|List<String>} 		[$sides=top right bottom left] 		The sides to clear
 * @example 	scss
 * .my-cool-row {
 * 	\@include g-row-no-gutter(left right);
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Make a column centered
 * @example 	scss
 * .my-cool-column {
 * 	\@include g-grid-centered();
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Hide an element
 * @example 	scss
 * .my-cool-element {
 * 	\@include g-hide();
 * }
 *
 * @author 	Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Set the visibility of an element to hidden
 * @example 	scss
 * .my-cool-element {
 * 	\@include g-not-visible();
 * }
 *
 * @author 	Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Set the visibility of an element to hidden
 * @example 	scss
 * .my-cool-element {
 * 	\@include g-invisible();
 * }
 *
 * @author 	Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Set the display of an element to block
 * @example 	scss
 * .my-cool-element {
 * 	\@include g-show();
 * }
 *
 * @author 	Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Set the display of an element to inline-block
 * @example 	scss
 * .my-cool-element {
 * 	\@include g-show();
 * }
 *
 * @author 	Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Set the visibility of an element to visible
 * @example 	scss
 * .my-cool-element {
 * 	\@include g-show();
 * }
 *
 * @author 	Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Set the float property of the element to the specified direction
 * @param 		{String} 		[$float=left] 		The float direction to set
 * @example 	scss
 * .my-cool-element {
 * 	\@include g-float(right);
 * }
 *
 * @author 	Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Clear the float property of the element to the specified direction
 * @param 		{String} 		[$float=left] 		The float direction to clear
 * @example 	scss
 * .my-cool-element {
 * 	\@include g-clear(right);
 * }
 *
 * @author 	Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Remove the gutters on the column
 * @param 		{String|List<String>} 		[$sides=top right bottom left] 		The sides to clear
 * @example 	scss
 * .my-cool-column {
 * 	\@include g-no-gutter(left right);
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Set the gutters on the column
 * @param 		{String|List<String>} 		[$sides=top right bottom left] 		The sides to apply gutters on
 * @example 	scss
 * .my-cool-column {
 * 	\@include g-gutter(left right);
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * @name 	Generate mixins
 * This are all the mixins that you can use to generate classes to use inside your HTML codebase
 */
/**
 * Generate a custom class for all the states
 * @param 	{List} 	$pattern 					The name pattern of the class
 * @param 	{List} 	[$statesNames=null] 		The states names to generate. If null or all, will generate the class for all registered states
 * @example 	scss
 * \@include g-generate-custom-class(('my','-','cool','-','class','-','%state')) {
 * 	color: pink;
 * 	padding: g-get-state-var(gutter-left);
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Generate all the classes depending on the packages you have specified like:
 * - ```.container@{state}``` : default container
 * - ```.row@{state}``` : default row
 * - ```.row-align-{align}@{state}``` : default row-align
 * - ```.row-full@{state}``` : default row-full
 * - ```.row-debug@{state}``` : default row-debug
 * - ```.row-no-gutter@{state}``` : default row-no-gutter
 * - ```.nowrap@{state}``` : default nowrap
 * - ```.wrap@{state}``` : default wrap
 * - ```.col@{state}``` : default col
 * - ```.gr-{column}@{state}``` : default grid
 * - ```.gr-table@{state}``` : default gr-table
 * - ```.gr-grow@{state}``` : default gr-grow
 * - ```.gr-adapt@{state}``` : default gr-adapt
 * - ```.gr-centered@{state}``` : default gr-centered
 * - ```.push@{state}``` : default push
 * - ```.pull@{state}``` : default pull
 * - ```.prefix@{state}``` : default prefix
 * - ```.suffix@{state}``` : default suffix
 * - ```.hide@{state}``` : helpers hide
 * - ```.show@{state}``` : helpers show
 * - ```.show-inline@{state}``` : helpers show-inline
 * - ```.not-visible@{state}``` : helpers not-visible
 * - ```.visible@{state}``` : helpers visible
 * - ```.float-{%float}@{state}``` : helpers float
 * - ```.clear-{%float}@{state}``` : helpers clear
 * - ```.clear-each-{%count}@{state}``` : helpers clear-each
 * - ```.gutter-{%side}@{state}``` : helpers gutter
 * - ```.no-gutter-{%side}@{state}``` : helpers no-gutter
 * - ```.auto-height@{state}``` : helpers auto-height
 * - ```.order-{%column-count}@{state}``` : helpers order
 *
 * @param 		{String|List<String>} 		[$states=all] 		The states to generate the classes for
 * @param 		{String|List<String>} 		[$package=all] 		The packages to generate the classes for
 * @param 		{String} 					[$scope=null] 		A classname to scope the classes in
 *
 * @example 	scss
 * // generate all the classes
 * \@include g-classes();
 * // generate only certain states
 * \@include g-classes(mobile tablet);
 * // generate only the helpers for all the states
 * \@include g-classes(all, helpers);
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * @name 	Default driver API
 * This are all the API mixins that are exposed by gridle for the default driver.
 */
/**
 * Set the element as a row
 * @param 		{Boolean} 		[$reverse=false] 		Revert the columns order if true
 * @example 	scss
 * .my-cool-row {
 * 	\@include g-row();
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Set the element as a col
 * @param 		{Boolean} 		[$reverse=false] 		Revert the columns order if true
 * @example 	scss
 * .my-cool-col {
 * 	\@include g-col();
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply a nowrap on the element
 * @example 	scss
 * .my-cool-element {
 * 	\@include g-nowrap();
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Reset the nowrap on the element
 * @example 	scss
 * .my-cool-element {
 * 	\@include g-wrap();
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply a column width on the element
 * @param 		{Integer|String} 		$columns 			The column count to apply or a registered column name
 * @param 		{Integer} 				[$context=null]  	The context on which to calculate the column width. If null, take the context setted with ```g-setup```
 * @example 	scss
 * .my-cool-column {
 * 	\@include g-grid(2);
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Set the grid element as a table display type
 * @example 	scss
 * .my-cool-column {
 * 	\@include g-grid(2);
 * 	\@include g-grid-table();
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Set the width of the row element to full viewport width
 * @example 	scss
 * .my-cool-row {
 *  \@include g-row();
 * 	\@include g-row-full();
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Set the width of the grid element to adapt to his content
 * @example 	scss
 * .my-cool-column {
 *  \@include g-grid-adapt();
 *  // or
 *  \@include g-grid(adapt);
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Set the width of the grid element to grow depending on the place it has at disposal
 * @example 	scss
 * .my-cool-column {
 *  \@include g-grid-grow();
 *  // or
 *  \@include g-grid(grow);
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Clear each n childs
 * @example 	scss
 * .my-cool-row {
 *  \@include g-clear-each(2);
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Set the alignement of the columns inside the row using these alignement properties:
 *
 * - top : Align vertical top
 * - middle : Align vertical middle
 * - bottom : Align vertical bottom
 * - left : Align horizontal left
 * - center : Align horizontal center
 * - right : Align horizontal right
 *
 * @example 	scss
 * .my-cool-row {
 *  \@include g-row-align(middle center);
 *  \@include g-row-align(right);
 *  \@include g-row-align(middle);
 *  // etc...
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Parse and return the Map respresentation of a border property
 * The $border argument will be parsed with the [s-parse-properties](../core/functions/_s-parse-properties.scss) function.
 *
 * @param 		{List} 			$border 			The border property to parse
 * @return 		{Map} 								The Map represenration of the border
 *
 * @example
 * s-border(1px solid white);
 * // return
 * // (
 * // 	width : 1px,
 * // 	color : white,
 * // 	style : solid
 * // )
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Return the Map representation of a columns properties
 * @param  		{Interger} 			[$count=null] 			The number of columns
 * @param 		{Number} 			[$gap=null] 			The gap width between each columns
 * @param 		{String} 			[$fill=null] 			The fill property (balance,auto,initial,inherit)
 * @param 		{Number} 			[$width=null] 			The width of the columns
 * @param 		{Integer|String} 	[$span=null] 			The column-span property (1,all,initial,inherit)
 * @param 		{List} 				[$rule=null] 			The column-rule property
 * @param 		{String} 			[$rule-style=null]  	The column-rule-style property
 * @param 		{Color} 			[$rule-color=null] 		The column-rule-color property
 * @param 		{Number} 			[$rule-width=null] 		The column-rule-width property
 * @return 		{Map} 										The map representation or the columns properties
 *
 * @example
 * s-columns(2, 20px);
 * // return
 * // (
 * // 	column-count : 2,
 * // 	column-gap : 20px
 * // )
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Parse and return the Map respresentation of a margin property
 * The $margin argument will be parsed with the [s-parse-properties](../core/functions/_s-parse-properties.scss) function.
 *
 * @param 			{List|Number} 			$margin 			The margin property to parse
 * @return 			{Map} 										The map representation
 *
 * @example
 * s-margin(10px); // => ( top:10px, right:10px, bottom:10px, left:10px )
 * s-margin(10px 20px); // => ( top:10px, right:20px, bottom:10px, left:20px )
 * s-margin(5px 10px 15px 20px); // => ( top:5px, right:10px, bottom:15px, left:20px )
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Return the representation of a position styling like position:absolute; top:0; left:100%; etc...
 * This function gives you some shortcuts to align your element top, bottom, middle, center, etc...
 *
 * @param 		{String} 			[$position=absolute] 			The position css property
 * @param 		{String} 			[$vertical-align=top] 			The vertical alignement wanted (top,middle,bottom)
 * @param 		{String} 			[$align=left] 					The horizontal alignement wanted (left,center,right)
 * @param 		{Number} 			[$top=null] 					The top property wanted
 * @param 		{Number} 			[$right=null] 					The right property wanted
 * @param 		{Number} 			[$bottom=null] 					The bottom property wanted
 * @param 		{Number} 			[$left=null] 					The left property wanted
 * @return 		{Map} 												The map representation of the position wanted
 *
 * @example
 * s-position(absolute, top, right);
 * s-position(absolute, middle, center);
 * s-position(relative, bottom, right);
 * s-position(absolute, bottom, center);
 * // etc...
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Return the Map properties representation for the rhythme width
 * The rhythme width is the width of an element that target a certain number of letters by line
 *
 * @param 			{Integer} 			[$letters-count=settings.typography.line-letters-count] 		The number of letters to target by line
 * @return 			{Map} 																		The Map properties representation
 *
 * @example
 * s-rhythme-width(50);
 * // return
 * // (
 * // 	display : block,
 * // 	max-width : 50ex
 * // )
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Return the Map properties representation of a translate x,y and z
 *
 * @param 			{Number} 			[$x=0] 			The x translate value
 * @param 			{Number} 			[$y=0] 			The y translate value
 * @param 			{Number} 			[$z=0] 			The z translate value
 * @return 			{Map} 								The translate Map representation
 *
 * @example
 * s-translate(10px,20px);
 * // return
 * // (
 * // 	transform: translateX(10px) translateY(20px) translateZ(0)
 * // )
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Return the settings.vertical-rhythme.scope-class value
 *
 * @return 			{String} 			The settings.vertical-rhythme.scope-class value
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Helper mixin to set a background image
 *
 * @param 			{String} 				[$repeat=null] 				The background-repeat property
 * @param 			{String} 				[$size=null] 				The background-size property
 * @param 			{String} 				[$attachment=null] 			The background-attachment property
 * @param 			{String} 				[$blend-mode=null] 			The background-blend-mode property
 * @param 			{String} 				[$clip=null] 				The background-clip property
 * @param 			{String} 				[$url=null] 				The background-image url property
 * @param 			{Number} 				[$width=null] 				The background-size width property
 * @param 			{Number} 				[$height=null] 				The background-size height property
 * @param 			{Number} 				[$top=null] 				The background-position top property
 * @param 			{Number} 				[$left=null] 				The background-position left property
 * @param 			{String} 				[$suffix2x=@2x] 			The suffix to add the the url if the 2x resolution if wanted
 * @param 			{String} 				[$suffix3x=@3x] 			The suffix to add the the url if the 3x resolution if wanted
 * @param 			{String} 				[$suffix4x=@4x] 			The suffix to add the the url if the 4x resolution if wanted
 * @param 			{List} 					[$resolution=null] 			The resolution wanted like 2x, 3x and 4x
 * @param 			{List} 					[$position=null] 			The background-position property
 *
 * @example
 * .my-cool-element {
 * 		\@include s-background(
 * 			$url : 'img/my-cool-image.jpg',
 * 			$size : cover,
 * 			resolution : 2x 3x 4x
 * 		);
 * }
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * @name 	BEM mixins
 * Some useful mixins to work with BEM methodology
 */
/**
 * BEM block selector
 * @param 		{String} 				$name 		The block name
 * @param 		{String|List<String>} 	[$extend=false] 	The list of item to extends
 * @example 	scss
 * \@include s-Bem('card') {
 *  	background: white;
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * BEM element selector
 * @param 		{String} 				$name 		The block name
 * @param 		{String|List<String>} 	[$extend=false] 	The list of item to extends
 * @example 	scss
 * \@include s-Bem(card) {
 * 	background:white;
 *
 * 	\@include s-bEm(title) {
 * 		font-size:20px;
 * 	}
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * BEM modifier selector
 * @param 		{String} 				$name 		The block name
 * @param 		{String|List<String>} 	[$extend=false] 	The list of item to extends
 * @param 		{Boolean} 				[$standelone=s-setting('BEM.standelone')] 		If true, will automatically extends the base element
 * @example 	scss
 * \@include s-Bem(card) {
 * 	background:white;
 *
 * 	\@include s-beM(blue) {
 * 		background: blue;
 * 	}
 * }
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply some border radius
 * @param 		{Number} 		[$radius=null] 			The radius to apply globally
 * @param 		{Number} 		[$top=null] 			The radius to apply on top corners
 * @param 		{Number} 		[$right=null] 			The radius to apply on right corners
 * @param 		{Number} 		[$bottom=null] 			The radius to apply on bottom corners
 * @param 		{Number} 		[$left=null] 			The radius to apply on left corners
 * @param 		{Number} 		[$top-left=null] 		The radius to apply on top-left corners
 * @param 		{Number} 		[$top-right=null] 		The radius to apply on top-right corners
 * @param 		{Number} 		[$bottom-left=null] 	The radius to apply on bottom-left corners
 * @param 		{Number} 		[$bottom-right=null] 	The radius to apply on bottom-right corners
 *
 * @example 	scss
 * .my-cool-item {
 * 	// apply on top left and right corners
 * 	\@include s-border-radius(
 * 		$top : 10px;
 * 	);
 * 	// apply on each corners
 * 	\@include s-border-radius(10px);
 * 	// etc...
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Center a block element using margins etc...
 * @example 	scss
 * .my-cool-block-element {
 * 	\@include s-center-block();
 * }
 *
 * @author 	Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * @name 	s-clearfix
 * Apply a clearfix on the element.
 * Supported methods:
 * - micro
 * - facebook
 * - float
 * - micro
 *
 * @param 		{String} 		[$method=micro] 		The clearfix method to use
 *
 * @example 	scss
 * .my-cool-element {
 *  \@include s-clearfix();
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
.clearfix-overflow {
  overflow: hidden;
}

.clearfix-facebook {
  display: table-cell;
  vertical-align: top;
  width: 10000px !important;
}

.clearfix-float {
  float: left;
  width: 100%;
}

.clearfix, .clearfix-micro {
  zoom: 1;
}

.clearfix:before, .clearfix-micro:before, .clearfix:after, .clearfix-micro:after {
  content: " ";
  display: table;
}

.clearfix:after, .clearfix-micro:after {
  clear: both;
}

/**
 * Display a coffeekraken logo with two specified colors
 * @param 		{Color} 		[$color=default] 	The base color to use
 * @param 		{Color} 		[$accent=primary] 	The accent color to use
 *
 * @example 	scss
 * .my-cool-coffeekraken-logo {
 * 	\@include s-coffeekraken-logo();
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Create a column layout my setting each columns properties at once
 * @param 		{Integer} 		[$count=null] 		The number of columns wanted
 * @param 		{Number} 		[$gap=null] 		The column-gap width wanted
 * @param 		{String} 		[$fill=null] 		The column-fill wanted
 * @param 		{Number} 		[$width=null] 		THe width of each columns wanted
 * @param 		{String} 		[$span=null] 		Specify on how many columns the element has to span across
 * @param 		{List} 			[$rule=null] 		Specify the shorthand version of the column-rule-color, column-rule-style and column-rule-width
 * @param 		{String} 		[$rule-style=null] 	Specify the column-rule-style wanted
 * @param 		{Color} 		[$rule-color=null] 	Specify the column-rule-color wanted
 * @param 		{Number} 		[$rule-width=null] 	Specify the column-rule-width wanted
 *
 * @example 	scss
 * .my-cool-container {
 * 	\@include s-columns(
 * 		$count : 3,
 * 		$gap : 30px,
 * 		$span : solid s-color(primary) 20px
 * 	);
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply some border radius
 * @param 		{Number} 		[$radius=null] 			The radius to apply globally
 * @param 		{Number} 		[$top=null] 			The radius to apply on top corners
 * @param 		{Number} 		[$right=null] 			The radius to apply on right corners
 * @param 		{Number} 		[$bottom=null] 			The radius to apply on bottom corners
 * @param 		{Number} 		[$left=null] 			The radius to apply on left corners
 * @param 		{Number} 		[$top-left=null] 		The radius to apply on top-left corners
 * @param 		{Number} 		[$top-right=null] 		The radius to apply on top-right corners
 * @param 		{Number} 		[$bottom-left=null] 	The radius to apply on bottom-left corners
 * @param 		{Number} 		[$bottom-right=null] 	The radius to apply on bottom-right corners
 *
 * @example 	scss
 * .my-cool-item {
 * 	// apply on top left and right corners
 * 	\@include s-corner(
 * 		$top : 10px;
 * 	);
 * 	// apply on each corners
 * 	\@include s-corner(10px);
 * 	// etc...
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
@keyframes s-DOMNodeInserted {
  from {
    opacity: .99;
  }
  to {
    opacity: 1;
  }
}

/**
 * Make the element fit his container.
 * @param 	{String} 			[$position=null] 		The position how to fit the element.
 *
 * @example 	scss
 * .my-cool-element {
 * 	\@include s-fit(absolute);
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Hide the contained text
 *
 * @example 	scss
 * .my-cool-container {
 * 	\@include s-hide-text();
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply an icon on the element. This mixin support font-awesome and custom icons systems that have an icon name formated like "icon-{name}"
 * @param 		{String} 		$name 		The icon name to apply
 *
 * @example 	scss
 * .my-cool-icon {
 * 	\@include s-icon(fa-user);
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Set how to render the image
 * @param 		{String} 		[$mode=auto] 		The mode to use to render the image
 *
 * @example 	scss
 * img {
 * 	\@include s-image-rendering(crips-edges);
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Set how the list bullet has to be displayed.
 * @param 		{String} 		[$type=null] 				The list type to use. Can be all the list-style-type values
 * @param 		{Url} 			[$image=null] 				An image url to use as bullet
 * @param 		{String} 		[$icon=null] 				An icon name to use as bullet. Will use the s-icon mixin under the hood
 * @param 		{Color} 		[$color=s-color(default)] 	The color to use for the bullet
 * @param 		{Number} 		[$size=null] 				The size to use for the bullet
 * @param 		{Number|List<Number>} 	[$offset=null] 		A number that represent the top offset, or a list of two numbers that represent the top, left offset
 * @param 		{String} 		[$font=null] 				The font name to use for the bullet
 * @param 		{Number} 		[$space=null] 				The space between the bullet and the content
 *
 * @example 	scss
 * .my-cool-list__item {
 * 	@\include s-list-bullet(
 * 		$image : '../img/my-cool-bullet.svg',
 * 		$offset : 5px 10px,
 * 		$size : 1em,
 * 		$space : 2em
 * 	);
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Start a new list
 * @param 		{String} 		[$counter-reset=s-list] 		A counter name to reset
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Easy to use media query mixin that support cssua classes to target specific browsers
 * @param 		{String} 		[$screen=null] 			Any of the @media screen type property like "screen, handheld, print, etc..."
 * @param 		{Number} 		[$min-width=null] 		The min width to target
 * @param 		{Number} 		[$max-width=null] 		The max width to target
 * @param 		{Number} 		[$min-height=null] 		The min height to target
 * @param 		{Number} 		[$max-height=null] 		The max height to target
 * @param 		{String} 		[$orientation=null] 	The orientation to target. Can be portrait or landscape
 * @param 		{String} 		[$resolution=null] 		The resolution to target. Can be 2x, 3x, 4x, etc...
 * @param 		{String} 		[$engine=null] 			The engine that powers the display. Can be gecko, webkit, trident, blink or presto
 * @param 		{String} 		[$device=null] 			The device to target. Can be mobile, tablet, desktop, iphone or ipad
 * @param 		{String} 		[$browser=null] 		The browser(s) to target. Can be chrome, safari, firefox, opera, ie, ie6-20
 * @param 		{String} 		[$system=null] 			The system(s) to target. Can be ios, osx, windows, linux, android, webos or blackberry
 *
 * @example 	scss
 * // simple min width
 * \@include s-media(
 * 	$min-width : 200px
 * ) {
 * 	// custom css here...
 * }
 *
 * // target a specific engine
 * \@include s-media(
 * 	$engine : gecko webkit
 * ) {
 * 	// custom css here
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Set the placeholder style for inputs, etc...
 *
 * @example 	scss
 * input, textarea {
 * 	\@include s-placeholder() {
 * 		color : red;
 * 	}
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Set a complexe position styling like position:absolute; top:0; left:100%; etc...
 * This mixin gives you some shortcuts to align your element top, bottom, middle, center, etc...
 *
 * @param 		{String} 			[$position=absolute] 			The position css property
 * @param 		{String} 			[$vertical-align=top] 			The vertical alignement wanted (top,middle,bottom)
 * @param 		{String} 			[$align=left] 					The horizontal alignement wanted (left,center,right)
 * @param 		{Number} 			[$top=null] 					The top property wanted
 * @param 		{Number} 			[$right=null] 					The right property wanted
 * @param 		{Number} 			[$bottom=null] 					The bottom property wanted
 * @param 		{Number} 			[$left=null] 					The left property wanted
 * @return 		{Map} 												The map representation of the position wanted
 *
 * @example
 * .my-cool-element {
 * 	// absolute top right
 * 	\@include s-position(absolute, top, right);
 * 	// custom right and bottom values
 * 	\@include s-position(absolute,
 * 		$bottom : 20px,
 * 		$right : 20px
 * 	);
 * 	// etc...
 * }
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply a ratio css styling. This will apply a before or after content that will make the element keep the specified ratio.
 * The content need to be displayed as absolute top left and fit in size.
 *
 * @param 		{Number} 		$ratio 			The ratio to keep like 16/9, etc...
 * @param 		{String} 		[$type=before] 	The type of ratio to apply. Can be before or after
 *
 * @example 	scss
 * .my-cool-element {
 * 	\@include s-ratio(16/9);
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Print out a reset css
 * @example 	scss
 *
 * \@include s-reset();
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Print out the css on a container that will make the lines displays a maximum number of characters.
 *
 * @example 	scss
 * h1 {
 * 	\@include s-rhythme-width(45);
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply some css to have a rounded element with already an overflow on it
 *
 * @param 		{Number} 		[$size=null] 		The size (width and height) of the element wanted
 * @param 		{Number} 		[$width=null] 		The width of the element wanted
 * @param 		{Number} 		[$height=null] 		The height of the element wanted
 *
 * @example 	scss
 * .my-cool-image {
 * 	\@include s-round(100px);
 *
 * 	img {
 * 		\@include s-size(cover);
 * 	}
 * }
 */
/**
 * Quicky and easily set simple or complexe size to any element
 * @param 		{String|Number} 		$size-width				The size like "cover" or "contain", or the width un number
 * @param 		{Number} 				[$height=null] 			The height wanted
 * @param 		{String} 				[$position=absolute] 	The position wanted if the size is "cover" or "contain"
 *
 * @example 	scss
 * .my-cool-image {
 * 	\@include s-size(cover);
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Quicky set some translates
 * @param 		{Number} 		[$x=0] 		The x translate value
 * @param 		{Number} 		[$y=0] 		The y translate value
 * @param 		{Number} 		[$z=0] 		The z translate value
 *
 * @example
 * .my-cool-element {
 * 	\@include s-translate(50%, 20px);
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Print out the style to truncate the text if needed
 *
 * @example 	scss
 * h1 {
 * 	\@include s-truncate-text();
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Vertically align content by using the inline-block middle trick
 *
 * @example 	scss
 * .my-cool-container {
 * 	\@include s-vertical-aligner();
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Hide an element only visually. This ensure that the element is still correctly displayed in the page for SEO
 * but will not being visible to the user
 *
 * @example 	scss
 * .my-cool-element {
 * 	\@include s-visually-hidden();
 * }
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Get a registered color by name or wrap a new color into a s-color call
 * to manipulate it with ease.
 * Supported actions :
 * - hue {Deg}
 * - lighten {Percent}
 * - darken {Percent}
 * - saturate {Percent}
 * - desaturate {Percent}
 * - grayscale {Boolean}
 * - complement {Boolean}
 * - invert {Boolean}
 * - opacity {Percent}
 * - mix {Color}
 *
 * @param 		{String|Color} 		$color 				The color name or the color value to manipulate
 * @param 		{String|List} 			[$modifier=null] 	The color modifier to apply. Can be a registered modifier name or a modifier list
 * @return 		{Color} 									The actual color value
 *
 * @example 	 	scss
 * // default color (settings.colors.default)
 * $myColor : s-color(default);
 * // primary color (settings.colors.primary)
 * $primary : s-color(primary);
 * // manipulate
 * $primary-dark : s-color(primary, -darken 10%);
 * // registered modifier
 * $primary-light : s-color(primary, light);
 * // $name as list
 * $modified primary : s-color((primary, -darken 10%));
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Return the color in a modifier list
 * @param 			{List} 			$modifiers 		The modifiers list
 * @return 			{String} 						The color name
 *
 * @example
 * $my-color : s-color-modifier(outline primary); // => primary
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Return the css class selector for the current component setted by the [core/mixins/_s-component.scss] mixin
 * and build with the passed arguments.
 *
 * @param 			{String} 			[$element=null] 		The element name of the class selector | '&' if target the same element like `&s-component-selector("&", ) {}`
 * @param 			{String} 			[$modifier=null] 		The modifier name of the class selector
 * @param 			{String} 			[$state=null] 			The state name of the class selector
 * @return 			{String} 									The generated class selector
 *
 * @example
 * \@incluse s-component('my-component') {
 * 		// if settings.selector.method === 'BEM'
 * 		s-component-selector('item') // => '.my-component__item'
 * 		s-component-selector(null, 'red') // => '.my-component--red'
 * 		s-component-selector('coco',null,'active') // => '.my-component__coco--active'
 * }
 *
 * // if target the same element with & :
 * \@include s-component('my-component') {
 * 		s-component-selector(, red, , "color") {
 * 			&s-component-selector("&", , "active") {
 * 				// something here...
 * 			}
 * 		}
 * }
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Return the name of the top level component setted with the [../mixins/_s-component.scss] mixin
 *
 * @param 			{String} 			[$default=null] 		The name to return if no top component name exist
 * @return 			{String} 									The component name
 *
 * @example
 * s-component('hello') // => 'hello'
 * \@include s-component('my-component') {
 * 		s-component('hello') // => 'my-component'
 * 		\@include s-component('another-component') {
 * 			s-component('hello') // => 'my-component'
 * 		}
 * }
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>;
 */
/**
 * Convert a passed value to the wanted unit
 * The conversion between some units that depends on a font-size will take the settings.typography.font-size value as reference.
 *
 * Available conversions
 * - from px
 * 	- to em
 * 	- to rem
 * 	- to pt
 * 	- to %
 *
 * - from em
 * 	- to rem
 * 	- to px
 * 	- to pt
 * 	- to %
 *
 * - from pt
 * 	- to em
 * 	- to rem
 * 	- to px
 * 	- to pt
 * 	- to %
 *
 * - from rem
 * 	- to em
 * 	- to px
 * 	- to pt
 * 	- to %
 *
 * @param 			{Number} 		$value 			The value to convert
 * @param 			{String} 		$unit 			The unit in which to convert the value
 * @return 			{Number} 						The converted value
 *
 * @example
 * // if the settings.typography.font-size === 16px
 * s-convert(24px, rem) // 1.5rem
 * s-convert(3rem, pt) // 36pt
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Transform a dash notation value into a map
 * Dash notation value is : -key1 value1 -key2 value2
 *
 * @param 			{List} 			$dash 			The dash list notation to transform
 * @return 			{Map} 							The map generated
 *
 * @example
 * $dash : -hello world -coco universe
 * s-dash-to-map($dash);
 * // (
 * // 	hello : world,
 * // 	coco : universe
 * // )
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Convert the passed value to em
 *
 * @param 			{Number} 		$value 		The value to convert
 * @return 			{Number} 					The em converted value
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Convert the passed value to the closest even value
 *
 * @param 			{Number} 		$value 		The value to convert
 * @return 			{Number} 					The closest even converted value
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Take a filter as parameter and parse it to return the {Map} corresponding
 * The $filter parameter can be either a registered filter name or a filter formated like `filterName(filterValue)`
 *
 * @param 			{List}<String> 			$filter 			The registered filter name or the filter string to transform into map
 * @return 			{Map} 										The corresponding filter map properties
 *
 * @example
 * // register a filter
 * \@include s-setup((
 * 		filters : (
 * 			myCoolFilter : box-shadow(#000 0 0 10px) blur(30px),
 * 			// other filters...
 * 		)
 * ));
 *
 * // registered filter
 * s-filter-map(myCoolFilter);
 * // {
 * // 	box-shadow : #000 0 0 10px,
 * // 	blur : 30px
 * // }
 *
 * // custom filter
 * s-filter-map(blur(10px));
 * // {
 * // 	blur : 10px
 * // }
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Return a list with all the filters that are passed as argument
 * This will use the [./_s-filter-map.scss] function to parse the filters
 *
 * @param 	 	{List}<String> 			$filters 			The registered filter(s) name(s) or the filter(s) string(s) to transform into list
 * @return 		{List} 										The converted filters list to use as css property
 *
 * @example
 * // register a filter
 * \@include s-setup((
 * 		filters : (
 * 			myCoolFilter : box-shadow(#000 0 0 10px) blur(30px),
 * 			// other filters...
 * 		)
 * ));
 *
 * // registered filter
 * .my-cool-elememt {
 * 		filter : s-filter(myCoolFilter);
 * 		// filter : box-shadow(#000 0 0 10px) blur(30px);
 * }
 *
 * // custom filter
 * .my-cool-element {
 * 		filter : s-filter(myCoolFilter invert(100%));
 * 		// filter : box-shadow(#000 0 0 10px) blur(30px) invert(100%);
 * }
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Return the font-family string or a registered font
 *
 * @param 			{String} 		$name 		The name of the registered font
 * @return 			{String} 					The corresponding font-family property to set in your css
 *
 * @example
 * // register a font
 * \@include s-setup((
 * 		fonts : (
 * 			myCoolFont : (
 * 				font-family : 'Helvetica Neue',
 * 				font-weight : 'bold',
 * 				// etc...
 * 			),
 * 			// other fonts...
 * 		)
 * ));
 *
 * // apply the font
 * .my-cool-element {
 * 		font-family : s-font-family(myCoolFont);
 * 		// font-family : 'Helvetica Neue';
 * }
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Return the font {Map} that correspond to the passed arguments
 *
 * @param 		{String} 			[$family=null] 			The font family wanted (can be a registered font name)
 * @param 		{Color} 			[$color=null] 			The color wanted (can be a registered color name)
 * @param 		{Number} 			[$size=null] 			The font-size wanted
 * @param 		{String} 			[$style=null] 			The font-style wanted
 * @param 		{String} 			[$variant=null] 		The font-variant wanted
 * @param 		{String|Number} 	[$weight=null] 			The font-weight wanted
 * @param 		{String} 			[$decoration=null] 		The text-decoration wanted
 * @param 		{String} 			[$align=null] 			The text-align wanted
 * @param 		{String} 			[$transform=null] 		The text-transform wanted
 * @param 		{String} 			[$stretch=null] 		The font-stretch wanted
 * @param 		{String} 			[$white-space=null] 	The white-space wanted
 * @param 		{Number} 			[$height=null] 			The line-height wanted
 * @param 		{Number} 			[$spacing=null] 		The letter-spacing wanted
 * @param 		{Number} 			[$indent=null] 			The text-indent wanted
 * @param 		{String} 			[$break=null] 			The line-break wanted
 * @param 		{String} 			[$wrap=null] 			The word-wrap wanted
 * @return 		{Map} 										The corresponding font map
 *
 * @example
 * s-font(
 * 		$family : 'Helvetica Neue',
 * 		$size : 12px,
 * 		$wrap : norwap
 * );
 * // (
 * 		font-family : 'Helvetica Neue',
 * 		font-size : 12px,
 * 		word-wrap : nowrap
 * // )
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Check if the provided color is a registered one or not
 * @param 		{String} 		$color 		The color nane to check
 * @return 		{Boolean} 					True if exists, false if not
 */
/**
 * Return the specified or calculated value of the given stack and size
 * depending on the settings.sizes ratios stack
 *
 * @param 		{Map} 			$stack 			The stack from which to interpolate the value
 * @param 		{String} 		$size 			The size wanted (has to exist in the settings.sizes stack)
 * @return 		{Number} 						The $stack.$size value or the interpolated one depending on the settings.sizes ratios
 *
 * @example
 *
 * // settings.sizes
 * \@include s-setup((
 * 		sizes : (
 * 			small : 0.5,
 * 			default : 1, // default is ALWAYS 1
 * 			big : 1.5
 * 		)
 * ));
 *
 * $myStack : (
 * 		default : 3rem,
 * 		big : 6rem
 * )
 *
 * s-interpolate($myStack, big) // 6rem cause specified in the $myStack value
 * s-interpolate($myStack, small) // 1.5rem => calculated like : 3rem * 0.5 = 1.5rem
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Check if the passed value is of a certain type
 *
 * Here's the available types that you can check
 * - mixed => mean anything
 * - null
 * - url
 * - px
 * - pt
 * - rem
 * - em
 * - percent | %
 * - vw
 * - vh
 * - ex
 * - ch
 * - cm
 * - mm
 * - in
 * - pc
 * - s | second
 * - boolean | bool
 * - function
 * - number
 * - int | integer
 * - string
 * - color
 * - list
 * - map
 * - deg | degree
 * - list-{type} => check if is a list of the specified type
 * - map-{type} => check if is a map of the specified type
 *
 * @param 			{Mixed} 			$value 			The value to check
 * @param 			{String} 			$type 			The type to check
 * @return 			{Boolean} 							true if match the type, false if not
 *
 * @example
 * s-is(hello, string) // => true
 * s-is('hello', string) // => true
 * s-is(#fff, color) // => true
 * s-is(hello #fff, list-color) // => false
 * s-is(#fff #ddd, list-color) // => true
 * // etc...
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Alias to the [./_s-look-and-feel.scss] function
 *
 * Return a settings.look-and-feel stack value
 *
 * @param 		{String} 		$name					The look and feel value name
 * @return 		{Number} 								The look and feel value in em
 *
 * @example
 * .my-cool-element {
 * 		padding : s-lnf(padding-horizontal) s-lnf(padding-vertical);
 * }
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Return a settings.look-and-feel stack value
 *
 * @param 		{String} 		$name					The look and feel value name
 * @return 		{Number} 								The look and feel value in em
 *
 * @example
 * .my-cool-element {
 * 		padding : s-look-and-feel(padding-horizontal) s-look-and-feel(padding-vertical);
 * }
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Return the modular scale value based on the settings ```modular-scale.base``` and ```modular-scale.ratio```.
 *
 * @param 			{Number} 		$scale 		The wanted scale
 * @param 			{Number} 		[$base=settings.modular-scale.base] 	The base of calculation
 * @return 			{Number} 					The calculated resulting value
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Convert the passed value to the closest odd value
 *
 * @param 			{Number} 		$value 		The value to convert
 * @return 			{Number} 					The closest odd converted value
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Parse a given string/list properties and return the Map corresponding to the Map description
 *
 * @param 				{List} 				$properties 			The properties to parse
 * @param 				{Map} 				$descriptor 			The descriptor map to use to parse the properties
 * @return 				{Map} 										The properties in map format
 *
 * @example
 * s-parse-properties(10px hello -delay 20s, (
 *  	myNumber : Number,
 *  	myOtherNumber : Number,
 *  	myString : String,
 *  	myCoolVar : String,
 *  	delay : second
 * ));
 * // => (
 * //  	myNumber : 10px,
 * // 	myString : hello,
 * // 	delay : 20s
 * // )
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Convert the passed value to %
 *
 * @param 			{Number} 		$value 		The value to convert
 * @return 			{Number} 					The % converted value
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Convert the passed value to pt
 *
 * @param 			{Number} 		$value 		The value to convert
 * @return 			{Number} 					The pt converted value
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Convert the passed value to px
 *
 * @param 			{Number} 		$value 		The value to convert
 * @return 			{Number} 					The px converted value
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Convert the passed value to rem
 *
 * @param 			{Number} 		$value 		The value to convert
 * @return 			{Number} 					The rem converted value
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Return the passed values in the same unit but that has been even rounded on the corresponding px value
 * This ensure that your passed value will be a round px value for final rander in the viewport
 *
 * @param 		{Number} 		$value 			The value to process
 * @return 		{Number} 						The rounded value in same input unit but px rounded
 *
 * @example
 * // if settings.typography.font-size == 16px
 * s-render-round-even(5.2rem);
 * // 1. transform to px values : 5.2 * 16px = 83.2px
 * // 2. round even the px value : 84px
 * // 3. transform to passed unit value : 84px / 16px = 5.25rem
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Return the passed values in the same unit but that has been odd rounded on the corresponding px value
 * This ensure that your passed value will be a round px value for final rander in the viewport
 *
 * @param 		{Number} 		$value 			The value to process
 * @return 		{Number} 						The rounded value in same input unit but px rounded
 *
 * @example
 * // if settings.typography.font-size == 16px
 * s-render-round-odd(5.2rem);
 * // 1. transform to px values : 5.2 * 16px = 83.2px
 * // 2. round odd the px value : 83px
 * // 3. transform to passed unit value : 84px / 16px = 5.1875rem
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Return the passed values in the same unit but that has been rounded on the corresponding px value
 * This ensure that your passed value will be a round px value for final rander in the viewport
 *
 * @param 		{Number} 		$value 			The value to process
 * @return 		{Number} 						The rounded value in same input unit but px rounded
 *
 * @example
 * // if settings.typography.font-size == 16px
 * s-render-round(5.2rem);
 * // 1. transform to px values : 5.2 * 16px = 83.2px
 * // 2. round even the px value : 83px
 * // 3. transform to passed unit value : 84px / 16px = 5.1875rem
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Search and replace tokens like colors #primary in a passed string, list or map
 * Supported tokens types :
 * 1. Colors : colorName
 *
 * @example
 * s-replace-tokens(12px #primary hello #secondary); // > 12px #ddd hello #fff;
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Process selector to avoid having --default, etc...
 * @param 		{String} 		$selector 		The selector to process
 * @return 		{String} 						The processed selector
 * @example 	scss
 * s-selector('.input--default'); // => .input
 * s-selector('.input-default'); // => .input
 * s-selector('.input.default'); // => .input
 */
/**
 * Get a settings from the global settings stack
 *
 * @param 				{String} 			$path 						The setting path wanted separated by dots
 * @param 				{String} 			[$context=s-context()] 		The context name to get the setting
 * @param 				{Mixed} 			[$default=null] 			The value to return if no value is found
 * @return 				{Mixed} 										The setting value¨
 *
 * @example
 * $font-size : s-setting('typography.font-size');
 * // etc...
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Return a value interpolated from the settings.spaces stack
 *
 * @param 			{String} 			$size 			The space size wanted. Must exist in the settings.sizes stack
 * @return 			{Number} 							The actual space value
 *
 * @example
 * .my-cool-section {
 * 		padding : s-pace(big);
 * }
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Return a number without any units
 *
 * @param 			{Number} 		$number 		The number to process
 * @return 			{Number} 						The number without units
 *
 * @example
 * s-strip-units(12px); // => 12
 * s-strip-units(30rem); // => 30
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Test an argument passed to a function or a mixin to ensure his type, value, etc...
 * If the argument does not pass the test, an error will be thrown, unless the $check-only argument is true
 *
 * @param 				{String} 				$method 				The function/mixin name (debug purpose)
 * @param 				{String} 				$argument 				The argument name to test (debug purpose)
 * @param 				{List|String} 			$type-or-values 		If string, the type(s) that the argument must match, if list, the possible values that the argument can take
 * @param 				{Mixed} 				$value 					The actual argument value
 * @param 				{Boolean} 				[$check-only=false]		If this is true, will not thrown any error
 * @return 				{Mixed} 										The value if ok, false if not
 *
 * @example
 * \@mixin my-cool-mixin($argument1, $argument2) {
 *        $argument1 : s-test-argument(my-cool-mixin, argument1, string, $argument1);
 *        $argument2 : s-test-argument(my-cool-mixin, argument2, (hello,world,12), $argument2);
 * }
 * \@mixin my-cool-mixin(hello, world); // ok
 * \@mixin my-cool-mixin(hello, universe); // throw an error
 * \@mixin my-cool-mixin(12, world); // throw an error
 *
 * @author 				Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Return the text-format setting scope class
 * @return 		{String} 		The text-format scope class from settings.text-format.scope-class
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Take a transition as parameter and parse it to return the {Map} corresponding
 * The $transition parameter can be either a registered transition name or a custom css transition like : all .2s ease-in-out 2s
 * The $transition argument will be parsed with the [./_s-parse-properties.scss] function.
 *
 * @param 			{List} 				$transition 			The registered transition name or the transition string to transform into map
 * @return 			{Map} 										The corresponding transition map properties
 *
 * @example
 * // register a transition
 * \@include s-setup((
 * 		transitions : (
 * 			fast : all .2s ease-in-out,
 * 			// other transitions...
 * 		)
 * ));
 *
 * // registered transition
 * s-transition-map(fast);
 * // {
 * // 	property : all,
 * // 	duration : .2s,
 * // 	ease : ease-in-out
 * // }
 *
 * // custom transition
 * s-transition-map(fast -delay .5s);
 * // {
 * // 	property : all,
 * // 	duration : .2s,
 * // 	ease : ease-in-out,
 * // 	delay : .5s
 * // }
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Take a transition as parameter and parse it to return the {List} corresponding
 * The $transitions parameter can be either a registered transition name or a custom css transition like : all .2s ease-in-out 2s
 * The $transitions argument will be parsed with the [./_s-parse-properties.scss] function.
 *
 * @param 			{List} 				$transitions 			The registered transition(s) name(s) or the transition(s) strings(s) to transform into list
 * @return 			{List} 										The corresponding transition list properties
 *
 * @example
 * // register a transition
 * \@include s-setup((
 * 		transitions : (
 * 			fast : all .2s ease-in-out 0s,
 * 			// other transitions...
 * 		)
 * ));
 *
 * // registered transition
 * .my-cool-element {
 * 		transition : s-transition(fast);
 * 		// transition : all .2s ease-in-out 0s;
 * }
 *
 * // custom transition
 * .my-cool-element {
 *  	transition : s-transition(fast -delay .5s, fast width ease-in);
 *  	// transition : all .2s ease-in-out .5s, width .2s ease-in 0s;
 * }
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Return the unit context if has been set by the [s-unit-context mixin](../mixins/_s-unit-context.scss)
 *
 * @return 		{String} 				The unit context setted
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Return the generated vertical rhythme properties map calculated depending on the passed arguments
 *
 * @param 			{Number} 				[$font-size=settings.typography.font-size] 			The font size wanted
 * @param 			{String} 				[$font-family=settings.typography.font-family] 		The font family to use
 * @param 			{Number} 				[$line-height=null] 							The line height to use
 * @param 			{Number} 				[$margin-top=0] 								The targeted margin-top
 * @param 			{Number} 				[$margin-bottom=0] 								The targeted margin-bottom
 * @param 			{Number} 				[$padding-top=0] 								The targeted padding-top
 * @param 			{Number} 				[$padding-bottom=0] 							The targeted padding-bottom
 * @param 			{List} 					[$margin=null] 									The targeted margin property
 * @param 			{List} 					[$padding=null] 								The targeted padding property
 * @param 			{List} 					[$border-top=null] 								The targeted border-top property
 * @param 			{List} 					[$border-bottom=null] 							The targeted border-bottom property
 * @param 			{Number} 				[$border-top-width=0] 							The targeted border-top-width property
 * @param 			{Number} 				[$border-bottom-width=0] 						The targeted border-bottom-width property
 * @param 			{Number} 				[$border=null] 									The targeted border property
 * @param 			{Number} 				[$cap-height=null] 								The font cap-height used to calculate the vertical ryhthme
 * @param 			{Boolean|String} 		[$calculate-height=false] 						If true|min-height|max-height|height, will return the corresponding absolute height value in the map
 *
 * @TODO example
 *
 * @see 			https://medium.com/written-in-code/aligning-type-to-baseline-the-right-way-using-sass-e258fce47a9b#.lck2lgbni
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Return the vertical-rhythme setting scope class
 * @return 		{String} 		The vertical-rhythme scope class from settings.vertical-rhythme.scope-class
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Generic sugar function can return multiple settings types like:
 * - any settings : s('settings.{path}')
 * - look and feel : s('look-and-feel.{property}', $size)
 *  	- s('lnf.{property}', $size)
 * - space : s('space.{size}')
 * - color : s('color.{name}', $modifier)
 * - transition : s('transition.{name}')
 * - filter : s('filter.{name}')
 *
 * @example
 * $my-color : s('color.primary');
 * $my-transition : s('transition.fast');
 * $my-font-size : s('settings.typography.font.size')
 * // etc...
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Print out the animation property calculated with the passed arguments
 * This mixin support all the standard css animation properties like name, duration, delay, ease, direction and fill-mode.
 * The $animations argument will be parsed with the [../functions/_s-parse-properties.scss] function.
 * If you specify multiple animations at a time, this mixin will take care
 * of the delay calculation for each animations and make them play one after another
 *
 * @param 			{List} 				$animations 			The animations wanted like : coco .2s ease-in-out reverse
 *
 * @example
 * .my-cool-element {
 * 		@include s-animation(my-animation 1s ease-in-out, another-animation 4s);
 * 		// animation : my-animation 1s 0s ease-in-out 1 normal forwards, another-animation 4s 1s ease-in-out 1 normal forwards;
 * }
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Print out all wanted registered classes like padding helpers, margin helpers, font helpers, etc...
 * Available namespaces
 * - sugar.filter.{name} : .fi-{name}
 * - sugar.transition.{name} : .tr-{name}
 * - sugar.font.family.{name} : .f-{name}
 * - sugar.margin.bottom.{size} : .m-b-{size}
 * - sugar.margin.top.{size} : .m-t-{size}
 * - sugar.margin.left.{size} : .m-l-{size}
 * - sugar.margin.right.{size} : .m-r-{size}
 * - sugar.margin.side.{size} : .m-s-{size}
 * - sugar.padding.all.{size} : .p-{size}
 * - sugar.padding.top.{size} : .p-t-{size}
 * - sugar.padding.bottom.{size} : .p-b-{size}
 * - sugar.padding.left.{size} : .p-l-{size}
 * - sugar.padding.right.{size} : .p-r-{size}
 * - sugar.padding.side.{size} : .p-s-{size}
 * - sugar.size.{size} : .s-{size}
 * - sugar.size.rel.{size} : .s-{size}-rel
 * - sugar.padding.no.top : .no-p-t
 * - sugar.padding.no.bottom : .no-p-b
 * - sugar.padding.no.left : .no-p-l
 * - sugar.padding.no.right : .no-p-r
 * - sugar.padding.no.side : .no-p-s
 * - sugar.margin.no.top : .no-m-t
 * - sugar.margin.no.bottom : .no-m-b
 * - sugar.margin.no.left : .no-m-l
 * - sugar.margin.no.right : .no-m-r
 * - sugar.margin.no.side : .no-m-s
 * - sugar.color.{name}.color` .c-{name}
 * - sugar.color.{name}.bkg : .bkg-{name}
 * - sugar.color.{name}.modifier.{mod-name}.color : .c-{name}--{mod-name}
 * - sugar.color.{name}.modifier.{mod-name}.bkg : .bkg-{name}--{mod-name}
 * - sugar.pull.left : .pull-left
 * - sugar.pull.right : .pull-right
 * - sugar.position.relative : .relative
 * - sugar.position.absolute : .absolute
 * - sugar.clear.left : .clear-left
 * - sugar.clear.right : .clear-right
 * - sugar.clear.both : .clear
 * - sugar.pointer.events.all : .pointer-events-all
 * - sugar.pointer.events.none : .pointer-events-none
 * - sugar.display.show : .show
 * - sugar.display.show-inline : .show-inline
 * - sugar.display.hidden : .hidden
 * - sugar.display.hide : .hide
 * - sugar.display.visible : .visible
 * - sugar.display.invisible : .invisible
 * - sugar.display.visually-hidden : .visually-hidden
 * - sugar.text.hidden : .t-hidden
 * - sugar.text.truncate : .t-truncate
 * - sugar.text.align.left : .t-left
 * - sugar.text.align.right : .t-right
 * - sugar.text.align.center : .t-center
 * - sugar.text.align.justify : .t-justify
 * - sugar.text.transform.lowercase : .t-lowercase
 * - sugar.text.transform.uppercase : .t-uppercase
 * - sugar.text.transform.capitalize : .t-capitalize
 * - sugar.font.weight.bold : .f-bold
 * - sugar.font.weight.lighter : .f-lighter
 * - sugar.font.weight.bolder : .f-bolder
 * - sugar.font.weight.normal : .f-normal
 * - sugar.font.style.italic : .f-italic
 * - sugar.font.style.oblique : .f-oblique
 * - sugar.font.variant.small-caps : .f-small-caps
 * - sugar.block.align.center : .block-center
 * - sugar.ratio.21-9 : ```.ratio-21-9```
 * - sugar.ratio.16-9 : ```.ratio-16-9```
 * - sugar.ratio.4-3 : ```.ratio-4-3```
 * - sugar.ratio.1-1 : ```.ratio-1-1```
 * - sugar.size.abs.cover : ```.abs-cover```
 * - sugar.size.abs.contain : ```.abs-contain```
 * - sugar.size.abs.fit : ```.abs-fit```
 * - sugar.clearfix.default : .clearfix
 * - sugar.clearfix.float : .clearfix-float
 * - sugar.clearfix.micro : .clearfix-micro
 * - sugar.clearfix.overflow : .clearfix-overflow
 * - sugar.clearfix.facebook : .clearfix-facebook
 * - sugar.no-transitions : .no-transitions
 * - sugar.clear-transitions : .clear-transitions
 * - sugar.no-animations : .no-animations
 * - sugar.clear-animations : .clear-animations
 * - sugar.no-transmations : .no-transmations
 * - sugar.clear-transmations : .clear-transmations
 *
 * @param 			{List}<string> 			$namespaces 		The classes namespaces wanted
 *
 * @example
 * \@include s-classes(); // will print out all the classes
 * \@include s-classes('sugar.font'); // will print all the font classes
 * \@include s-classes('sugar.clearfix' 'sugar.pull'); // the clearfixes and the pull classes
 * // etc...
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Print out the scoped color schema css
 *
 * @param 		{String} 			$name 			The color schema name
 *
 * @example
 * \@include s-color-schema(light) {
 * 		h1, h2 {
 * 			color : white;
 * 		}
 * }
 * // will print
 * .cs-light h1,
 * .cs-light h2 {
 * 		color : white;
 * }
 *
 * h1, h2 {
 * 		\@include s-color-schema(light) {
 * 			color : white;
 * 		}
 * }
 * // will print
 * .cs-light h1, h1.cs-light,
 * .cs-light h2, h2.cs-light {
 * 		color : white;
 * }
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Set the name of the component that will be handled inside the mixin
 *
 * @param 			{String} 			[$name=null] 			The name of the component to set
 * @param 			{String|Map} 		[$context=null] 		A context name or map to use inside the mixin
 *
 * @example
 * \@include s-component('my-component') {
 * 		s-component('hello') // => 'my-component'
 * 		\@include s-component('another-component') {
 * 			s-component('hello') // => 'my-component'
 * 		}
 * }
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>;
 */
/**
 * Register a context with a name to use it later
 *
 * @param 			{String} 		$name 			The context name
 * @param 			{Map} 			$settings 		The settings to override for this context
 *
 * @example
 * \@include s-context-setup(my-cool-context, (
 * 		look-and-feel : (
 * 			padding-vertical : (
 * 				default : 0.6em
 * 			)
 * 		)
 * ));
 *
 * // using your context
 * \@include s-context(my-cool-context) {
 * 		s-look-and-feel(padding-vertical); // => 0.6em
 * }
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Set a context to be used inside the mixin
 *
 * @param 			{String|Map} 			$name-or-map 		The name of a registered context or a map
 *
 * @example
 * // register a context
 * \@include s-context-setup(my-cool-context, (
 * 		look-and-feel : (
 * 			padding-vertical : (
 * 				default : 0.6em
 * 			)
 * 		)
 * ));
 *
 * // registered context
 * \@include s-context(my-cool-context) {
 * 		// your code here...
 * }
 *
 * // inline context
 * \@include s-context((
 * 		look-and-feel : (
 * 			padding-vertical : (
 * 				default : .3em
 * 			)
 * 		)
 * )) {
 * 		// your code here...
 * }
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Print out a list with all the filters that are passed as argument
 * This will use the [../functions/_s-filter-map.scss] function to parse the filters
 *
 * @param 	 	{List}<String> 			$filters 			The registered filter(s) name(s) or the filter(s) string(s) to transform into list
 *
 * @example
 * // register a filter
 * \@include s-setup((
 * 		filters : (
 * 			myCoolFilter : box-shadow(#000 0 0 10px) blur(30px),
 * 			// other filters...
 * 		)
 * ));
 *
 * // registered filter
 * .my-cool-elememt {
 * 		\@include s-filter(myCoolFilter);
 * 		// filter : box-shadow(#000 0 0 10px) blur(30px);
 * }
 *
 * // custom filter
 * .my-cool-element {
 * 		\@include s-filter(myCoolFilter invert(100%));
 * 		// filter : box-shadow(#000 0 0 10px) blur(30px) invert(100%);
 * }
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Helper to print a font-face
 *
 * @param 			{String} 		$font-family 			The font-family
 * @param 			{String} 		$src 					The source url (only 1 extension)
 * @param 			{List} 			[$extensions=woff2] 	The extensions list that you have available
 * @param 			{String} 		[$font-weight=normal] 	The font-weight property
 * @param 			{String} 		[$font-style=normal] 	The font-style property
 *
 * @example
 * // if you have these extensions files : .woff .eot .woff2
 * \@include s-font-face(
 * 		$name : my-cool-font,
 * 		$src : '/fonts/my-font.eot',
 * 		$extensions : eot woff woff2
 * )
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Print all the fonts properties that correspond to the passed arguments
 *
 * @param 		{String} 			[$family=null] 			The font family wanted (can be a registered font name)
 * @param 		{Color} 			[$color=null] 			The color wanted (can be a registered color name)
 * @param 		{Number} 			[$size=null] 			The font-size wanted
 * @param 		{String} 			[$style=null] 			The font-style wanted
 * @param 		{String} 			[$variant=null] 		The font-variant wanted
 * @param 		{String|Number} 	[$weight=null] 			The font-weight wanted
 * @param 		{String} 			[$decoration=null] 		The text-decoration wanted
 * @param 		{String} 			[$align=null] 			The text-align wanted
 * @param 		{String} 			[$transform=null] 		The text-transform wanted
 * @param 		{String} 			[$stretch=null] 		The font-stretch wanted
 * @param 		{String} 			[$white-space=null] 	The white-space wanted
 * @param 		{Number} 			[$height=null] 			The line-height wanted
 * @param 		{Number} 			[$spacing=null] 		The letter-spacing wanted
 * @param 		{Number} 			[$indent=null] 			The text-indent wanted
 * @param 		{String} 			[$break=null] 			The line-break wanted
 * @param 		{String} 			[$wrap=null] 			The word-wrap wanted
 * @return 		{Map} 										The corresponding font map
 *
 * @example
 * .my-cool-elememt {
 * 		\@include s-font(
 * 			$family : 'Helvetica Neue',
 * 		 	$size : 12px,
 * 		  	$wrap : norwap
 *      );
 *      // print
 * 		font-family : 'Helvetica Neue',
 * 		font-size : 12px,
 * 		word-wrap : nowrap
 * }
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Init the sugar toolkit.
 * This has to be called **AFTER** all the [./_s-setup.scss] mixin call
 * and **BEFORE** all the others sugar mixins and functions calls
 *
 * @example
 * \@include s-init();
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Register all the dynamic helper classes that depends on the settings, etc...
 * This is used internaly
 *
 * @example
 * \@include s-init-classes();
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Register a helper class under a certain namespace
 *
 * @param 			{String} 		$classname 		The classname that will be printed out
 * @param 			{String} 		$namespace 		The dots separated namespace under which the class will live
 *
 * @example
 * \@include s-register-class(my-cool-class, 'my.cool.namespace') {
 * 		background : pink;
 * }
 * \@include s-register-class(another-cool-class, 'my.another.namespace') {
 * 		background : red;
 * }
 *
 * // print out my helpers classes
 * \@include s-classes('my');
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Setup sugar toolkit by overriding the default [settings](../_settings.scss)
 * This has to be called **BEFORE** the [s-init mixin](./_s-init.scss)
 *
 * @param 			{Map} 			$settings 		The settings to override
 *
 * @example
 * \@include s-setup((
 * 		typo : (
 * 			font-size : 12px
 * 		),
 * 		sizes : (
 * 			small : 0.5,
 * 			big : 1.5
 * 		)
 * ));
 * // this mixin can be called as many times as you need
 * // this allows you to separate your configs setup into multiple
 * // files...
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Display the vertical rhythme
 *
 * @param 			{Color} 		The color wanted
 *
 * @example
 * body {
 * 		@include s-show-vertical-rhythme();
 * }
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Take a transition as parameter and print the corresponding transition property
 * The $transitions parameter can be either a registered transition name or a custom css transition like : all .2s ease-in-out 2s
 * The $transitions argument will be parsed with the [./_s-parse-properties.scss] function.
 *
 * @param 			{List} 				$transitions 			The registered transition(s) name(s) or the transition(s) strings(s) to transform into list
 * @return 			{List} 										The corresponding transition list properties
 *
 * @example
 * // register a transition
 * \@include s-setup((
 * 		transitions : (
 * 			fast : all .2s ease-in-out 0s,
 * 			// other transitions...
 * 		)
 * ));
 *
 * // registered transition
 * .my-cool-element {
 * 		\@include s-transition(fast>);
 * 		// transition : all .2s ease-in-out 0s;
 * }
 *
 * // custom transition
 * .my-cool-element {
 * 		\@include s-transition(fast -delay .5s, fase width ease-in);
 *  	// transition : all .2s ease-in-out .5s, width .2s ease-in 0s;
 * }
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Set the unit context to use inside the mixin.
 * This mean that if you set a unit context, then get a number setting through the [s-setting function](../functions/_s-setting.scss),
 * The value that will be returned will be converted into the unit context if possible
 *
 * @param 			{String} 			$unit 			The unit wanted
 *
 * @example
 * // if settings.typography.font-size == 16px
 * s-setting('typography.font-size'); // => 16px
 * \@incluse s-unit-context(rem) {
 * 		s-setting('typography.font-size'); // => 1rem
 * }
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * @name 	s-vertical-rhythme
 * Print out the vertical rhythme properties map calculated depending on the passed arguments
 *
 * @param 			{Number} 				[$font-size=settings.typography.font-size] 			The font size wanted
 * @param 			{String} 				[$font-family=settings.typography.font-family] 		The font family to use
 * @param 			{Number} 				[$line-height=null] 							The line height to use
 * @param 			{Number} 				[$margin-top=0] 								The targeted margin-top
 * @param 			{Number} 				[$margin-bottom=0] 								The targeted margin-bottom
 * @param 			{Number} 				[$padding-top=0] 								The targeted padding-top
 * @param 			{Number} 				[$padding-bottom=0] 							The targeted padding-bottom
 * @param 			{List} 					[$margin=null] 									The targeted margin property
 * @param 			{List} 					[$padding=null] 								The targeted padding property
 * @param 			{List} 					[$border-top=null] 								The targeted border-top property
 * @param 			{List} 					[$border-bottom=null] 							The targeted border-bottom property
 * @param 			{Number} 				[$border-top-width=0] 							The targeted border-top-width property
 * @param 			{Number} 				[$border-bottom-width=0] 						The targeted border-bottom-width property
 * @param 			{Number} 				[$border=null] 									The targeted border property
 * @param 			{Number} 				[$cap-height=null] 								The font cap-height used to calculate the vertical ryhthme
 * @param 			{Boolean|String} 		[$calculate-height=false] 						If true|min-height|max-height|height, will return the corresponding absolute height value in the map
 *
 * @TODO example
 *
 * @see 			https://medium.com/written-in-code/aligning-type-to-baseline-the-right-way-using-sass-e258fce47a9b#.lck2lgbni
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * @name 	Helper Classes
 * This file is responsible to register the static helper classes like:
 *
 * - sugar.pull.left : ```.pull-left```
 * - sugar.pull.right : ```.pull-right```
 * - sugar.position.relative : ```.relative```
 * - sugar.position.absolute : ```.absolute```
 * - sugar.clear.left : ```.clear-left```
 * - sugar.clear.right : ```.clear-right```
 * - sugar.clear.both : ```.clear```
 * - sugar.pointer.events.all : ```.pointer-events-all```
 * - sugar.pointer.events.none : ```.pointer-events-none```
 * - sugar.display.show : ```.show```
 * - sugar.display.show-inline : ```.show-inline```
 * - sugar.display.hidden : ```.hidden```
 * - sugar.display.hide : ```.hide```
 * - sugar.display.visible : ```.visible```
 * - sugar.display.invisible : ```.invisible```
 * - sugar.display.visually-hidden : ```.visually-hidden```
 * - sugar.text.hidden : ```.t-hidden```
 * - sugar.text.truncate : ```.t-truncate```
 * - sugar.text.align.left : ```.t-left```
 * - sugar.text.align.right : ```.t-right```
 * - sugar.text.align.center : ```.t-center```
 * - sugar.text.align.justify : ```.t-justify```
 * - sugar.text.transform.lowercase : ```.t-lowercase```
 * - sugar.text.transform.uppercase : ```.t-uppercase```
 * - sugar.text.transform.capitalize : ```.t-capitalize```
 * - sugar.font.weight.bold : ```.f-bold```
 * - sugar.font.weight.lighter : ```.f-lighter```
 * - sugar.font.weight.bolder : ```.f-bolder```
 * - sugar.font.weight.normal : ```.f-normal```
 * - sugar.font.style.italic : ```.f-italic```
 * - sugar.font.style.oblique : ```.f-oblique```
 * - sugar.font.variant.small-caps : ```.f-small-caps```
 * - sugar.block.align.center : ```.block-center```
 * - sugar.ratio.21-9 : ```.ratio-21-9```
 * - sugar.ratio.16-9 : ```.ratio-16-9```
 * - sugar.ratio.4-3 : ```.ratio-4-3```
 * - sugar.ratio.1-1 : ```.ratio-1-1```
 * - sugar.size.abs.cover : ```.abs-cover```
 * - sugar.size.abs.contain : ```.abs-contain```
 * - sugar.size.abs.fit : ```.abs-fit```
 * - sugar.clearfix.default : ```.clearfix```
 * - sugar.clearfix.float : ```.clearfix-float```
 * - sugar.clearfix.micro : ```.clearfix-micro```
 * - sugar.clearfix.overflow : ```.clearfix-overflow```
 * - sugar.clearfix.facebook : ```.clearfix-facebook```
 * - sugar.no-transitions : ```.no-transitions```
 * - sugar.clear-transitions : ```.clear-transitions```
 * - sugar.no-animations : ```.no-animations```
 * - sugar.clear-animations : ```.clear-animations```
 * - sugar.no-transmations : ```.no-transmations```
 * - sugar.clear-transmations : ```.clear-transmations```
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
.pull-left {
  /**
	 * @name 		```.pull-left```
	 * Allows you to pull an element to the left side
	 * @styleguide 	Helpers / Pull
	 * @example 	html
	 * 	<span class="pull-left">Hello world</span>
	 * </div>
	 */
  float: left;
}

.pull-right {
  /**
	 * @name 		```.pull-right```
	 * Allows you to pull an element to the right side
	 * @styleguide 	Helpers / Pull
	 * @example 	html
	 * 	<span class="pull-right">Hello world</span>
	 * </div>
	 */
  float: right;
}

.relative {
  /**
	 * @name 		```.relative```
	 * Set an element position as ```relative```
	 * @styleguide 	Helpers / Position
	 * @example 	html
	 * <div class="relative">
	 * 	I'm relative now
	 * </div>
	 */
  position: relative;
}

.absolute {
  /**
	 * @name 		```.absolute```
	 * Set an element position as ```absolute```
	 * @styleguide 	Helpers / Position
	 * @example 	html
	 * <div class="absolute">
	 * 	I'm absolute now
	 * </div>
	 */
  position: absolute;
}

.clear-left {
  /**
	 * @name 		```.clear-left```
	 * Clear the left float on the element
	 * @styleguide 	Helpers / Float
	 * @example 	html
	 * <div class="clear-left">
	 * 	I clear the left float
	 * </div>
	 */
  clear: left;
}

.clear-right {
  /**
	 * @name 		```.clear-right```
	 * Clear the right float on the element
	 * @styleguide 	Helpers / Float
	 * @example 	html
	 * <div class="clear-right">
	 * 	I clear the right float
	 * </div>
	 */
  clear: right;
}

.clear {
  /**
	 * @name 		```.clear```
	 * Clear both float on the element
	 * @styleguide 	Helpers / Float
	 * @example 	html
	 * <div class="clear">
	 * 	I clear both floats
	 * </div>
	 */
  clear: both;
}

.pointer-events-none {
  /**
	 * @name 		```.pointer-events-none```
	 * Disable any pointer events
	 * @styleguide 	Helpers / Pointer events
	 * @example 	html
	 * <div class="pointer-events-none">
	 * 	I will not react to any pointer events
	 * </div>
	 */
  pointer-events: none;
}

.pointer-events-all {
  /**
	 * @name 		```.pointer-events-all```
	 * Disable any pointer events
	 * @styleguide 	Helpers / Pointer events
	 * @example 	html
	 * <div class="pointer-events-all">
	 * 	I will not react to any pointer events
	 * </div>
	 */
  pointer-events: all;
}

.block {
  /**
	 * @name 		```.block```
	 * Display the element as ```block```
	 * @styleguide 	Helpers / Display
	 * @example 	html
	 * <div class="block">
	 * 	I'm displayed as block
	 * </div>
	 */
  display: block;
}

.inline {
  /**
	 * @name 		```.inline```
	 * Display the element as ```inline```
	 * @styleguide 	Helpers / Display
	 * @example 	html
	 * <div class="inline">
	 * 	I'm displayed as inline
	 * </div>
	 */
  display: inline;
}

.inline-block {
  /**
	 * @name 		```.inline-block```
	 * Display the element as ```inline-block```
	 * @styleguide 	Helpers / Display
	 * @example 	html
	 * <div class="inline-block">
	 * 	I'm displayed as inline-block
	 * </div>
	 */
  display: inline-block;
}

.show {
  /**
	 * @name 		```.show```
	 * Display the element as ```block```
	 * @styleguide 	Helpers / Display
	 * @example 	html
	 * <div class="show">
	 * 	I'm displayed
	 * </div>
	 */
  display: block;
}

.show-inline {
  /**
	 * @name 		```.show-inline```
	 * Display the element as ```inline-block```
	 * @styleguide 	Helpers / Display
	 * @example 	html
	 * <div class="show-inline">
	 * 	I'm inline displayed
	 * </div>
	 */
  display: inline-block;
}

.hidden {
  /**
	 * @name 		```.hidden```
	 * Hide the element by setting the display to ```none```
	 * @styleguide 	Helpers / Display
	 * @example 	html
	 * <div class="hidden">
	 * 	I'm hidden
	 * </div>
	 */
  display: none;
}

.hide {
  /**
	 * @name 		```.hide```
	 * Hide the element by setting the display to ```none```
	 * @styleguide 	Helpers / Display
	 * @example 	html
	 * <div class="hide">
	 * 	I'm hidden
	 * </div>
	 */
  display: none;
}

.visible {
  /**
	 * @name 		```.visible```
	 * Display the element by setting the visibility to ```visible```
	 * @styleguide 	Helpers / Display
	 * @example 	html
	 * <div class="visible">
	 * 	I'm visible
	 * </div>
	 */
  visibility: visible;
}

.invisible {
  /**
	 * @name 		```.invisible```
	 * Display the element by setting the visibility to ```hidden```
	 * @styleguide 	Helpers / Display
	 * @example 	html
	 * <div class="invisible">
	 * 	I'm invisible
	 * </div>
	 */
  visibility: hidden;
}

.visually-hidden {
  /**
	 * @name 		```.visually-hidden```
	 * Hide the element from display but not for SEO.
	 * This class use some tricks to make the element dissapear without using some ```display:none;```, etc...
	 * @styleguide 	Helpers / Display
	 * @example 	html
	 * <div class="visually-hidden">
	 * 	I'm only visually hidden
	 * </div>
	 */
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute;
}

.t-hidden {
  /**
	 * @name 		```.t-hidden```
	 * Hide the text
	 * @styleguide 	Helpers / Text
	 * @example 	html
	 * <div class="t-hidden">
	 * 	I'm not visible
	 * </div>
	 */
  overflow: hidden;
  text-indent: -9000px;
  display: block;
}

.t-truncate {
  /**
	 * @name 		```.t-truncate```
	 * Hide the text
	 * @styleguide 	Helpers / Text
	 * @example 	html
	 * <div class="t-truncate">
	 * 	I'm truncated cause I talk a lot too much Nulla mauris eros, finibus ac faucibus et, tempus quis risus. Praesent sit amet nulla vel libero euismod sodales eu nec.
	 * </div>
	 */
  display: inline-block;
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.t-truncate > * {
  text-overflow: ellipsis;
  overflow: hidden;
}

.t-left {
  /**
	 * @name 		```.t-left```
	 * Align the text to the left
	 * @styleguide 	Helpers / Text Align
	 * @example 	html
	 * <div class="t-left">
	 * 	I'm left aligned
	 * </div>
	 */
  text-align: left;
}

.t-right {
  /**
	 * @name 		```.t-right```
	 * Align the text to the right
	 * @styleguide 	Helpers / Text Align
	 * @example 	html
	 * <div class="t-right">
	 * 	I'm right aligned
	 * </div>
	 */
  text-align: right;
}

.t-center {
  /**
	 * @name 		```.t-center```
	 * Align the text to the center
	 * @styleguide 	Helpers / Text Align
	 * @example 	html
	 * <div class="t-center">
	 * 	I'm centered
	 * </div>
	 */
  text-align: center;
}

.t-justify {
  /**
	 * @name 		```.t-justify```
	 * Make the text justified
	 * @styleguide 	Helpers / Text Align
	 * @example 	html
	 * <div class="t-justify">
	 * 	Nullam vel feugiat nunc. Phasellus facilisis, nisi sit amet viverra rhoncus, arcu risus volutpat dolor, sed euismod magna tellus ac purus. Praesent augue lorem, ullamcorper ac accumsan nec, suscipit eu.
	 * </div>
	 */
  text-align: justify;
}

.t-lowercase {
  /**
	 * @name 		```.t-lowercase```
	 * Transform the text to lowercase
	 * @styleguide 	Helpers / Text Transform
	 * @example 	html
	 * <div class="t-lowercase">
	 * 	I'M LOWERCASE
	 * </div>
	 */
  text-transform: lowercase;
}

.t-uppercase {
  /**
	 * @name 		```.t-uppercase```
	 * Transform the text to uppercase
	 * @styleguide 	Helpers / Text Transform
	 * @example 	html
	 * <div class="t-uppercase">
	 * 	I'm uppercase
	 * </div>
	 */
  text-transform: uppercase;
}

.t-capitalize {
  /**
	 * @name 		```.t-capitalize```
	 * Capizalize the words
	 * @styleguide 	Helpers / Text Transform
	 * @example 	html
	 * <div class="t-capitalize">
	 * 	I'm capitalized
	 * </div>
	 */
  text-transform: capitalize;
}

.f-bold {
  /**
	 * @name 		```.f-bold```
	 * Set the font-weight to ```bold```
	 * @styleguide 	Helpers / Font Weight
	 * @example 	html
	 * This <span class="f-bold">word</span> is bold
	 */
  font-weight: bold;
}

.f-lighter {
  /**
	 * @name 		```.f-lighter```
	 * Set the font-weight to ```lighter```
	 * @styleguide 	Helpers / Font Weight
	 * @example 	html
	 * 	This <span class="f-lighter">word</span> is lighter
	 */
  font-weight: lighter;
}

.f-bolder {
  /**
	 * @name 		```.f-bolder```
	 * Set the font-weight to ```bolder```
	 * @styleguide 	Helpers / Font Weight
	 * @example 	html
	 * This <span class="f-bolder">word</span> is bolder
	 */
  font-weight: bolder;
}

.f-normal {
  /**
	 * @name 		```.f-normal```
	 * Set the font-weight to ```normal```
	 * @styleguide 	Helpers / Font Weight
	 * @example 	html
	 * <div class="f-bold">
	 * 	This <span class="f-normal">word</span> is normal
	 * </div>
	 */
  font-weight: normal;
  font-style: normal;
}

.f-italic {
  /**
	 * @name 		```.f-italic```
	 * Set the font-style to ```italic```
	 * @styleguide 	Helpers / Font
	 * @example 	html
	 * This <span class="f-italic">word</span> is italic
	 */
  font-style: italic;
}

.f-oblique {
  /**
	 * @name 		```.f-oblique```
	 * Set the font-style to ```oblique```
	 * @styleguide 	Helpers / Font Style
	 * @example 	html
	 * This <span class="f-oblique">word</span> is oblique
	 */
  font-style: oblique;
}

.f-small-caps {
  /**
	 * @name 		```.f-small-caps```
	 * Set the font-variant to ```small-caps```
	 * @styleguide 	Helpers / Font Variant
	 * @example 	html
	 * This <span class="f-small-caps">word</span> is small-caps
	 */
  font-variant: small-caps;
}

.block-center {
  /**
	 * @name 		```.block-center```
	 * Set the element to as ```display:block``` and center it
	 * @styleguide 	Helpers / Block
	 * @example 	html
	 * <div class="block-center bkg-primary" style="width:100px;">
	 * 	I'm a centered block
	 * </div>
	 */
  display: block;
  margin-left: auto;
  margin-right: auto;
}

.abs-cover {
  /**
	 * @name 		```.abs-cover```
	 * Set a size that will cover the entire parent surface by positionning it in absolute
	 * @styleguide 	Helpers / Sizes
	 * @example 	html
	 * <div class="ratio-16-9">
	 * 	<img src="https://source.unsplash.com/random" class="abs-cover" />
	 * </div>
	 */
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translateX(-50%) translateY(-50%);
  min-width: 100%;
  min-height: 100%;
}

.abs-contain {
  /**
	 * @name 		```.abs-contain```
	 * Set a size that will contain the entire parent surface by positionning it in absolute
	 * @styleguide 	Helpers / Sizes
	 * @example 	html
	 * <div class="ratio-16-9">
	 * 	<img src="https://source.unsplash.com/random" class="abs-contain" />
	 * </div>
	 */
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translateX(-50%) translateY(-50%);
  max-width: 100%;
  max-height: 100%;
}

.abs-fit {
  /**
	 * @name 		```.abs-fit```
	 * Set a size that will fit the entire parent surface by positionning it in absolute
	 * @styleguide 	Helpers / Sizes
	 * @example 	html
	 * <div class="ratio-16-9">
	 * 	<img src="https://source.unsplash.com/random" class="abs-fit" />
	 * </div>
	 */
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
}

.clearfix {
  /**
	 * @name 		```.clearfix```
	 * Apply the micro clearfix on the element
	 * @styleguide 	Helpers / Clearfix
	 * @example 	html
	 * <div class="clearfix bkg-primary">
	 * 	<div class="pull-right">right pulled</div>
	 * </div>
	 * <div class="bkg-primary">
	 * 	<div class="pull-right">right pulled without clearfix</div>
	 * </div>
	 */
}

.clearfix-float {
  /**
	 * @name 		```.clearfix-float```
	 * Apply the float clearfix on the element
	 * @styleguide 	Helpers / Clearfix
	 * @example 	html
	 * <div class="clearfix-float bkg-primary">
	 * 	<div class="pull-right">right pulled</div>
	 * </div>
	 * <div class="bkg-primary">
	 * 	<div class="pull-right">right pulled without clearfix</div>
	 * </div>
	 */
}

.clearfix, .clearfix-micro {
  /**
	 * @name 		```.clearfix```
	 * Apply the micro clearfix on the element
	 * @styleguide 	Helpers / Clearfix
	 * @example 	html
	 * <div class="clearfix bkg-primary">
	 * 	<div class="pull-right">right pulled</div>
	 * </div>
	 * <div class="bkg-primary">
	 * 	<div class="pull-right">right pulled without clearfix</div>
	 * </div>
	 */
}

.clearfix-overflow {
  /**
	 * @name 		```.clearfix-overflow```
	 * Apply the overflow clearfix on the element
	 * @styleguide 	Helpers / Clearfix
	 * @example 	html
	 * <div class="clearfix-overflow bkg-primary">
	 * 	<div class="pull-right">right pulled</div>
	 * </div>
	 * <div class="bkg-primary">
	 * 	<div class="pull-right">right pulled without clearfix</div>
	 * </div>
	 */
}

.clearfix-facebook {
  /**
	 * @name 		```.clearfix-facebook```
	 * Apply the facebook clearfix on the element
	 * @styleguide 	Helpers / Clearfix
	 * @example 	html
	 * <div class="clearfix-facebook bkg-primary">
	 * 	<div class="pull-right">right pulled</div>
	 * </div>
	 * <div class="bkg-primary">
	 * 	<div class="pull-right">right pulled without clearfix</div>
	 * </div>
	 */
}

.ratio-21-9 {
  /**
	 * @name 		```.ratio-21-9```
	 * Keep a 16/9 ratio on a particular element. Applied by setting height to 0 and paddingtop to 100% / 16 * 9
	 * @styleguide 	Helpers / Ratios
	 * @example 	html
	 * <div class="bkg-primary ratio-21-9"></div>
	 */
  position: relative;
  overflow: hidden;
}

.ratio-21-9:before {
  content: '';
  display: block;
  height: 0;
  padding-top: 42.85714%;
}

.ratio-16-9 {
  /**
	 * @name 		```.ratio-16-9```
	 * Keep a 16/9 ratio on a particular element. Applied by setting height to 0 and paddingtop to 100% / 16 * 9
	 * @styleguide 	Helpers / Ratios
	 * @example 	html
	 * <div class="bkg-primary ratio-16-9"></div>
	 */
  position: relative;
  overflow: hidden;
}

.ratio-16-9:before {
  content: '';
  display: block;
  height: 0;
  padding-top: 56.25%;
}

.ratio-4-3 {
  /**
	 * @name 		```.ratio-4-3```
	 * Keep a 4/3 ratio on a particular element. Applied by setting height to 0 and paddingtop to 100% / 4 * 3
	 * @styleguide 	Helpers / Ratios
	 * @example 	html
	 * <div class="bkg-primary ratio-4-3"></div>
	 */
  position: relative;
  overflow: hidden;
}

.ratio-4-3:before {
  content: '';
  display: block;
  height: 0;
  padding-top: 75%;
}

.ratio-1-1 {
  /**
	 * @name 		```.ratio-1-1```
	 * Keep a 1/1 ratio on a particular element. Applied by setting height to 0 and paddingtop to 100%
	 * @styleguide 	Helpers / Ratios
	 * @example 	html
	 * <div class="bkg-primary ratio-1-1"></div>
	 */
  position: relative;
  overflow: hidden;
}

.ratio-1-1:before {
  content: '';
  display: block;
  height: 0;
  padding-top: 100%;
}

.no-transitions {
  /**
	 * @name 		```.no-transitions```
	 * Disable the transitions <span class="f-bold">only on the element</span>
	 * @styleguide 	Helpers / Transitions
	 * @example 	html
	 * <div class="no-transitions">
	 * 	I have no more transitions
	 * 	<div>But I have</div>
	 * </div>
	 */
}

.no-transitions, .no-transitions:before, .no-transitions:after {
  transition: none !important;
}

.clear-transitions {
  /**
	 * @name 		```.clear-transitions```
	 * Disable the transitions <span class="f-bold">on the element and all his children</span>
	 * @styleguide 	Helpers / Transitions
	 * @example 	html
	 * <div class="clear-transitions">
	 * 	I have no more transitions
	 * 	<div>Me neither</div>
	 * </div>
	 */
}

.clear-transitions, .clear-transitions:before, .clear-transitions:after,
.clear-transitions *, .clear-transitions *:before, .clear-transitions *:after {
  transition: none !important;
}

.no-animations {
  /**
	 * @name 		```.no-animations```
	 * Disable the animations <span class="f-bold">only on the element</span>
	 * @styleguide 	Helpers / Animations
	 * @example 	html
	 * <div class="no-animations">
	 * 	I have no more animations
	 * 	<div>But I have</div>
	 * </div>
	 */
}

.no-animations, .no-animations:before, .no-animations:after {
  animation: none !important;
}

.clear-animations {
  /**
	 * @name 		```.clear-animations```
	 * Disable the transitions <span class="f-bold">on the element and all his children</span>
	 * @styleguide 	Helpers / Animations
	 * @example 	html
	 * <div class="clear-animations">
	 * 	I have no more animations
	 * 	<div>Me neither</div>
	 * </div>
	 */
}

.clear-animations, .clear-animations:before, .clear-animations:after,
.clear-animations *, .clear-animations *:before, .clear-animations *:after {
  animation: none !important;
}

.no-transmations {
  /**
	 * @name 		```.no-transmations```
	 * Disable the animations and transitions <span class="f-bold">only on the element</span>
	 * @styleguide 	Helpers / Transmations
	 * @example 	html
	 * <div class="no-transmations">
	 * 	I have no more animations or transitions
	 * 	<div>But I have</div>
	 * </div>
	 */
}

.no-transmations, .no-transmations:before, .no-transmations:after {
  transition: none !important;
  animation: none !important;
}

.clear-transmations {
  /**
	 * @name 		```.clear-transmations```
	 * Disable the animations and transitions <span class="f-bold">on the element and all his children</span>
	 * @styleguide 	Helpers / Transmations
	 * @example 	html
	 * <div class="clear-transmations">
	 * 	I have no more animations or transitions
	 * 	<div>Me neither</div>
	 * </div>
	 */
}

.clear-transmations, .clear-transmations:before, .clear-transmations:after,
.clear-transmations *, .clear-transmations *:before, .clear-transmations *:after {
  transition: none !important;
  animation: none !important;
}

/**
 * This file contains all the default settings that can be overrided by the [s-setup mixin](./mixins/_s-setup.scss).
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Create an arrow bubble effect
 *
 * @param 		{String} 			[$side=bottom] 				The side (top,right,bottom,left)
 * @param 		{String} 			[$align=center] 			The alignement (left,center,right,top,middle,bottom)
 * @param 		{Number} 			[$size=10px] 				The size of the arrow
 * @param 		{Color} 			[$color=s-color(primary)] 	The color of the bubble
 * @param 		{Number} 			[$arrow-offset=10px] 		The arrow offset from the side of the bubble
 * @param 		{Number} 			[$border-width=0] 			The border width of the bubble
 * @param 		{Color} 			[$border-color=null] 		The border color of the bubble
 *
 * @example
 * .my-cool-bubble {
 * 		\@include s-bubble(
 * 			$color : s-color(secondary)
 * 		);
 * 		color : white;
 * }
 *
 * @see 			https://codepen.io/kirkas/pen/otqyJ
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Generate a drop shadow depending on the depth specified
 *
 * @param 		{Integer} 			$depth 							The depth wanted (1,2,3,4,etc...)
 * @param 		{Color} 			[$color=rgba(0,0,0,.2)] 		The drop shadow color
 *
 * @example
 * .my-cool-element {
 * 		\@include s-depth(2);
 * }
 *
 * @author 	 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Create a poping dot effect to catch user attention on a particular item
 * This mixin affect the :before and :after pseudo selector of the item
 *
 * @param 		{String} 		[$vertical-align=top] 			Where to put the dot verticaly (top,middle,bottom)
 * @param 		{String} 		[$align=left] 					Where to put the dot horizontaly (left,center,right)
 * @param 		{Number} 		[$size=20px] 					The size of the dot
 * @param 		{Color} 		[$color=primary] 				The color of the dot
 * @param 		{Number} 		[$offset-top=0] 				The offset top
 * @param 		{Number} 		[$offset-right=0] 				The offset right
 * @param 		{Number} 		[$offset-bottom=0] 				The offset bottom
 * @param 		{Number} 		[$offset-left=0] 				The offset left
 *
 * @example
 * .my-cool-element {
 * 		\@include s-hey(
 * 			$align : right,
 * 			$color : secondary,
 * 			$size : 10px,
 * 			$offset-top : -10px,
 * 			$offset-right : -10px
 * 		);
 * }
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Generate a full animated, single element, bars loader
 *
 * @param 			{String} 			[$shape=rect] 				The shape of the bars (rect,circle)
 * @param 			{Color} 			[$color=primary] 			The color(s) of the loader. Can be a list of colors
 * @param 			{Number} 			[$width=.5em] 				The width of each bars
 * @param 			{Number} 			[$height=2em] 				The height of each bars
 * @param 			{Integer} 			[$count=5] 					How many bars you want
 * @param 			{Number} 			[$gap=.5em] 				The gap between each bars
 * @param 			{Number} 			[$opacity=1] 				The initial opacity of each bars
 * @param 			{Number} 			[$a-opacity=null] 			The opacity of the animated bars
 * @param 			{Second} 			[$a-duration=1s] 			The overall animation duration
 * @param 			{Second} 			[$a-delay=0s] 				The delay between two animation cycle
 * @param 			{Integer} 			[$a-near=1] 				How many bars are affected by the animated one
 * @param 			{String} 			[$a-ease=ease-in-out] 		The ease to use to animate each bars
 * @param 			{Number} 			[$a-offset=null] 			The offset to move the animated bar
 * @param 			{String} 			[$a-direction=both] 		The direction in which to move the bars (up,down,both)
 * @param 			{Boolean} 			[$a-continuous=true] 		If true, the first bars will be animated at same time at the last ones
 *
 * @example
 * .my-cool-loader {
 * 		\@include s-loader-bars(
 * 			$color : primary,
 * 			$a-offset : .5em
 * 		);
 * }
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Generate a full animated, single element, circle loader
 *
 * @param 			{Color} 			[$color=primary] 			The color(s) of the loader. Can be a list of colors
 * @param 			{Number} 			[$size=.33em] 				The size of each dot
 * @param 			{Number} 			[$radius=1em] 				The distance of each dot from the center of the loader
 * @param 			{Integer} 			[$count=5] 					How many bars you want
 * @param 			{Number} 			[$opacity=1] 				The initial opacity of each bars
 * @param 			{Number} 			[$a-opacity=null] 			The opacity of the animated bars
 * @param 			{Second} 			[$a-duration=1s] 			The overall animation duration
 * @param 			{Second} 			[$a-delay=0s] 				The delay between two animation cycle
 * @param 			{Integer} 			[$a-near=1] 				How many bars are affected by the animated one
 * @param 			{String} 			[$a-ease=ease-in-out] 		The ease to use to animate each bars
 *
 * @TODO finish documentation
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Generate a full animated, single element, couch-potato style loader
 *
 * @param 		{Number} 		[$size=1em] 				The size of the loader
 * @param 		{Color} 		[$color=primary] 			The color of the loader
 * @param 		{Second} 		[$a-duration=1s] 			The overall animation duration
 * @param 		{Second} 		[$a-delay=0s] 				The delay between two animation cycle
 * @param 		{String} 		[$a-ease=ease-in-out]		The ease to use for the animation
 * @param 		{Degree}		[$a-rotate=360deg] 			The animation rotation
 * @param 		{Number} 		[$a-scale=.7] 				The animation scale
 *
 * @example
 * .my-cool-loader {
 * 		\@include s-loader-couch-potato();
 * }
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Generate a full animated, single element, flip ball style loader
 *
 * @param 		{String} 		[$shape=circle] 			The shape of the loader (circle,rect)
 * @param 		{Number} 		[$size=1em] 				The size of the loader
 * @param 		{Color} 		[$color=primary] 			The color of the loader. Can be a list of colors
 * @param 		{Second} 		[$a-duration=1s] 			The overall animation duration
 * @param 		{Second} 		[$a-delay=0s] 				The delay between two animation cycle
 * @param 		{String} 		[$a-ease=ease-in-out]		The ease to use for the animation
 *
 * @example
 * .my-cool-loader {
 * 		\@include s-loader-flip-ball();
 * }
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Generate a long shadow effect like [this](https://www.google.ch/search?q=long+shadow&espv=2&biw=2560&bih=1316&source=lnms&tbm=isch&sa=X&ved=0ahUKEwjjne6x49LPAhVBHRQKHat8AW8Q_AUIBigB)
 *
 * @param 		{Color} 		[$color=rgba(0,0,0,.3)] 			The shadow color
 * @param 		{String} 		[$type=text] 						The shadow type (text,box)
 * @param 		{Degree} 		[$angle=135deg] 					The shadow angle
 * @param 		{Integer} 		[$depth=20] 						The shadow depth
 * @param 		{Boolean} 		[$fade=false] 						If true, the shadow will fade itself
 * @param 		{Number} 		[$blur=0] 							The blur amount of the shadow
 * @param 		{Number} 		[$blur-ratio=0] 					The ratio to blur each depth more
 *
 * @example
 * .my-cool-title {
 * 		\@include s-long-shadow(
 * 			$depth : 10
 * 		);
 * }
 * .my-cool-box {
 * 		\@include s-long-shadow(
 * 			$type : box
 * 		);
 * }
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Create side lines around an item
 *
 * @param 			{String} 		[$style=solid] 			The line style, same possible values as the border-style property
 * @param 			{String} 		[$side=both] 			The side where to put lines (left,right,both)
 * @param 			{Number} 		[$height=1px] 			The lines height
 * @param 			{Number} 		[$width=50%] 			The width of the lines
 * @param 			{Color} 		[$color=text]			The color of the lines
 * @param 			{Number} 		[$padding=0] 			The padding between the lines and the content
 * @param 			{Number} 		[$offset-top=null] 		The line offset top
 *
 * @example
 * h1 {
 * 		\@include s-side-lined(
 * 			$padding : 20px,
 * 			$side : right,
 * 			$width : 100%
 * 		);
 * }
 *
 * @author 			Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * @name 	SAnimationComponent Classes
 * This file provide the mixins to generate animation classes
 */
/**
 * Provide the classes for the anim="letters-in-reveal" animation
 * - ```[anim="letters-in-reveal"]```
 * @param 		{Integer} 		[$words-letters-count=100] 		The max letters count of words that the animation will handle
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Provide the bare styling for the anim="letters-in-reveal" classes
 * - ```[anim="letters-in-reveal"]```
 * @param 		{Integer} 		[$words-letters-count=100] 		The max letters count of words that the animation will handle
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Provide the style styling for the anim="letters-in-reveal" classes
 * - ```[anim="letters-in-reveal"]```
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * @name 	SAnimationComponent Classes
 * This file provide the mixins to generate animation classes
 */
/**
 * Provide the classes for the anim="lines-in-boxes" animation
 * - ```[anim="lines-in-boxes"]```
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
@keyframes lines-in-boxes {
  0% {
    width: 0;
    transform: translateX(200vw);
  }
  49.99999% {
    transform: translateX(200vw);
  }
  50% {
    width: 100%;
    left: 0;
    transform: translateX(0);
  }
  100% {
    width: 0;
    left: 100%;
    transform: translateX(0);
  }
}

@keyframes lines-in-boxes-hover {
  0% {
    width: 0;
    transform: translateX(200vw);
  }
  49.99999% {
    transform: translateX(200vw);
  }
  50% {
    width: 100%;
    left: 0;
    transform: translateX(0);
  }
  80% {
    width: 0;
    left: 100%;
    transform: translateX(0);
  }
  100% {
    width: 0;
    left: 100%;
    transform: translateX(0);
  }
}

@keyframes lines-in-boxes-text {
  0% {
    transform: translateX(-200vw);
  }
  49.99999% {
    transform: translateX(-200vw);
  }
  50% {
    transform: translateX(0);
  }
  100% {
    transform: translateX(0);
  }
}

/**
* Provide the bare styling for the anim="lines-in-boxes" classes
* - ```[anim="lines-in-boxes"]```
* @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
*/
/**
* Provide the style styling for the anim="lines-in-boxes" classes
* - ```[anim="lines-in-boxes"]```
* @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
*/
/**
 * @name 	SAnimationComponent Classes
 * This file provide the mixins to generate animation classes
 */
/**
 * Provide the classes for the anim="slide-in" animation
 * - ```[anim="slide-in-up"]```
 * - ```[anim="slide-in-right"]```
 * - ```[anim="slide-in-bottom"]```
 * - ```[anim="slide-in-left"]```
 * @param 	{List} 		[$directions=up right down left]		Specify the directions to generate the classes for
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Provide the bare styling for the anim="slide-in" classes
 * - ```[anim="slide-in-up"]```
 * - ```[anim="slide-in-right"]```
 * - ```[anim="slide-in-bottom"]```
 * - ```[anim="slide-in-left"]```
 * @param 	{List} 		[$directions=up right down left]		Specify the directions to generate the classes for
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
*/
/**
 * Provide the style styling for the anim="slide-in" classes
 * - ```[anim="slide-in"]```
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * @name 	SButtonComponent
 * Provide ability to generate buttons that follow your settings like colors, look and feel, etc...
 *
 * - ```.btn```
 * - ```.btn--block```
 * - ```.btn--{color}```
 * - ```.btn--outline```
 * - ```.btn--link```
 * - ```.btn:disabled```
 * - ```.btn--hover-{$color}```
 *
 * See:
 * - [Element level mixins API](./sass/_main.md)
 * - [Classes level mixins API](./sass/_classes.md)
 *
 * @example 	scss
 * // apply the button bare and style to my custom element
 * .my-cool-element {
 * 	\@include s-button();
 * }
 * // apply only the bare styling to my custom element
 * .my-cool-element {
 * 	\@include s-button-bare();
 * }
 * // apply only the style styling to my custom element
 * .my-cool-element {
 * 	\@include s-button-style();
 * }

 * // will print out classes for the button including bare and style part
 * \@include s-button-classes(
 * 	$colors : default primary secondary
 * );
 * // will print out classes for the button including only bare part
 * \@include s-button-classes-bare();
 * // will print out classes for the button including only style part
 * \@include s-button-classes-style(
 * 	$colors : default primary secondary
 * );
 *
 * @author 	Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * @name 	SButtonComponent
 * This file provide the mixins to create buttons
 */
button {
  line-height: 1;
}

/**
 * Apply the button css
 * @param 		{Number} 		[$modifiers=null] 			The modifiers that represent the button you want. Available : {color} outline link
 * @param 		{Integer}		[$state=null] 				The state of the button you want like. Available : disabled
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply the button bare css
 * @param 		{Number} 		[$modifiers=null] 			The modifiers that represent the button you want. Available : {color} outline link
 * @param 		{Integer}		[$state=null] 				The state of the button you want like. Available : disabled
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply the button style css
 * @param 		{Number} 		[$modifiers=null] 			The modifiers that represent the button you want. Available : {color} outline link
 * @param 		{Integer}		[$state=null] 				The state of the button you want like. Available : disabled
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * @name 	SButtonComponent Classes
 * This file provide the mixins to generate button classes
 */
/**
 * Provide all the classes of the button component like .btn, .btn--outline, etc...
 * - ```.btn```
 * - ```.btn--{color}```
 * - ```.btn--outline```
 * - ```.btn--link```
 * - ```.btn--block```
 * @param 		{List<Color>} 		[$colors=default primary secondary] 		The colors to generate
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Provide the bare styling for the buttons classes
 * - ```.btn```
 * - ```.btn--block```
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Provide the style styling for the buttons classes
 * - ```.btn--{color}```
 * - ```.btn--outline```
 * - ```.btn--link```
 * - ```.btn:disabled```
 * - ```.btn--hover-{$color}```
 * @param 		{List<Color>} 		[$colors=default primary secondary] 		The colors to generate
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * @name 	SCornerBadgeComponent
 * Provide ability to generate corner badges that follow your settings like colors.
 *
 * - ```.corner-badge```
 * - ```.corner-badge--tl```
 * - ```.corner-badge--tr```
 * - ```.corner-badge--bl```
 * - ```.corner-badge--br```
 * - ```.corner-badge--{color}```
 *
 * See:
 * - [Element level mixins API](./sass/_main.md)
 * - [Classes level mixins API](./sass/_classes.md)
 *
 * @example 	scss
 * // apply the corner badge bare and style to my custom element
 * .my-cool-element {
 * 	\@include s-corner-badge(primary tr);
 * }
 * // apply only the bare styling to my custom element
 * .my-cool-element {
 * 	\@include s-corner-badge-bare(tr);
 * }
 * // apply only the style styling to my custom element
 * .my-cool-element {
 * 	\@include s-corner-badge-style(primary);
 * }

 * // will print out classes for the corner badges including bare and style part
 * \@include s-corner-badge-classes(
 * 	$corners : tr tl br bl,
 * 	$colors : default primary secondary
 * );
 * // will print out classes for the button including only bare part
 * \@include s-button-classes-bare(
 * 	$corners : tr tl br bl
 * );
 * // will print out classes for the button including only style part
 * \@include s-button-classes-style(
 * 	$colors : default primary secondary
 * );
 *
 * @author 	Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * @name 	SCornerBadgeComponent
 * This file provide the mixins to create corner badges
 */
/**
 * Apply the corner badge css
 * @param 		{Number} 		[$modifiers=default tr] 			The modifiers that represent the corner badge you want. Available : {color} tl tr bl br
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply the corner badge bare css
 * @param 		{Number} 		[$modifiers=tr] 			The modifiers that represent the corner badge you want. Available : tl tr bl br
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply the corner badge style css
 * @param 		{Number} 		[$modifiers=default] 			The modifiers that represent the corner badge you want. Available : {color}
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * @name 	SCornerBadgeComponent Classes
 * This file provide the mixins to generate corner badge classes
 */
/**
 * Provide all the classes of the corner badge component like:
 * - ```.corner-badge```
 * - ```.corner-badge--tl```
 * - ```.corner-badge--tr```
 * - ```.corner-badge--bl```
 * - ```.corner-badge--br```
 * - ```.corner-badge--{color}```
 *
 * @param 		{List<String>} 		[$corners=tl tr bl br] 						The corners to generate
 * @param 		{List<Color>} 		[$colors=default primary secondary] 		The colors to generate
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Provide all the bare classes of the corner badge component like:
 * - ```.corner-badge```
 * - ```.corner-badge--tl```
 * - ```.corner-badge--tr```
 * - ```.corner-badge--bl```
 * - ```.corner-badge--br```
 *
 * @param 		{List<String>} 		[$corners=tl tr bl br] 						The corners to generate
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Provide all the style classes of the corner badge component like:
 * - ```.corner-badge--{color}```
 *
 * @param 		{List<Color>} 		[$colors=default primary secondary] 		The colors to generate
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * @name 	SDropdownComponent
 * Documentation coming soon...
 */
/**
 * @name 	SFormComponent
 * Documentation coming soon...
 */
/**
 * @name 	SFormComponent
 * This file provide the mixins and functions to create form elements
 */
.form-input, .form-select, .form-textarea, .form-addon {
  display: inline-block;
  -webkit-appearance: none;
  -moz-appearance: none;
  border: none;
  outline: none;
  width: 100%;
  font-size: 1em;
}

.form-input, .form-select, .form-textarea {
  border-width: 1px;
  border-style: solid;
}

.form-input:disabled, .form-select:disabled, .form-textarea:disabled {
  cursor: not-allowed;
}

/**
 * Set the styling for field sizes like padding, height, etc...
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Set the styling for field color like borders
 * @param 		{Color} 		$color 		The color wanted for the field
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply the bare and style css for input field (text, email, etc...)
 * @param 		{Color} 		[$color=default] 		The color wanted for the field
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply the bare css for input field (text, email, etc...)
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply the style css for input field (text, email, etc...)
 * @param 		{Color} 		[$color=default] 		The color wanted for the field
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply the bare and style css for textarea
 * @param 		{Color} 		[$color=default] 		The color wanted for the textarea
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Set the styling for textarea sizes like padding, etc...
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply the bare css for textarea
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply the style css for textarea
 * @param 		{Color} 		[$color=default] 		The color wanted for the textarea
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
* Apply the bare and style css for select
* @param 		{Color} 		[$color=default] 		The color wanted for the select
* @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
*/
/**
 * Set the styling for select colors like background arrow, etc...
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
* Apply the bare css for select
* @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
*/
/**
* Apply the style css for select
* @param 		{Color} 		[$color=default] 		The color wanted for the select
* @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
*/
/**
* Apply the bare and style css for form group
* @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
*/
/**
* Apply the bare css for form group
* @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
*/
/**
* Apply the style css for form group
* @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
*/
/**
* Apply the bare and style css for form addon
* @param 		{Color} 		[$color=default] 		The color wanted for the form addon
* @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
*/
/**
* Apply the bare css for form group
* @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
*/
/**
* Apply the bare and style css for form group
* @param 		{Color} 		[$color=default] 		The color wanted for the select
* @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
*/
/**
 * @name 	SFormComponent Classes
 * This file provide the mixins to generate form classes
 */
/**
 * Provide all the classes of the form component like .form-input, .form-textarea, etc...
 * - ```.form-input```
 * - ```.form-input--{color}```
 * - ```.form-textarea```
 * - ```.form-textarea--{color}```
 * - ```.form-select```
 * - ```.form-select--{color}```
 * - ```.form-group````
 * - ```.form-addon```
 * - ```.form-addon--{color}```
 * @param 		{List<Color>} 		[$colors=default primary secondary] 		The colors to generate
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Provide all the bare classes of the form component like .form-input, .form-textarea, etc...
 * - ```.form-input```
 * - ```.form-textarea```
 * - ```.form-select```
 * - ```.form-group````
 * - ```.form-addon```
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Provide all the style classes of the form component like .form-input, .form-textarea, etc...
 * - ```.form-input```
 * - ```.form-input--{color}```
 * - ```.form-textarea```
 * - ```.form-textarea--{color}```
 * - ```.form-select```
 * - ```.form-select--{color}```
 * - ```.form-group````
 * - ```.form-addon```
 * - ```.form-addon--{color}```
 * @param 		{List<Color>} 		[$colors=default primary secondary] 		The colors to generate
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * @name 	SNavComponent
 * Documentation coming soon...
 */
/**
 * @name 	STableComponent
 * Documentation coming soon...
 */
/**
 * Print out the responsive style for a table.
 * This responsive style make the table display as block and take the "label" attribute on the td to display correctly the line label
 */
/**
 * @name 	STableComponent Classes
 * This file provide the mixins to generate table classes
 */
/**
 * Provide all the classes of the button component like .table, .table--striped, etc...
 * - ```.table```
 * - ```.table--striped```
 * - ```.table--bordered```
 * - ```.table--hover```
 * - ```.table--responsive```
 * - ```.table--responsive-overflow```
 * - ```.table--interactive```
 * - ```.table--middle```
 * - ```.table--center```
 *
 * @param 		{Color} 		[$colors=default primary secondary]	 		Specify the colors to generate
 * @param 		{String} 		[$modifiers=striped bordered hover responsive responsive-overflow interactive middle center] 		Specify the modifiers to generate
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Provide all the style classes of the button component like .table, .table--striped, etc...
 * - ```.table```
 * - ```.table--striped```
 * - ```.table--bordered```
 * - ```.table--hover```
 * - ```.table--responsive```
 * - ```.table--responsive-overflow```
 * - ```.table--interactive```
 * - ```.table--middle```
 * - ```.table--center```
 *
 * @param 		{Color} 		[$colors=default primary secondary]	 		Specify the colors to generate
 * @param 		{String} 		[$modifiers=striped bordered hover responsive responsive-overflow interactive middle center] 		Specify the modifiers to generate
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Provide all the bare classes of the button component like .table, .table--striped, etc...
 * - ```.table```
 * - ```.table--striped```
 * - ```.table--bordered```
 * - ```.table--hover```
 * - ```.table--responsive```
 * - ```.table--responsive-overflow```
 * - ```.table--interactive```
 * - ```.table--middle```
 * - ```.table--center```
 *
 * @param 		{String} 		[$modifiers=striped bordered hover responsive responsive-overflow interactive middle center] 		Specify the modifiers to generate
 *
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * @name 	STypographyComponent
 * Provide ability to generate base typography classes for:
 * - Titles:
 * 	- ```.h1-h6```
 * 	- ```.tf h1-h6```
 * - Paragraphs
 * 	- ```.p```, ```.tf p```
 * 	- ```.p--lead```, ```.tf p.p--lead```
 * - Links
 * 	- ```.link```, ```.tf a```
 * - Inline text elements
 *  - ```.mark```, ```.tf mark```
 *  - ```.del```, ```.tf del```
 *  - ```.s```, ```.tf s```
 *  - ```.ins```, ```.tf ins```
 *  - ```.u```, ```.tf u```
 *  - ```.small```, ```.tf small```
 *  - ```.strong```, ```.tf strong```
 *  - ```.em```, ```.tf em```
 * - Lists
 * 	- ```.dl```, ```.tf dl```
 * 		- ```.dt```, ```.tf dt```
 * 		- ```.dd```, ```.tf dd```
 * 	- ```.ul```, ```.tf ul```
 * 		- ```.li```, ```.tf li```
 * 	- ```.ol```, ```.tf ol```
 * 		- ```.li```, ```.tf li```
 * - Captions
 * 	- ```.caption```, ```.tf caption```, ```.tf figcaption```
 * - Quotes
 * 	- ```.quote```, ```.tf quote```
 * 	- ```.blockquote```, ```.tf blockquote```
 *
 * See:
 * - [Element level mixins API](./sass/_main.md)
 * - [Classes level mixins API](./sass/_classes.md)
 *
 * @example 	scss
 * // apply the title bare and style to my custom element
 * h1 {
 * 	\@include s-typography-title(4em);
 * }
 * // apply only the bare styling to my custom title
 * h1 {
 * 	\@include s-typography-title-bare(4em);
 * }
 * // apply only the style styling to my custom title
 * h1 {
 * 	\@include s-typography-title-style(4em);
 * }
 *
 * // provide classes for all the typography elements
 * \@include s-typography-classes();
 *
 * @author 	Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * @name 	STypographyComponent
 * This file provide the mixins to create typography elements
 */
/**
 * Apply the title css
 * @param 		{Number} 		$size 		The size wanted. If unitless, will use modular scale to calculate size
 * @param 		{Integer}		[$base=null] 		The base on which to calculate the modular scale if needed
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply the title bare css
 * @param 		{Number} 		$size 				The size wanted. If unitless, will use modular scale to calculate size
 * @param 		{Integer}		[$base=null] 		The base on which to calculate the modular scale if needed
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply the title style css
 * @param 		{Number} 		$size 				The size wanted. If unitless, will use modular scale to calculate size
 * @param 		{Integer}		[$base=null] 		The base on which to calculate the modular scale if needed
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply the paragraph bare css
 * @param 		{Number} 		$size 				The size wanted
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply the paragraph style css
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply the link css
 * @param 		{Color} 		[$color=primary] 		The color used to style link
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply the link bare css
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply the link style css
 * @param 		{Color} 		[$color=primary] 		The color used to style link
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply the inline-text css
 * @param 		{String} 		$tag 		The tag to use the style for
 * @param 		{Color} 		[$color=primary] 		The color used to style different inline text elements
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply the inline-text bare css
 * @param 		{String} 		$tag 		The tag to use the style for
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply the inline-text css
 * @param 		{String} 		$tag 		The tag to use the style for
 * @param 		{Color} 		[$color=primary] 		The color used to style different inline text elements
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply the list css
 * @param 		{String|List} 		$tag 				The tag to style like "ul", "ol li" or "dl dt"
 * @param 		{Color} 			[$color=primary] 	The color used for styling bullets
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply the list bare css
 * @param 		{String|List} 		$tag 				The tag to style like "ul", "ol li" or "dl dt"
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply the list style css
 * @param 		{String|List} 		$tag 				The tag to style like "ul", "ol li" or "dl dt"
 * @param 		{Color} 			[$color=primary] 	The color used for styling bullets
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply the caption css
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply the caption bare css
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply the caption style css
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply the quote css
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply the quote bare css
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Apply the quote style css
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * @name 	STypographyComponent Classes
 * This file provide the mixins to generate typography classes
 */
/**
 * Provide all the classes of the typography component like titles, paragraphs, lists, etc..
 * @param 		{Color} 	[$color=primary] 		The main color used to generate the texts styles
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Provide the styling for the titles classes:
 * - ```.h1-h6```
 * - ```.tf h1-h6```
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Provide the bare styling for the titles classes
 * - ```.h1-h6```
 * - ```.tf h1-h6```
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Provide the style styling for the titles classes
 * - ```.h1-h6```
 * - ```.tf h1-h6```
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Provide the styling for the paragraphs classes
 * - ```.p```, ```.tf p```
 * - ```.p--lead```, ```.tf p.p--lead```
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Provide the bare styling for the ```.p``` and ```.p--lead``` classes
 * - ```.p```, ```.tf p```
 * - ```.p--lead```, ```.tf p.p--lead```
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Provide the bare styling for the ```.p``` class
 * - ```.p```, ```.tf p```
 * - ```.p--lead```, ```.tf p.p--lead```
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Provide the styling for the links classes
 * - ```.link```, ```.tf a```
 * @param 		{Color} 		[$color=primary] 		The color used to style links
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Provide the bare styling for the links classes
 * - ```.link```, ```.tf a```
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Provide the style styling for the links classes
 * - ```.link```, ```.tf a```
 * @param 		{Color} 		[$color=primary] 		The color used to style links
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Provide the styling for the inline-text classes
 * - ```.mark```, ```.tf mark```
 * - ```.del```, ```.tf del```
 * - ```.s```, ```.tf s```
 * - ```.ins```, ```.tf ins```
 * - ```.u```, ```.tf u```
 * - ```.small```, ```.tf small```
 * - ```.strong```, ```.tf strong```
 * - ```.em```, ```.tf em```
 * @param 		{Color} 		[$color=primary] 		The color used to style different inline text elements
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Provide the bare styling for the inline-text classes
 * - ```.mark```, ```.tf mark```
 * - ```.del```, ```.tf del```
 * - ```.s```, ```.tf s```
 * - ```.ins```, ```.tf ins```
 * - ```.u```, ```.tf u```
 * - ```.small```, ```.tf small```
 * - ```.strong```, ```.tf strong```
 * - ```.em```, ```.tf em```
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Provide the style styling for the inline-text classes
 * - ```.mark```, ```.tf mark```
 * - ```.del```, ```.tf del```
 * - ```.s```, ```.tf s```
 * - ```.ins```, ```.tf ins```
 * - ```.u```, ```.tf u```
 * - ```.small```, ```.tf small```
 * - ```.strong```, ```.tf strong```
 * - ```.em```, ```.tf em```
 * @param 		{Color} 		[$color=primary] 		The color used to style different inline text elements
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Provide the styling for the lists classes
 * - ```.dl```, ```.tf dl```
 * 	- ```.dt```, ```.tf dt```
 * 	- ```.dd```, ```.tf dd```
 * - ```.ul```, ```.tf ul```
 * 	- ```.li```, ```.tf li```
 * - ```.ol```, ```.tf ol```
 * 	- ```.li```, ```.tf li```
 * @param 		{Color} 		[$color=primary] 		The color used to style bullets
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Provide the bare styling for the lists classes
 * - ```.dl```, ```.tf dl```
 * 	- ```.dt```, ```.tf dt```
 * 	- ```.dd```, ```.tf dd```
 * - ```.ul```, ```.tf ul```
 * 	- ```.li```, ```.tf li```
 * - ```.ol```, ```.tf ol```
 * 	- ```.li```, ```.tf li```
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Provide the style styling for the lists classes
 * - ```.dl```, ```.tf dl```
 * 	- ```.dt```, ```.tf dt```
 * 	- ```.dd```, ```.tf dd```
 * - ```.ul```, ```.tf ul```
 * 	- ```.li```, ```.tf li```
 * - ```.ol```, ```.tf ol```
 * 	- ```.li```, ```.tf li```
 * @param 		{Color} 		[$color=primary] 		The color used to style bullets
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Provide the styling for the captions classes
 * - ```.caption```, ```.figcaption```, ```.tf caption```, ```.tf figcaption```
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Provide the bare styling for the captions classes
 * - ```.caption```, ```.figcaption```, ```.tf caption```, ```.tf figcaption```
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Provide the style styling for the captions classes
 * - ```.caption```, ```.figcaption```, ```.tf caption```, ```.tf figcaption```
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Provide the styling for the quotes classes
 * - ```.quote```, ```.tf quote```
 * - ```.blockquote```, ```.tf blockquote```
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Provide the bare styling for the quotes classes
 * - ```.quote```, ```.tf quote```
 * - ```.blockquote```, ```.tf blockquote```
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Provide the style styling for the quotes classes
 * - ```.quote```, ```.tf quote```
 * - ```.blockquote```, ```.tf blockquote```
 * @author 		Andrea Giuffrida <andrea.uprising@gmail.com>
 */
/**
 * Setup
 * Setup all the different parts/modules/libraries.
 */
/**
 * Setup
 * Setup all the different parts/modules/libraries.
 */
/**
	 * @name 	default State
	 * Here's the settings for the **default** state.
	 * @styleguide 	Gridle / States
	 * @display 	gridle-settings
	 * @gridle-name 	default
	 * @gridle-min-width 	
	 * @gridle-max-width 	
	 * @gridle-query 	
	 * @gridle-classes 	true
	 * @gridle-context 	12
	 * @gridle-gutter-width 	30px
	 * @gridle-gutter-height 	0
	 * @gridle-gutter-top 	0
	 * @gridle-gutter-right 	15px
	 * @gridle-gutter-bottom 	0
	 * @gridle-gutter-left 	15px
	 * @gridle-direction 	ltr
	 * @gridle-dir-attribute 	false
	 * @gridle-name-multiplicator 	1
	 * @gridle-states-classes 	false
	 * @gridle-classes-prefix 	
	 */
/**
	 * @name 	mobile State
	 * Here's the settings for the **mobile** state.
	 * @styleguide 	Gridle / States
	 * @display 	gridle-settings
	 * @gridle-name 	mobile
	 * @gridle-min-width 	320px
	 * @gridle-max-width 	
	 * @gridle-query 	
	 * @gridle-classes 	true
	 * @gridle-context 	12
	 * @gridle-gutter-width 	30px
	 * @gridle-gutter-height 	0
	 * @gridle-gutter-top 	0
	 * @gridle-gutter-right 	15px
	 * @gridle-gutter-bottom 	0
	 * @gridle-gutter-left 	15px
	 * @gridle-direction 	ltr
	 * @gridle-dir-attribute 	false
	 * @gridle-name-multiplicator 	1
	 * @gridle-states-classes 	false
	 * @gridle-classes-prefix 	
	 */
/**
	 * @name 	tablet State
	 * Here's the settings for the **tablet** state.
	 * @styleguide 	Gridle / States
	 * @display 	gridle-settings
	 * @gridle-name 	tablet
	 * @gridle-min-width 	640px
	 * @gridle-max-width 	
	 * @gridle-query 	
	 * @gridle-classes 	true
	 * @gridle-context 	12
	 * @gridle-gutter-width 	30px
	 * @gridle-gutter-height 	0
	 * @gridle-gutter-top 	0
	 * @gridle-gutter-right 	15px
	 * @gridle-gutter-bottom 	0
	 * @gridle-gutter-left 	15px
	 * @gridle-direction 	ltr
	 * @gridle-dir-attribute 	false
	 * @gridle-name-multiplicator 	1
	 * @gridle-states-classes 	false
	 * @gridle-classes-prefix 	
	 */
/**
	 * @name 	desktop State
	 * Here's the settings for the **desktop** state.
	 * @styleguide 	Gridle / States
	 * @display 	gridle-settings
	 * @gridle-name 	desktop
	 * @gridle-min-width 	992px
	 * @gridle-max-width 	
	 * @gridle-query 	
	 * @gridle-classes 	true
	 * @gridle-context 	12
	 * @gridle-gutter-width 	30px
	 * @gridle-gutter-height 	0
	 * @gridle-gutter-top 	0
	 * @gridle-gutter-right 	15px
	 * @gridle-gutter-bottom 	0
	 * @gridle-gutter-left 	15px
	 * @gridle-direction 	ltr
	 * @gridle-dir-attribute 	false
	 * @gridle-name-multiplicator 	1
	 * @gridle-states-classes 	false
	 * @gridle-classes-prefix 	
	 */
/**
	 * @name 	large State
	 * Here's the settings for the **large** state.
	 * @styleguide 	Gridle / States
	 * @display 	gridle-settings
	 * @gridle-name 	large
	 * @gridle-min-width 	1200px
	 * @gridle-max-width 	
	 * @gridle-query 	
	 * @gridle-classes 	true
	 * @gridle-context 	12
	 * @gridle-gutter-width 	30px
	 * @gridle-gutter-height 	0
	 * @gridle-gutter-top 	0
	 * @gridle-gutter-right 	15px
	 * @gridle-gutter-bottom 	0
	 * @gridle-gutter-left 	15px
	 * @gridle-direction 	ltr
	 * @gridle-dir-attribute 	false
	 * @gridle-name-multiplicator 	1
	 * @gridle-states-classes 	false
	 * @gridle-classes-prefix 	
	 */
/**
 * Utils
 * Import all the different utils functions, mixins, classes, etc...
 */
/**
 * Utils
 * Import all the different utils functions, mixins, classes, etc...
 */
/**
 * Generic
 * All the generic codebase for the project like typography, resets, etc...
 */
/**
 * Generic
 * All the generic codebase for the project like typography, resets, etc...
 */
/**
 * Base styling applied everywhere
 */
body {
  background: #0f0f0f;
}

/**
 * @name 		Wild background
 * Apply a nice wild background
 * @styleguide 		Decorators / Backgrounds
 * @example 	html
 * <div class="bkg-wild ratio-16-9"></div>
 */
.bkg-wild {
  background-image: url("../img/wild-bkg.jpg");
  background-size: 100% auto;
  background-repeat: no-repeat;
  background-position: top 50%;
}

.cs-light {
  color: #f7f0e7;
}

.container:after {
  content: "";
  display: table;
  clear: both;
}

.row:before, .row-reverse:before, .row:after, .row-reverse:after {
  content: "";
  display: table;
}

.row:after, .row-reverse:after {
  clear: both;
}

.row, .row-reverse {
  zoom: 1;
}

.gr-0, .gr-1, .gr-2, .gr-3, .gr-4, .gr-5, .gr-6, .gr-7, .gr-8, .gr-9, .gr-10, .gr-11, .gr-12 {
  display: inline-block;
  min-height: 1px;
  line-height: 1;
  float: left;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  vertical-align: top;
  padding-right: 15px;
  padding-left: 15px;
}

.gr-adapt {
  display: table-cell;
  width: 1px;
  white-space: nowrap !important;
  line-height: 1;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  padding-right: 15px;
  padding-left: 15px;
}

.gr-grow {
  display: table-cell;
  width: 99999px;
  line-height: 1;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  padding-right: 15px;
  padding-left: 15px;
}

.push-0, .push-1, .push-2, .push-3, .push-4, .push-5, .push-6, .push-7, .push-8, .push-9, .push-10, .push-11, .push-12 {
  position: relative;
}

.pull-0, .pull-1, .pull-2, .pull-3, .pull-4, .pull-5, .pull-6, .pull-7, .pull-8, .pull-9, .pull-10, .pull-11, .pull-12 {
  position: relative;
}

.nowrap {
  white-space: nowrap;
}

.nowrap > * {
  white-space: normal;
}

.wrap {
  white-space: normal;
}

.gr-centered {
  display: block !important;
  float: none !important;
  margin-left: auto !important;
  margin-right: auto !important;
  clear: both !important;
}

@media screen and (min-width: 320px) {
  .container\@mobile:after {
    content: "";
    display: table;
    clear: both;
  }
}

@media screen and (min-width: 320px) {
  .row\@mobile:before, .row-reverse\@mobile:before, .row\@mobile:after, .row-reverse\@mobile:after {
    content: "";
    display: table;
  }
  .row\@mobile:after, .row-reverse\@mobile:after {
    clear: both;
  }
  .row\@mobile, .row-reverse\@mobile {
    zoom: 1;
  }
}

@media screen and (min-width: 320px) {
  .gr-0\@mobile, .gr-1\@mobile, .gr-2\@mobile, .gr-3\@mobile, .gr-4\@mobile, .gr-5\@mobile, .gr-6\@mobile, .gr-7\@mobile, .gr-8\@mobile, .gr-9\@mobile, .gr-10\@mobile, .gr-11\@mobile, .gr-12\@mobile, [class*="gr-"]:not([class*="gr-1@mobile"]):not([class*="gr-2@mobile"]):not([class*="gr-3@mobile"]):not([class*="gr-4@mobile"]):not([class*="gr-5@mobile"]):not([class*="gr-6@mobile"]):not([class*="gr-7@mobile"]):not([class*="gr-8@mobile"]):not([class*="gr-9@mobile"]):not([class*="gr-10@mobile"]):not([class*="gr-11@mobile"]):not([class*="gr-12@mobile"]) {
    display: inline-block;
    min-height: 1px;
    line-height: 1;
    float: left;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    vertical-align: top;
    padding-right: 15px;
    padding-left: 15px;
  }
}

@media screen and (min-width: 320px) {
  .gr-adapt\@mobile {
    display: table-cell;
    width: 1px;
    white-space: nowrap !important;
    line-height: 1;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    padding-right: 15px;
    padding-left: 15px;
  }
}

@media screen and (min-width: 320px) {
  .gr-grow\@mobile {
    display: table-cell;
    width: 99999px;
    line-height: 1;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    padding-right: 15px;
    padding-left: 15px;
  }
}

@media screen and (min-width: 320px) {
  .push-0\@mobile, .push-1\@mobile, .push-2\@mobile, .push-3\@mobile, .push-4\@mobile, .push-5\@mobile, .push-6\@mobile, .push-7\@mobile, .push-8\@mobile, .push-9\@mobile, .push-10\@mobile, .push-11\@mobile, .push-12\@mobile {
    position: relative;
  }
}

@media screen and (min-width: 320px) {
  .pull-0\@mobile, .pull-1\@mobile, .pull-2\@mobile, .pull-3\@mobile, .pull-4\@mobile, .pull-5\@mobile, .pull-6\@mobile, .pull-7\@mobile, .pull-8\@mobile, .pull-9\@mobile, .pull-10\@mobile, .pull-11\@mobile, .pull-12\@mobile {
    position: relative;
  }
}

@media screen and (min-width: 320px) {
  .nowrap\@mobile {
    white-space: nowrap;
  }
  .nowrap\@mobile > * {
    white-space: normal;
  }
}

@media screen and (min-width: 320px) {
  .wrap\@mobile {
    white-space: normal;
  }
}

@media screen and (min-width: 320px) {
  .gr-centered\@mobile {
    display: block !important;
    float: none !important;
    margin-left: auto !important;
    margin-right: auto !important;
    clear: both !important;
  }
}

@media screen and (min-width: 640px) {
  .container\@tablet:after {
    content: "";
    display: table;
    clear: both;
  }
}

@media screen and (min-width: 640px) {
  .row\@tablet:before, .row-reverse\@tablet:before, .row\@tablet:after, .row-reverse\@tablet:after {
    content: "";
    display: table;
  }
  .row\@tablet:after, .row-reverse\@tablet:after {
    clear: both;
  }
  .row\@tablet, .row-reverse\@tablet {
    zoom: 1;
  }
}

@media screen and (min-width: 640px) {
  .gr-0\@tablet, .gr-1\@tablet, .gr-2\@tablet, .gr-3\@tablet, .gr-4\@tablet, .gr-5\@tablet, .gr-6\@tablet, .gr-7\@tablet, .gr-8\@tablet, .gr-9\@tablet, .gr-10\@tablet, .gr-11\@tablet, .gr-12\@tablet {
    display: inline-block;
    min-height: 1px;
    line-height: 1;
    float: left;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    vertical-align: top;
    padding-right: 15px;
    padding-left: 15px;
  }
}

@media screen and (min-width: 640px) {
  .gr-adapt\@tablet {
    display: table-cell;
    width: 1px;
    white-space: nowrap !important;
    line-height: 1;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    padding-right: 15px;
    padding-left: 15px;
  }
}

@media screen and (min-width: 640px) {
  .gr-grow\@tablet {
    display: table-cell;
    width: 99999px;
    line-height: 1;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    padding-right: 15px;
    padding-left: 15px;
  }
}

@media screen and (min-width: 640px) {
  .push-0\@tablet, .push-1\@tablet, .push-2\@tablet, .push-3\@tablet, .push-4\@tablet, .push-5\@tablet, .push-6\@tablet, .push-7\@tablet, .push-8\@tablet, .push-9\@tablet, .push-10\@tablet, .push-11\@tablet, .push-12\@tablet {
    position: relative;
  }
}

@media screen and (min-width: 640px) {
  .pull-0\@tablet, .pull-1\@tablet, .pull-2\@tablet, .pull-3\@tablet, .pull-4\@tablet, .pull-5\@tablet, .pull-6\@tablet, .pull-7\@tablet, .pull-8\@tablet, .pull-9\@tablet, .pull-10\@tablet, .pull-11\@tablet, .pull-12\@tablet {
    position: relative;
  }
}

@media screen and (min-width: 640px) {
  .nowrap\@tablet {
    white-space: nowrap;
  }
  .nowrap\@tablet > * {
    white-space: normal;
  }
}

@media screen and (min-width: 640px) {
  .wrap\@tablet {
    white-space: normal;
  }
}

@media screen and (min-width: 640px) {
  .gr-centered\@tablet {
    display: block !important;
    float: none !important;
    margin-left: auto !important;
    margin-right: auto !important;
    clear: both !important;
  }
}

@media screen and (min-width: 992px) {
  .container\@desktop:after {
    content: "";
    display: table;
    clear: both;
  }
}

@media screen and (min-width: 992px) {
  .row\@desktop:before, .row-reverse\@desktop:before, .row\@desktop:after, .row-reverse\@desktop:after {
    content: "";
    display: table;
  }
  .row\@desktop:after, .row-reverse\@desktop:after {
    clear: both;
  }
  .row\@desktop, .row-reverse\@desktop {
    zoom: 1;
  }
}

@media screen and (min-width: 992px) {
  .gr-0\@desktop, .gr-1\@desktop, .gr-2\@desktop, .gr-3\@desktop, .gr-4\@desktop, .gr-5\@desktop, .gr-6\@desktop, .gr-7\@desktop, .gr-8\@desktop, .gr-9\@desktop, .gr-10\@desktop, .gr-11\@desktop, .gr-12\@desktop {
    display: inline-block;
    min-height: 1px;
    line-height: 1;
    float: left;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    vertical-align: top;
    padding-right: 15px;
    padding-left: 15px;
  }
}

@media screen and (min-width: 992px) {
  .gr-adapt\@desktop {
    display: table-cell;
    width: 1px;
    white-space: nowrap !important;
    line-height: 1;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    padding-right: 15px;
    padding-left: 15px;
  }
}

@media screen and (min-width: 992px) {
  .gr-grow\@desktop {
    display: table-cell;
    width: 99999px;
    line-height: 1;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    padding-right: 15px;
    padding-left: 15px;
  }
}

@media screen and (min-width: 992px) {
  .push-0\@desktop, .push-1\@desktop, .push-2\@desktop, .push-3\@desktop, .push-4\@desktop, .push-5\@desktop, .push-6\@desktop, .push-7\@desktop, .push-8\@desktop, .push-9\@desktop, .push-10\@desktop, .push-11\@desktop, .push-12\@desktop {
    position: relative;
  }
}

@media screen and (min-width: 992px) {
  .pull-0\@desktop, .pull-1\@desktop, .pull-2\@desktop, .pull-3\@desktop, .pull-4\@desktop, .pull-5\@desktop, .pull-6\@desktop, .pull-7\@desktop, .pull-8\@desktop, .pull-9\@desktop, .pull-10\@desktop, .pull-11\@desktop, .pull-12\@desktop {
    position: relative;
  }
}

@media screen and (min-width: 992px) {
  .nowrap\@desktop {
    white-space: nowrap;
  }
  .nowrap\@desktop > * {
    white-space: normal;
  }
}

@media screen and (min-width: 992px) {
  .wrap\@desktop {
    white-space: normal;
  }
}

@media screen and (min-width: 992px) {
  .gr-centered\@desktop {
    display: block !important;
    float: none !important;
    margin-left: auto !important;
    margin-right: auto !important;
    clear: both !important;
  }
}

@media screen and (min-width: 1200px) {
  .container\@large:after {
    content: "";
    display: table;
    clear: both;
  }
}

@media screen and (min-width: 1200px) {
  .row\@large:before, .row-reverse\@large:before, .row\@large:after, .row-reverse\@large:after {
    content: "";
    display: table;
  }
  .row\@large:after, .row-reverse\@large:after {
    clear: both;
  }
  .row\@large, .row-reverse\@large {
    zoom: 1;
  }
}

@media screen and (min-width: 1200px) {
  .gr-0\@large, .gr-1\@large, .gr-2\@large, .gr-3\@large, .gr-4\@large, .gr-5\@large, .gr-6\@large, .gr-7\@large, .gr-8\@large, .gr-9\@large, .gr-10\@large, .gr-11\@large, .gr-12\@large {
    display: inline-block;
    min-height: 1px;
    line-height: 1;
    float: left;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    vertical-align: top;
    padding-right: 15px;
    padding-left: 15px;
  }
}

@media screen and (min-width: 1200px) {
  .gr-adapt\@large {
    display: table-cell;
    width: 1px;
    white-space: nowrap !important;
    line-height: 1;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    padding-right: 15px;
    padding-left: 15px;
  }
}

@media screen and (min-width: 1200px) {
  .gr-grow\@large {
    display: table-cell;
    width: 99999px;
    line-height: 1;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    padding-right: 15px;
    padding-left: 15px;
  }
}

@media screen and (min-width: 1200px) {
  .push-0\@large, .push-1\@large, .push-2\@large, .push-3\@large, .push-4\@large, .push-5\@large, .push-6\@large, .push-7\@large, .push-8\@large, .push-9\@large, .push-10\@large, .push-11\@large, .push-12\@large {
    position: relative;
  }
}

@media screen and (min-width: 1200px) {
  .pull-0\@large, .pull-1\@large, .pull-2\@large, .pull-3\@large, .pull-4\@large, .pull-5\@large, .pull-6\@large, .pull-7\@large, .pull-8\@large, .pull-9\@large, .pull-10\@large, .pull-11\@large, .pull-12\@large {
    position: relative;
  }
}

@media screen and (min-width: 1200px) {
  .nowrap\@large {
    white-space: nowrap;
  }
  .nowrap\@large > * {
    white-space: normal;
  }
}

@media screen and (min-width: 1200px) {
  .wrap\@large {
    white-space: normal;
  }
}

@media screen and (min-width: 1200px) {
  .gr-centered\@large {
    display: block !important;
    float: none !important;
    margin-left: auto !important;
    margin-right: auto !important;
    clear: both !important;
  }
}

@media screen and (max-width: 400px) {
  @-ms-viewport {
    width: device-width;
  }
}

#gridle-settings {
  content: '{ "version" : "3.0.0", "states" : { "default":{ "name" : "default", "min-width" : null, "max-width" : null, "query" : null, "classes" : true, "context" : "12", "column-width" : null, "gutter-width" : "30px", "gutter-height" : "0", "gutter-top" : "0", "gutter-right" : "15px", "gutter-bottom" : "0", "gutter-left" : "15px", "direction" : "ltr", "dir-attribute" : false, "name-multiplicator" : "1", "states-classes" : false, "classes-prefix" : null, "_" : true }, "mobile":{ "name" : "mobile", "min-width" : "320px", "max-width" : null, "query" : "screen and (min-width: 320px)", "classes" : true, "context" : "12", "column-width" : null, "gutter-width" : "30px", "gutter-height" : "0", "gutter-top" : "0", "gutter-right" : "15px", "gutter-bottom" : "0", "gutter-left" : "15px", "direction" : "ltr", "dir-attribute" : false, "name-multiplicator" : "1", "states-classes" : false, "classes-prefix" : null, "_" : true }, "tablet":{ "name" : "tablet", "min-width" : "640px", "max-width" : null, "query" : "screen and (min-width: 640px)", "classes" : true, "context" : "12", "column-width" : null, "gutter-width" : "30px", "gutter-height" : "0", "gutter-top" : "0", "gutter-right" : "15px", "gutter-bottom" : "0", "gutter-left" : "15px", "direction" : "ltr", "dir-attribute" : false, "name-multiplicator" : "1", "states-classes" : false, "classes-prefix" : null, "_" : true }, "desktop":{ "name" : "desktop", "min-width" : "992px", "max-width" : null, "query" : "screen and (min-width: 992px)", "classes" : true, "context" : "12", "column-width" : null, "gutter-width" : "30px", "gutter-height" : "0", "gutter-top" : "0", "gutter-right" : "15px", "gutter-bottom" : "0", "gutter-left" : "15px", "direction" : "ltr", "dir-attribute" : false, "name-multiplicator" : "1", "states-classes" : false, "classes-prefix" : null, "_" : true }, "large":{ "name" : "large", "min-width" : "1200px", "max-width" : null, "query" : "screen and (min-width: 1200px)", "classes" : true, "context" : "12", "column-width" : null, "gutter-width" : "30px", "gutter-height" : "0", "gutter-top" : "0", "gutter-right" : "15px", "gutter-bottom" : "0", "gutter-left" : "15px", "direction" : "ltr", "dir-attribute" : false, "name-multiplicator" : "1", "states-classes" : false, "classes-prefix" : null, "_" : true }} }';
}

/**
	 * @name 	Columns
	 * Grid columns available
	 * @styleguide 	Gridle / Columns
	 * @example 	html
	 * <style>
	 * .row.gridle-styleguide {
	 * 	margin-bottom: 30px;
	 * }
	 * [class*="gr-"].gridle-styleguide {
	 * 	background:#eee;
	 * 	padding:30px;
	 * }
	 * </style>
	 * <div class="gridle-styleguide .container">
	 *   <div class="gridle-styleguide row row-debug"> <div class="gridle-styleguide gr-1"> .gr-1 </div> </div>   <div class="gridle-styleguide row row-debug"> <div class="gridle-styleguide gr-2"> .gr-2 </div> </div>   <div class="gridle-styleguide row row-debug"> <div class="gridle-styleguide gr-3"> .gr-3 </div> </div>   <div class="gridle-styleguide row row-debug"> <div class="gridle-styleguide gr-4"> .gr-4 </div> </div>   <div class="gridle-styleguide row row-debug"> <div class="gridle-styleguide gr-5"> .gr-5 </div> </div>   <div class="gridle-styleguide row row-debug"> <div class="gridle-styleguide gr-6"> .gr-6 </div> </div>   <div class="gridle-styleguide row row-debug"> <div class="gridle-styleguide gr-7"> .gr-7 </div> </div>   <div class="gridle-styleguide row row-debug"> <div class="gridle-styleguide gr-8"> .gr-8 </div> </div>   <div class="gridle-styleguide row row-debug"> <div class="gridle-styleguide gr-9"> .gr-9 </div> </div>   <div class="gridle-styleguide row row-debug"> <div class="gridle-styleguide gr-10"> .gr-10 </div> </div>   <div class="gridle-styleguide row row-debug"> <div class="gridle-styleguide gr-11"> .gr-11 </div> </div>   <div class="gridle-styleguide row row-debug"> <div class="gridle-styleguide gr-12"> .gr-12 </div> </div> 
	 * </div>
	 */
.gr-0 {
  width: 0%;
}

.push-0 {
  left: 0%;
  right: auto;
}

.pull-0 {
  right: 0%;
  left: auto;
}

.prefix-0 {
  margin-left: 0%;
}

.suffix-0 {
  margin-right: 0%;
}

.gr-1 {
  width: 8.33333%;
}

.push-1 {
  left: 8.33333%;
  right: auto;
}

.pull-1 {
  right: 8.33333%;
  left: auto;
}

.prefix-1 {
  margin-left: 8.33333%;
}

.suffix-1 {
  margin-right: 8.33333%;
}

.gr-2 {
  width: 16.66667%;
}

.push-2 {
  left: 16.66667%;
  right: auto;
}

.pull-2 {
  right: 16.66667%;
  left: auto;
}

.prefix-2 {
  margin-left: 16.66667%;
}

.suffix-2 {
  margin-right: 16.66667%;
}

.gr-3 {
  width: 25%;
}

.push-3 {
  left: 25%;
  right: auto;
}

.pull-3 {
  right: 25%;
  left: auto;
}

.prefix-3 {
  margin-left: 25%;
}

.suffix-3 {
  margin-right: 25%;
}

.gr-4 {
  width: 33.33333%;
}

.push-4 {
  left: 33.33333%;
  right: auto;
}

.pull-4 {
  right: 33.33333%;
  left: auto;
}

.prefix-4 {
  margin-left: 33.33333%;
}

.suffix-4 {
  margin-right: 33.33333%;
}

.gr-5 {
  width: 41.66667%;
}

.push-5 {
  left: 41.66667%;
  right: auto;
}

.pull-5 {
  right: 41.66667%;
  left: auto;
}

.prefix-5 {
  margin-left: 41.66667%;
}

.suffix-5 {
  margin-right: 41.66667%;
}

.gr-6 {
  width: 50%;
}

.push-6 {
  left: 50%;
  right: auto;
}

.pull-6 {
  right: 50%;
  left: auto;
}

.prefix-6 {
  margin-left: 50%;
}

.suffix-6 {
  margin-right: 50%;
}

.gr-7 {
  width: 58.33333%;
}

.push-7 {
  left: 58.33333%;
  right: auto;
}

.pull-7 {
  right: 58.33333%;
  left: auto;
}

.prefix-7 {
  margin-left: 58.33333%;
}

.suffix-7 {
  margin-right: 58.33333%;
}

.gr-8 {
  width: 66.66667%;
}

.push-8 {
  left: 66.66667%;
  right: auto;
}

.pull-8 {
  right: 66.66667%;
  left: auto;
}

.prefix-8 {
  margin-left: 66.66667%;
}

.suffix-8 {
  margin-right: 66.66667%;
}

.gr-9 {
  width: 75%;
}

.push-9 {
  left: 75%;
  right: auto;
}

.pull-9 {
  right: 75%;
  left: auto;
}

.prefix-9 {
  margin-left: 75%;
}

.suffix-9 {
  margin-right: 75%;
}

.gr-10 {
  width: 83.33333%;
}

.push-10 {
  left: 83.33333%;
  right: auto;
}

.pull-10 {
  right: 83.33333%;
  left: auto;
}

.prefix-10 {
  margin-left: 83.33333%;
}

.suffix-10 {
  margin-right: 83.33333%;
}

.gr-11 {
  width: 91.66667%;
}

.push-11 {
  left: 91.66667%;
  right: auto;
}

.pull-11 {
  right: 91.66667%;
  left: auto;
}

.prefix-11 {
  margin-left: 91.66667%;
}

.suffix-11 {
  margin-right: 91.66667%;
}

.gr-12 {
  width: 100%;
}

.push-12 {
  left: 100%;
  right: auto;
}

.pull-12 {
  right: 100%;
  left: auto;
}

.prefix-12 {
  margin-left: 100%;
}

.suffix-12 {
  margin-right: 100%;
}

body {
  direction: ltr;
}

@media screen and (min-width: 320px) {
  .gr-0\@mobile {
    width: 0%;
  }
  .push-0\@mobile {
    left: 0%;
    right: auto;
  }
  .pull-0\@mobile {
    right: 0%;
    left: auto;
  }
  .prefix-0\@mobile {
    margin-left: 0%;
  }
  .suffix-0\@mobile {
    margin-right: 0%;
  }
  .gr-1\@mobile {
    width: 8.33333%;
  }
  .push-1\@mobile {
    left: 8.33333%;
    right: auto;
  }
  .pull-1\@mobile {
    right: 8.33333%;
    left: auto;
  }
  .prefix-1\@mobile {
    margin-left: 8.33333%;
  }
  .suffix-1\@mobile {
    margin-right: 8.33333%;
  }
  .gr-2\@mobile {
    width: 16.66667%;
  }
  .push-2\@mobile {
    left: 16.66667%;
    right: auto;
  }
  .pull-2\@mobile {
    right: 16.66667%;
    left: auto;
  }
  .prefix-2\@mobile {
    margin-left: 16.66667%;
  }
  .suffix-2\@mobile {
    margin-right: 16.66667%;
  }
  .gr-3\@mobile {
    width: 25%;
  }
  .push-3\@mobile {
    left: 25%;
    right: auto;
  }
  .pull-3\@mobile {
    right: 25%;
    left: auto;
  }
  .prefix-3\@mobile {
    margin-left: 25%;
  }
  .suffix-3\@mobile {
    margin-right: 25%;
  }
  .gr-4\@mobile {
    width: 33.33333%;
  }
  .push-4\@mobile {
    left: 33.33333%;
    right: auto;
  }
  .pull-4\@mobile {
    right: 33.33333%;
    left: auto;
  }
  .prefix-4\@mobile {
    margin-left: 33.33333%;
  }
  .suffix-4\@mobile {
    margin-right: 33.33333%;
  }
  .gr-5\@mobile {
    width: 41.66667%;
  }
  .push-5\@mobile {
    left: 41.66667%;
    right: auto;
  }
  .pull-5\@mobile {
    right: 41.66667%;
    left: auto;
  }
  .prefix-5\@mobile {
    margin-left: 41.66667%;
  }
  .suffix-5\@mobile {
    margin-right: 41.66667%;
  }
  .gr-6\@mobile {
    width: 50%;
  }
  .push-6\@mobile {
    left: 50%;
    right: auto;
  }
  .pull-6\@mobile {
    right: 50%;
    left: auto;
  }
  .prefix-6\@mobile {
    margin-left: 50%;
  }
  .suffix-6\@mobile {
    margin-right: 50%;
  }
  .gr-7\@mobile {
    width: 58.33333%;
  }
  .push-7\@mobile {
    left: 58.33333%;
    right: auto;
  }
  .pull-7\@mobile {
    right: 58.33333%;
    left: auto;
  }
  .prefix-7\@mobile {
    margin-left: 58.33333%;
  }
  .suffix-7\@mobile {
    margin-right: 58.33333%;
  }
  .gr-8\@mobile {
    width: 66.66667%;
  }
  .push-8\@mobile {
    left: 66.66667%;
    right: auto;
  }
  .pull-8\@mobile {
    right: 66.66667%;
    left: auto;
  }
  .prefix-8\@mobile {
    margin-left: 66.66667%;
  }
  .suffix-8\@mobile {
    margin-right: 66.66667%;
  }
  .gr-9\@mobile {
    width: 75%;
  }
  .push-9\@mobile {
    left: 75%;
    right: auto;
  }
  .pull-9\@mobile {
    right: 75%;
    left: auto;
  }
  .prefix-9\@mobile {
    margin-left: 75%;
  }
  .suffix-9\@mobile {
    margin-right: 75%;
  }
  .gr-10\@mobile {
    width: 83.33333%;
  }
  .push-10\@mobile {
    left: 83.33333%;
    right: auto;
  }
  .pull-10\@mobile {
    right: 83.33333%;
    left: auto;
  }
  .prefix-10\@mobile {
    margin-left: 83.33333%;
  }
  .suffix-10\@mobile {
    margin-right: 83.33333%;
  }
  .gr-11\@mobile {
    width: 91.66667%;
  }
  .push-11\@mobile {
    left: 91.66667%;
    right: auto;
  }
  .pull-11\@mobile {
    right: 91.66667%;
    left: auto;
  }
  .prefix-11\@mobile {
    margin-left: 91.66667%;
  }
  .suffix-11\@mobile {
    margin-right: 91.66667%;
  }
  .gr-12\@mobile {
    width: 100%;
  }
  .push-12\@mobile {
    left: 100%;
    right: auto;
  }
  .pull-12\@mobile {
    right: 100%;
    left: auto;
  }
  .prefix-12\@mobile {
    margin-left: 100%;
  }
  .suffix-12\@mobile {
    margin-right: 100%;
  }
  body {
    direction: ltr;
  }
}

@media screen and (min-width: 640px) {
  .gr-0\@tablet {
    width: 0%;
  }
  .push-0\@tablet {
    left: 0%;
    right: auto;
  }
  .pull-0\@tablet {
    right: 0%;
    left: auto;
  }
  .prefix-0\@tablet {
    margin-left: 0%;
  }
  .suffix-0\@tablet {
    margin-right: 0%;
  }
  .gr-1\@tablet {
    width: 8.33333%;
  }
  .push-1\@tablet {
    left: 8.33333%;
    right: auto;
  }
  .pull-1\@tablet {
    right: 8.33333%;
    left: auto;
  }
  .prefix-1\@tablet {
    margin-left: 8.33333%;
  }
  .suffix-1\@tablet {
    margin-right: 8.33333%;
  }
  .gr-2\@tablet {
    width: 16.66667%;
  }
  .push-2\@tablet {
    left: 16.66667%;
    right: auto;
  }
  .pull-2\@tablet {
    right: 16.66667%;
    left: auto;
  }
  .prefix-2\@tablet {
    margin-left: 16.66667%;
  }
  .suffix-2\@tablet {
    margin-right: 16.66667%;
  }
  .gr-3\@tablet {
    width: 25%;
  }
  .push-3\@tablet {
    left: 25%;
    right: auto;
  }
  .pull-3\@tablet {
    right: 25%;
    left: auto;
  }
  .prefix-3\@tablet {
    margin-left: 25%;
  }
  .suffix-3\@tablet {
    margin-right: 25%;
  }
  .gr-4\@tablet {
    width: 33.33333%;
  }
  .push-4\@tablet {
    left: 33.33333%;
    right: auto;
  }
  .pull-4\@tablet {
    right: 33.33333%;
    left: auto;
  }
  .prefix-4\@tablet {
    margin-left: 33.33333%;
  }
  .suffix-4\@tablet {
    margin-right: 33.33333%;
  }
  .gr-5\@tablet {
    width: 41.66667%;
  }
  .push-5\@tablet {
    left: 41.66667%;
    right: auto;
  }
  .pull-5\@tablet {
    right: 41.66667%;
    left: auto;
  }
  .prefix-5\@tablet {
    margin-left: 41.66667%;
  }
  .suffix-5\@tablet {
    margin-right: 41.66667%;
  }
  .gr-6\@tablet {
    width: 50%;
  }
  .push-6\@tablet {
    left: 50%;
    right: auto;
  }
  .pull-6\@tablet {
    right: 50%;
    left: auto;
  }
  .prefix-6\@tablet {
    margin-left: 50%;
  }
  .suffix-6\@tablet {
    margin-right: 50%;
  }
  .gr-7\@tablet {
    width: 58.33333%;
  }
  .push-7\@tablet {
    left: 58.33333%;
    right: auto;
  }
  .pull-7\@tablet {
    right: 58.33333%;
    left: auto;
  }
  .prefix-7\@tablet {
    margin-left: 58.33333%;
  }
  .suffix-7\@tablet {
    margin-right: 58.33333%;
  }
  .gr-8\@tablet {
    width: 66.66667%;
  }
  .push-8\@tablet {
    left: 66.66667%;
    right: auto;
  }
  .pull-8\@tablet {
    right: 66.66667%;
    left: auto;
  }
  .prefix-8\@tablet {
    margin-left: 66.66667%;
  }
  .suffix-8\@tablet {
    margin-right: 66.66667%;
  }
  .gr-9\@tablet {
    width: 75%;
  }
  .push-9\@tablet {
    left: 75%;
    right: auto;
  }
  .pull-9\@tablet {
    right: 75%;
    left: auto;
  }
  .prefix-9\@tablet {
    margin-left: 75%;
  }
  .suffix-9\@tablet {
    margin-right: 75%;
  }
  .gr-10\@tablet {
    width: 83.33333%;
  }
  .push-10\@tablet {
    left: 83.33333%;
    right: auto;
  }
  .pull-10\@tablet {
    right: 83.33333%;
    left: auto;
  }
  .prefix-10\@tablet {
    margin-left: 83.33333%;
  }
  .suffix-10\@tablet {
    margin-right: 83.33333%;
  }
  .gr-11\@tablet {
    width: 91.66667%;
  }
  .push-11\@tablet {
    left: 91.66667%;
    right: auto;
  }
  .pull-11\@tablet {
    right: 91.66667%;
    left: auto;
  }
  .prefix-11\@tablet {
    margin-left: 91.66667%;
  }
  .suffix-11\@tablet {
    margin-right: 91.66667%;
  }
  .gr-12\@tablet {
    width: 100%;
  }
  .push-12\@tablet {
    left: 100%;
    right: auto;
  }
  .pull-12\@tablet {
    right: 100%;
    left: auto;
  }
  .prefix-12\@tablet {
    margin-left: 100%;
  }
  .suffix-12\@tablet {
    margin-right: 100%;
  }
  body {
    direction: ltr;
  }
}

@media screen and (min-width: 992px) {
  .gr-0\@desktop {
    width: 0%;
  }
  .push-0\@desktop {
    left: 0%;
    right: auto;
  }
  .pull-0\@desktop {
    right: 0%;
    left: auto;
  }
  .prefix-0\@desktop {
    margin-left: 0%;
  }
  .suffix-0\@desktop {
    margin-right: 0%;
  }
  .gr-1\@desktop {
    width: 8.33333%;
  }
  .push-1\@desktop {
    left: 8.33333%;
    right: auto;
  }
  .pull-1\@desktop {
    right: 8.33333%;
    left: auto;
  }
  .prefix-1\@desktop {
    margin-left: 8.33333%;
  }
  .suffix-1\@desktop {
    margin-right: 8.33333%;
  }
  .gr-2\@desktop {
    width: 16.66667%;
  }
  .push-2\@desktop {
    left: 16.66667%;
    right: auto;
  }
  .pull-2\@desktop {
    right: 16.66667%;
    left: auto;
  }
  .prefix-2\@desktop {
    margin-left: 16.66667%;
  }
  .suffix-2\@desktop {
    margin-right: 16.66667%;
  }
  .gr-3\@desktop {
    width: 25%;
  }
  .push-3\@desktop {
    left: 25%;
    right: auto;
  }
  .pull-3\@desktop {
    right: 25%;
    left: auto;
  }
  .prefix-3\@desktop {
    margin-left: 25%;
  }
  .suffix-3\@desktop {
    margin-right: 25%;
  }
  .gr-4\@desktop {
    width: 33.33333%;
  }
  .push-4\@desktop {
    left: 33.33333%;
    right: auto;
  }
  .pull-4\@desktop {
    right: 33.33333%;
    left: auto;
  }
  .prefix-4\@desktop {
    margin-left: 33.33333%;
  }
  .suffix-4\@desktop {
    margin-right: 33.33333%;
  }
  .gr-5\@desktop {
    width: 41.66667%;
  }
  .push-5\@desktop {
    left: 41.66667%;
    right: auto;
  }
  .pull-5\@desktop {
    right: 41.66667%;
    left: auto;
  }
  .prefix-5\@desktop {
    margin-left: 41.66667%;
  }
  .suffix-5\@desktop {
    margin-right: 41.66667%;
  }
  .gr-6\@desktop {
    width: 50%;
  }
  .push-6\@desktop {
    left: 50%;
    right: auto;
  }
  .pull-6\@desktop {
    right: 50%;
    left: auto;
  }
  .prefix-6\@desktop {
    margin-left: 50%;
  }
  .suffix-6\@desktop {
    margin-right: 50%;
  }
  .gr-7\@desktop {
    width: 58.33333%;
  }
  .push-7\@desktop {
    left: 58.33333%;
    right: auto;
  }
  .pull-7\@desktop {
    right: 58.33333%;
    left: auto;
  }
  .prefix-7\@desktop {
    margin-left: 58.33333%;
  }
  .suffix-7\@desktop {
    margin-right: 58.33333%;
  }
  .gr-8\@desktop {
    width: 66.66667%;
  }
  .push-8\@desktop {
    left: 66.66667%;
    right: auto;
  }
  .pull-8\@desktop {
    right: 66.66667%;
    left: auto;
  }
  .prefix-8\@desktop {
    margin-left: 66.66667%;
  }
  .suffix-8\@desktop {
    margin-right: 66.66667%;
  }
  .gr-9\@desktop {
    width: 75%;
  }
  .push-9\@desktop {
    left: 75%;
    right: auto;
  }
  .pull-9\@desktop {
    right: 75%;
    left: auto;
  }
  .prefix-9\@desktop {
    margin-left: 75%;
  }
  .suffix-9\@desktop {
    margin-right: 75%;
  }
  .gr-10\@desktop {
    width: 83.33333%;
  }
  .push-10\@desktop {
    left: 83.33333%;
    right: auto;
  }
  .pull-10\@desktop {
    right: 83.33333%;
    left: auto;
  }
  .prefix-10\@desktop {
    margin-left: 83.33333%;
  }
  .suffix-10\@desktop {
    margin-right: 83.33333%;
  }
  .gr-11\@desktop {
    width: 91.66667%;
  }
  .push-11\@desktop {
    left: 91.66667%;
    right: auto;
  }
  .pull-11\@desktop {
    right: 91.66667%;
    left: auto;
  }
  .prefix-11\@desktop {
    margin-left: 91.66667%;
  }
  .suffix-11\@desktop {
    margin-right: 91.66667%;
  }
  .gr-12\@desktop {
    width: 100%;
  }
  .push-12\@desktop {
    left: 100%;
    right: auto;
  }
  .pull-12\@desktop {
    right: 100%;
    left: auto;
  }
  .prefix-12\@desktop {
    margin-left: 100%;
  }
  .suffix-12\@desktop {
    margin-right: 100%;
  }
  body {
    direction: ltr;
  }
}

@media screen and (min-width: 1200px) {
  .gr-0\@large {
    width: 0%;
  }
  .push-0\@large {
    left: 0%;
    right: auto;
  }
  .pull-0\@large {
    right: 0%;
    left: auto;
  }
  .prefix-0\@large {
    margin-left: 0%;
  }
  .suffix-0\@large {
    margin-right: 0%;
  }
  .gr-1\@large {
    width: 8.33333%;
  }
  .push-1\@large {
    left: 8.33333%;
    right: auto;
  }
  .pull-1\@large {
    right: 8.33333%;
    left: auto;
  }
  .prefix-1\@large {
    margin-left: 8.33333%;
  }
  .suffix-1\@large {
    margin-right: 8.33333%;
  }
  .gr-2\@large {
    width: 16.66667%;
  }
  .push-2\@large {
    left: 16.66667%;
    right: auto;
  }
  .pull-2\@large {
    right: 16.66667%;
    left: auto;
  }
  .prefix-2\@large {
    margin-left: 16.66667%;
  }
  .suffix-2\@large {
    margin-right: 16.66667%;
  }
  .gr-3\@large {
    width: 25%;
  }
  .push-3\@large {
    left: 25%;
    right: auto;
  }
  .pull-3\@large {
    right: 25%;
    left: auto;
  }
  .prefix-3\@large {
    margin-left: 25%;
  }
  .suffix-3\@large {
    margin-right: 25%;
  }
  .gr-4\@large {
    width: 33.33333%;
  }
  .push-4\@large {
    left: 33.33333%;
    right: auto;
  }
  .pull-4\@large {
    right: 33.33333%;
    left: auto;
  }
  .prefix-4\@large {
    margin-left: 33.33333%;
  }
  .suffix-4\@large {
    margin-right: 33.33333%;
  }
  .gr-5\@large {
    width: 41.66667%;
  }
  .push-5\@large {
    left: 41.66667%;
    right: auto;
  }
  .pull-5\@large {
    right: 41.66667%;
    left: auto;
  }
  .prefix-5\@large {
    margin-left: 41.66667%;
  }
  .suffix-5\@large {
    margin-right: 41.66667%;
  }
  .gr-6\@large {
    width: 50%;
  }
  .push-6\@large {
    left: 50%;
    right: auto;
  }
  .pull-6\@large {
    right: 50%;
    left: auto;
  }
  .prefix-6\@large {
    margin-left: 50%;
  }
  .suffix-6\@large {
    margin-right: 50%;
  }
  .gr-7\@large {
    width: 58.33333%;
  }
  .push-7\@large {
    left: 58.33333%;
    right: auto;
  }
  .pull-7\@large {
    right: 58.33333%;
    left: auto;
  }
  .prefix-7\@large {
    margin-left: 58.33333%;
  }
  .suffix-7\@large {
    margin-right: 58.33333%;
  }
  .gr-8\@large {
    width: 66.66667%;
  }
  .push-8\@large {
    left: 66.66667%;
    right: auto;
  }
  .pull-8\@large {
    right: 66.66667%;
    left: auto;
  }
  .prefix-8\@large {
    margin-left: 66.66667%;
  }
  .suffix-8\@large {
    margin-right: 66.66667%;
  }
  .gr-9\@large {
    width: 75%;
  }
  .push-9\@large {
    left: 75%;
    right: auto;
  }
  .pull-9\@large {
    right: 75%;
    left: auto;
  }
  .prefix-9\@large {
    margin-left: 75%;
  }
  .suffix-9\@large {
    margin-right: 75%;
  }
  .gr-10\@large {
    width: 83.33333%;
  }
  .push-10\@large {
    left: 83.33333%;
    right: auto;
  }
  .pull-10\@large {
    right: 83.33333%;
    left: auto;
  }
  .prefix-10\@large {
    margin-left: 83.33333%;
  }
  .suffix-10\@large {
    margin-right: 83.33333%;
  }
  .gr-11\@large {
    width: 91.66667%;
  }
  .push-11\@large {
    left: 91.66667%;
    right: auto;
  }
  .pull-11\@large {
    right: 91.66667%;
    left: auto;
  }
  .prefix-11\@large {
    margin-left: 91.66667%;
  }
  .suffix-11\@large {
    margin-right: 91.66667%;
  }
  .gr-12\@large {
    width: 100%;
  }
  .push-12\@large {
    left: 100%;
    right: auto;
  }
  .pull-12\@large {
    right: 100%;
    left: auto;
  }
  .prefix-12\@large {
    margin-left: 100%;
  }
  .suffix-12\@large {
    margin-right: 100%;
  }
  body {
    direction: ltr;
  }
}

.float-left {
  float: left;
}

.float-right {
  float: right;
}

.clear {
  clear: both;
}

.clear-left {
  clear: left;
}

.clear-right {
  clear: right;
}

.auto-height {
  height: inherit;
  min-height: inherit;
  max-height: inherit;
}

.row {
  padding-left: 0 !important;
  padding-right: 0 !important;
  margin-left: -15px;
  margin-right: -15px;
}

[class*="no-gutter"] > .row {
  margin-left: 0 !important;
  margin-right: 0 !important;
}

.row-reverse {
  padding-left: 0 !important;
  padding-right: 0 !important;
  margin-left: -15px;
  margin-right: -15px;
  transform: rotateY(180deg);
}

.row-reverse > [class*="gr-"] {
  transform: rotateY(-180deg);
}

[class*="no-gutter"] > .row-reverse {
  margin-left: 0 !important;
  margin-right: 0 !important;
}

.row-full {
  width: 100vw;
  margin-left: 50% !important;
  margin-right: 0 !important;
  -webkit-transform: translateX(-50%);
  -moz-transition: translateX(-50%);
  -ms-transform: translateX(-50%);
  -o-transform: translateX(-50%);
  transform: translateX(-50%);
}

.col {
  padding-left: 0 !important;
  padding-right: 0 !important;
  margin-left: -15px;
  margin-right: -15px;
}

.col-reverse {
  padding-left: 0 !important;
  padding-right: 0 !important;
  margin-left: -15px;
  margin-right: -15px;
  transform: rotateX(180deg);
}

.col-reverse > [class*="gr-"] {
  transform: rotateX(-180deg);
}

.gr-table {
  display: table-cell;
  float: none;
  vertical-align: top;
}

.row-no-gutter {
  margin-left: 0;
  margin-right: 0;
}

.row-no-gutter > [class*="gr-"] {
  padding-top: 0;
  padding-right: 0;
  padding-bottom: 0;
  padding-left: 0;
}

.row-no-gutter-top {
  margin-left: 0;
  margin-right: 0;
}

.row-no-gutter-top > [class*="gr-"] {
  padding-top: 0;
}

.row-no-gutter-right {
  margin-left: 0;
  margin-right: 0;
}

.row-no-gutter-right > [class*="gr-"] {
  padding-right: 0;
}

.row-no-gutter-bottom {
  margin-left: 0;
  margin-right: 0;
}

.row-no-gutter-bottom > [class*="gr-"] {
  padding-bottom: 0;
}

.row-no-gutter-left {
  margin-left: 0;
  margin-right: 0;
}

.row-no-gutter-left > [class*="gr-"] {
  padding-left: 0;
}

.row-align-left {
  font-size: 0;
  word-spacing: 0;
  letter-spacing: 0;
  clear: both;
  text-align: left;
}

.row-align-left > * {
  word-spacing: normal;
  letter-spacing: normal;
  float: none !important;
  vertical-align: top;
  font-size: 1rem;
}

.row-align-center {
  font-size: 0;
  word-spacing: 0;
  letter-spacing: 0;
  clear: both;
  text-align: center;
}

.row-align-center > * {
  word-spacing: normal;
  letter-spacing: normal;
  float: none !important;
  vertical-align: top;
  font-size: 1rem;
}

.row-align-center > * {
  text-align: left;
}

.row-align-right {
  font-size: 0;
  word-spacing: 0;
  letter-spacing: 0;
  clear: both;
  text-align: right;
}

.row-align-right > * {
  word-spacing: normal;
  letter-spacing: normal;
  float: none !important;
  vertical-align: top;
  font-size: 1rem;
}

.row-align-right > * {
  text-align: left;
}

.row-align-middle {
  font-size: 0;
  word-spacing: 0;
  letter-spacing: 0;
  clear: both;
  vertical-align: middle;
}

.row-align-middle > * {
  word-spacing: normal;
  letter-spacing: normal;
  float: none !important;
  vertical-align: middle;
  font-size: 1rem;
}

.row-align-top {
  font-size: 0;
  word-spacing: 0;
  letter-spacing: 0;
  clear: both;
  vertical-align: top;
}

.row-align-top > * {
  word-spacing: normal;
  letter-spacing: normal;
  float: none !important;
  vertical-align: top;
  font-size: 1rem;
}

.row-align-bottom {
  font-size: 0;
  word-spacing: 0;
  letter-spacing: 0;
  clear: both;
  vertical-align: bottom;
}

.row-align-bottom > * {
  word-spacing: normal;
  letter-spacing: normal;
  float: none !important;
  vertical-align: bottom;
  font-size: 1rem;
}

.no-gutter {
  padding-top: 0;
  padding-right: 0;
  padding-bottom: 0;
  padding-left: 0;
}

.no-gutter-left {
  padding-left: 0;
}

.no-gutter-right {
  padding-right: 0;
}

.no-gutter-top {
  padding-top: 0;
}

.no-gutter-bottom {
  padding-bottom: 0;
}

.gutter {
  padding-right: 15px;
  padding-left: 15px;
}

.gutter-left {
  padding-left: 15px;
}

.gutter-right {
  padding-right: 15px;
}

.hide {
  display: none !important;
}

.not-visible {
  visibility: hidden;
}

.show {
  display: block !important;
}

.show-inline {
  display: inline-block !important;
}

.visible {
  visibility: visible;
}

.row-debug {
  position: relative;
  z-index: 99999;
  overflow: hidden;
}

.row-debug:before {
  pointer-events: none;
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 99999px;
  background: linear-gradient(to right, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.02) 50%);
  background-size: 16.66667% 100%;
  z-index: 99999;
}

@media screen and (min-width: 320px) {
  .float-left\@mobile {
    float: left;
  }
  .float-right\@mobile {
    float: right;
  }
  .clear\@mobile {
    clear: both;
  }
  .clear-left\@mobile {
    clear: left;
  }
  .clear-right\@mobile {
    clear: right;
  }
  .auto-height\@mobile {
    height: inherit;
    min-height: inherit;
    max-height: inherit;
  }
  .row\@mobile {
    padding-left: 0 !important;
    padding-right: 0 !important;
    margin-left: -15px;
    margin-right: -15px;
  }
  [class*="no-gutter"] > .row\@mobile {
    margin-left: 0 !important;
    margin-right: 0 !important;
  }
  .row-reverse\@mobile {
    padding-left: 0 !important;
    padding-right: 0 !important;
    margin-left: -15px;
    margin-right: -15px;
    transform: rotateY(180deg);
  }
  .row-reverse\@mobile > [class*="gr-"] {
    transform: rotateY(-180deg);
  }
  [class*="no-gutter"] > .row-reverse\@mobile {
    margin-left: 0 !important;
    margin-right: 0 !important;
  }
  .row-full\@mobile {
    width: 100vw;
    margin-left: 50% !important;
    margin-right: 0 !important;
    -webkit-transform: translateX(-50%);
    -moz-transition: translateX(-50%);
    -ms-transform: translateX(-50%);
    -o-transform: translateX(-50%);
    transform: translateX(-50%);
  }
  .col\@mobile {
    padding-left: 0 !important;
    padding-right: 0 !important;
    margin-left: -15px;
    margin-right: -15px;
  }
  .col-reverse\@mobile {
    padding-left: 0 !important;
    padding-right: 0 !important;
    margin-left: -15px;
    margin-right: -15px;
    transform: rotateX(180deg);
  }
  .col-reverse\@mobile > [class*="gr-"] {
    transform: rotateX(-180deg);
  }
  .gr-table\@mobile {
    display: table-cell;
    float: none;
    vertical-align: top;
  }
  .row-no-gutter\@mobile {
    margin-left: 0;
    margin-right: 0;
  }
  .row-no-gutter\@mobile > [class*="gr-"] {
    padding-top: 0;
    padding-right: 0;
    padding-bottom: 0;
    padding-left: 0;
  }
  .row-no-gutter-top\@mobile {
    margin-left: 0;
    margin-right: 0;
  }
  .row-no-gutter-top\@mobile > [class*="gr-"] {
    padding-top: 0;
  }
  .row-no-gutter-right\@mobile {
    margin-left: 0;
    margin-right: 0;
  }
  .row-no-gutter-right\@mobile > [class*="gr-"] {
    padding-right: 0;
  }
  .row-no-gutter-bottom\@mobile {
    margin-left: 0;
    margin-right: 0;
  }
  .row-no-gutter-bottom\@mobile > [class*="gr-"] {
    padding-bottom: 0;
  }
  .row-no-gutter-left\@mobile {
    margin-left: 0;
    margin-right: 0;
  }
  .row-no-gutter-left\@mobile > [class*="gr-"] {
    padding-left: 0;
  }
  .row-align-left\@mobile {
    font-size: 0;
    word-spacing: 0;
    letter-spacing: 0;
    clear: both;
    text-align: left;
  }
  .row-align-left\@mobile > * {
    word-spacing: normal;
    letter-spacing: normal;
    float: none !important;
    vertical-align: top;
    font-size: 1rem;
  }
  .row-align-center\@mobile {
    font-size: 0;
    word-spacing: 0;
    letter-spacing: 0;
    clear: both;
    text-align: center;
  }
  .row-align-center\@mobile > * {
    word-spacing: normal;
    letter-spacing: normal;
    float: none !important;
    vertical-align: top;
    font-size: 1rem;
  }
  .row-align-center\@mobile > * {
    text-align: left;
  }
  .row-align-right\@mobile {
    font-size: 0;
    word-spacing: 0;
    letter-spacing: 0;
    clear: both;
    text-align: right;
  }
  .row-align-right\@mobile > * {
    word-spacing: normal;
    letter-spacing: normal;
    float: none !important;
    vertical-align: top;
    font-size: 1rem;
  }
  .row-align-right\@mobile > * {
    text-align: left;
  }
  .row-align-middle\@mobile {
    font-size: 0;
    word-spacing: 0;
    letter-spacing: 0;
    clear: both;
    vertical-align: middle;
  }
  .row-align-middle\@mobile > * {
    word-spacing: normal;
    letter-spacing: normal;
    float: none !important;
    vertical-align: middle;
    font-size: 1rem;
  }
  .row-align-top\@mobile {
    font-size: 0;
    word-spacing: 0;
    letter-spacing: 0;
    clear: both;
    vertical-align: top;
  }
  .row-align-top\@mobile > * {
    word-spacing: normal;
    letter-spacing: normal;
    float: none !important;
    vertical-align: top;
    font-size: 1rem;
  }
  .row-align-bottom\@mobile {
    font-size: 0;
    word-spacing: 0;
    letter-spacing: 0;
    clear: both;
    vertical-align: bottom;
  }
  .row-align-bottom\@mobile > * {
    word-spacing: normal;
    letter-spacing: normal;
    float: none !important;
    vertical-align: bottom;
    font-size: 1rem;
  }
  .no-gutter\@mobile {
    padding-top: 0;
    padding-right: 0;
    padding-bottom: 0;
    padding-left: 0;
  }
  .no-gutter-left\@mobile {
    padding-left: 0;
  }
  .no-gutter-right\@mobile {
    padding-right: 0;
  }
  .no-gutter-top\@mobile {
    padding-top: 0;
  }
  .no-gutter-bottom\@mobile {
    padding-bottom: 0;
  }
  .gutter\@mobile {
    padding-right: 15px;
    padding-left: 15px;
  }
  .gutter-left\@mobile {
    padding-left: 15px;
  }
  .gutter-right\@mobile {
    padding-right: 15px;
  }
  .hide\@mobile {
    display: none !important;
  }
  .not-visible\@mobile {
    visibility: hidden;
  }
  .show\@mobile {
    display: block !important;
  }
  .show-inline\@mobile {
    display: inline-block !important;
  }
  .visible\@mobile {
    visibility: visible;
  }
  .row-debug\@mobile {
    position: relative;
    z-index: 99999;
    overflow: hidden;
  }
  .row-debug\@mobile:before {
    pointer-events: none;
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 99999px;
    background: linear-gradient(to right, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.02) 50%);
    background-size: 16.66667% 100%;
    z-index: 99999;
  }
}

@media screen and (min-width: 640px) {
  .float-left\@tablet {
    float: left;
  }
  .float-right\@tablet {
    float: right;
  }
  .clear\@tablet {
    clear: both;
  }
  .clear-left\@tablet {
    clear: left;
  }
  .clear-right\@tablet {
    clear: right;
  }
  .auto-height\@tablet {
    height: inherit;
    min-height: inherit;
    max-height: inherit;
  }
  .row\@tablet {
    padding-left: 0 !important;
    padding-right: 0 !important;
    margin-left: -15px;
    margin-right: -15px;
  }
  [class*="no-gutter"] > .row\@tablet {
    margin-left: 0 !important;
    margin-right: 0 !important;
  }
  .row-reverse\@tablet {
    padding-left: 0 !important;
    padding-right: 0 !important;
    margin-left: -15px;
    margin-right: -15px;
    transform: rotateY(180deg);
  }
  .row-reverse\@tablet > [class*="gr-"] {
    transform: rotateY(-180deg);
  }
  [class*="no-gutter"] > .row-reverse\@tablet {
    margin-left: 0 !important;
    margin-right: 0 !important;
  }
  .row-full\@tablet {
    width: 100vw;
    margin-left: 50% !important;
    margin-right: 0 !important;
    -webkit-transform: translateX(-50%);
    -moz-transition: translateX(-50%);
    -ms-transform: translateX(-50%);
    -o-transform: translateX(-50%);
    transform: translateX(-50%);
  }
  .col\@tablet {
    padding-left: 0 !important;
    padding-right: 0 !important;
    margin-left: -15px;
    margin-right: -15px;
  }
  .col-reverse\@tablet {
    padding-left: 0 !important;
    padding-right: 0 !important;
    margin-left: -15px;
    margin-right: -15px;
    transform: rotateX(180deg);
  }
  .col-reverse\@tablet > [class*="gr-"] {
    transform: rotateX(-180deg);
  }
  .gr-table\@tablet {
    display: table-cell;
    float: none;
    vertical-align: top;
  }
  .row-no-gutter\@tablet {
    margin-left: 0;
    margin-right: 0;
  }
  .row-no-gutter\@tablet > [class*="gr-"] {
    padding-top: 0;
    padding-right: 0;
    padding-bottom: 0;
    padding-left: 0;
  }
  .row-no-gutter-top\@tablet {
    margin-left: 0;
    margin-right: 0;
  }
  .row-no-gutter-top\@tablet > [class*="gr-"] {
    padding-top: 0;
  }
  .row-no-gutter-right\@tablet {
    margin-left: 0;
    margin-right: 0;
  }
  .row-no-gutter-right\@tablet > [class*="gr-"] {
    padding-right: 0;
  }
  .row-no-gutter-bottom\@tablet {
    margin-left: 0;
    margin-right: 0;
  }
  .row-no-gutter-bottom\@tablet > [class*="gr-"] {
    padding-bottom: 0;
  }
  .row-no-gutter-left\@tablet {
    margin-left: 0;
    margin-right: 0;
  }
  .row-no-gutter-left\@tablet > [class*="gr-"] {
    padding-left: 0;
  }
  .row-align-left\@tablet {
    font-size: 0;
    word-spacing: 0;
    letter-spacing: 0;
    clear: both;
    text-align: left;
  }
  .row-align-left\@tablet > * {
    word-spacing: normal;
    letter-spacing: normal;
    float: none !important;
    vertical-align: top;
    font-size: 1rem;
  }
  .row-align-center\@tablet {
    font-size: 0;
    word-spacing: 0;
    letter-spacing: 0;
    clear: both;
    text-align: center;
  }
  .row-align-center\@tablet > * {
    word-spacing: normal;
    letter-spacing: normal;
    float: none !important;
    vertical-align: top;
    font-size: 1rem;
  }
  .row-align-center\@tablet > * {
    text-align: left;
  }
  .row-align-right\@tablet {
    font-size: 0;
    word-spacing: 0;
    letter-spacing: 0;
    clear: both;
    text-align: right;
  }
  .row-align-right\@tablet > * {
    word-spacing: normal;
    letter-spacing: normal;
    float: none !important;
    vertical-align: top;
    font-size: 1rem;
  }
  .row-align-right\@tablet > * {
    text-align: left;
  }
  .row-align-middle\@tablet {
    font-size: 0;
    word-spacing: 0;
    letter-spacing: 0;
    clear: both;
    vertical-align: middle;
  }
  .row-align-middle\@tablet > * {
    word-spacing: normal;
    letter-spacing: normal;
    float: none !important;
    vertical-align: middle;
    font-size: 1rem;
  }
  .row-align-top\@tablet {
    font-size: 0;
    word-spacing: 0;
    letter-spacing: 0;
    clear: both;
    vertical-align: top;
  }
  .row-align-top\@tablet > * {
    word-spacing: normal;
    letter-spacing: normal;
    float: none !important;
    vertical-align: top;
    font-size: 1rem;
  }
  .row-align-bottom\@tablet {
    font-size: 0;
    word-spacing: 0;
    letter-spacing: 0;
    clear: both;
    vertical-align: bottom;
  }
  .row-align-bottom\@tablet > * {
    word-spacing: normal;
    letter-spacing: normal;
    float: none !important;
    vertical-align: bottom;
    font-size: 1rem;
  }
  .no-gutter\@tablet {
    padding-top: 0;
    padding-right: 0;
    padding-bottom: 0;
    padding-left: 0;
  }
  .no-gutter-left\@tablet {
    padding-left: 0;
  }
  .no-gutter-right\@tablet {
    padding-right: 0;
  }
  .no-gutter-top\@tablet {
    padding-top: 0;
  }
  .no-gutter-bottom\@tablet {
    padding-bottom: 0;
  }
  .gutter\@tablet {
    padding-right: 15px;
    padding-left: 15px;
  }
  .gutter-left\@tablet {
    padding-left: 15px;
  }
  .gutter-right\@tablet {
    padding-right: 15px;
  }
  .hide\@tablet {
    display: none !important;
  }
  .not-visible\@tablet {
    visibility: hidden;
  }
  .show\@tablet {
    display: block !important;
  }
  .show-inline\@tablet {
    display: inline-block !important;
  }
  .visible\@tablet {
    visibility: visible;
  }
  .row-debug\@tablet {
    position: relative;
    z-index: 99999;
    overflow: hidden;
  }
  .row-debug\@tablet:before {
    pointer-events: none;
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 99999px;
    background: linear-gradient(to right, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.02) 50%);
    background-size: 16.66667% 100%;
    z-index: 99999;
  }
}

@media screen and (min-width: 992px) {
  .float-left\@desktop {
    float: left;
  }
  .float-right\@desktop {
    float: right;
  }
  .clear\@desktop {
    clear: both;
  }
  .clear-left\@desktop {
    clear: left;
  }
  .clear-right\@desktop {
    clear: right;
  }
  .auto-height\@desktop {
    height: inherit;
    min-height: inherit;
    max-height: inherit;
  }
  .row\@desktop {
    padding-left: 0 !important;
    padding-right: 0 !important;
    margin-left: -15px;
    margin-right: -15px;
  }
  [class*="no-gutter"] > .row\@desktop {
    margin-left: 0 !important;
    margin-right: 0 !important;
  }
  .row-reverse\@desktop {
    padding-left: 0 !important;
    padding-right: 0 !important;
    margin-left: -15px;
    margin-right: -15px;
    transform: rotateY(180deg);
  }
  .row-reverse\@desktop > [class*="gr-"] {
    transform: rotateY(-180deg);
  }
  [class*="no-gutter"] > .row-reverse\@desktop {
    margin-left: 0 !important;
    margin-right: 0 !important;
  }
  .row-full\@desktop {
    width: 100vw;
    margin-left: 50% !important;
    margin-right: 0 !important;
    -webkit-transform: translateX(-50%);
    -moz-transition: translateX(-50%);
    -ms-transform: translateX(-50%);
    -o-transform: translateX(-50%);
    transform: translateX(-50%);
  }
  .col\@desktop {
    padding-left: 0 !important;
    padding-right: 0 !important;
    margin-left: -15px;
    margin-right: -15px;
  }
  .col-reverse\@desktop {
    padding-left: 0 !important;
    padding-right: 0 !important;
    margin-left: -15px;
    margin-right: -15px;
    transform: rotateX(180deg);
  }
  .col-reverse\@desktop > [class*="gr-"] {
    transform: rotateX(-180deg);
  }
  .gr-table\@desktop {
    display: table-cell;
    float: none;
    vertical-align: top;
  }
  .row-no-gutter\@desktop {
    margin-left: 0;
    margin-right: 0;
  }
  .row-no-gutter\@desktop > [class*="gr-"] {
    padding-top: 0;
    padding-right: 0;
    padding-bottom: 0;
    padding-left: 0;
  }
  .row-no-gutter-top\@desktop {
    margin-left: 0;
    margin-right: 0;
  }
  .row-no-gutter-top\@desktop > [class*="gr-"] {
    padding-top: 0;
  }
  .row-no-gutter-right\@desktop {
    margin-left: 0;
    margin-right: 0;
  }
  .row-no-gutter-right\@desktop > [class*="gr-"] {
    padding-right: 0;
  }
  .row-no-gutter-bottom\@desktop {
    margin-left: 0;
    margin-right: 0;
  }
  .row-no-gutter-bottom\@desktop > [class*="gr-"] {
    padding-bottom: 0;
  }
  .row-no-gutter-left\@desktop {
    margin-left: 0;
    margin-right: 0;
  }
  .row-no-gutter-left\@desktop > [class*="gr-"] {
    padding-left: 0;
  }
  .row-align-left\@desktop {
    font-size: 0;
    word-spacing: 0;
    letter-spacing: 0;
    clear: both;
    text-align: left;
  }
  .row-align-left\@desktop > * {
    word-spacing: normal;
    letter-spacing: normal;
    float: none !important;
    vertical-align: top;
    font-size: 1rem;
  }
  .row-align-center\@desktop {
    font-size: 0;
    word-spacing: 0;
    letter-spacing: 0;
    clear: both;
    text-align: center;
  }
  .row-align-center\@desktop > * {
    word-spacing: normal;
    letter-spacing: normal;
    float: none !important;
    vertical-align: top;
    font-size: 1rem;
  }
  .row-align-center\@desktop > * {
    text-align: left;
  }
  .row-align-right\@desktop {
    font-size: 0;
    word-spacing: 0;
    letter-spacing: 0;
    clear: both;
    text-align: right;
  }
  .row-align-right\@desktop > * {
    word-spacing: normal;
    letter-spacing: normal;
    float: none !important;
    vertical-align: top;
    font-size: 1rem;
  }
  .row-align-right\@desktop > * {
    text-align: left;
  }
  .row-align-middle\@desktop {
    font-size: 0;
    word-spacing: 0;
    letter-spacing: 0;
    clear: both;
    vertical-align: middle;
  }
  .row-align-middle\@desktop > * {
    word-spacing: normal;
    letter-spacing: normal;
    float: none !important;
    vertical-align: middle;
    font-size: 1rem;
  }
  .row-align-top\@desktop {
    font-size: 0;
    word-spacing: 0;
    letter-spacing: 0;
    clear: both;
    vertical-align: top;
  }
  .row-align-top\@desktop > * {
    word-spacing: normal;
    letter-spacing: normal;
    float: none !important;
    vertical-align: top;
    font-size: 1rem;
  }
  .row-align-bottom\@desktop {
    font-size: 0;
    word-spacing: 0;
    letter-spacing: 0;
    clear: both;
    vertical-align: bottom;
  }
  .row-align-bottom\@desktop > * {
    word-spacing: normal;
    letter-spacing: normal;
    float: none !important;
    vertical-align: bottom;
    font-size: 1rem;
  }
  .no-gutter\@desktop {
    padding-top: 0;
    padding-right: 0;
    padding-bottom: 0;
    padding-left: 0;
  }
  .no-gutter-left\@desktop {
    padding-left: 0;
  }
  .no-gutter-right\@desktop {
    padding-right: 0;
  }
  .no-gutter-top\@desktop {
    padding-top: 0;
  }
  .no-gutter-bottom\@desktop {
    padding-bottom: 0;
  }
  .gutter\@desktop {
    padding-right: 15px;
    padding-left: 15px;
  }
  .gutter-left\@desktop {
    padding-left: 15px;
  }
  .gutter-right\@desktop {
    padding-right: 15px;
  }
  .hide\@desktop {
    display: none !important;
  }
  .not-visible\@desktop {
    visibility: hidden;
  }
  .show\@desktop {
    display: block !important;
  }
  .show-inline\@desktop {
    display: inline-block !important;
  }
  .visible\@desktop {
    visibility: visible;
  }
  .row-debug\@desktop {
    position: relative;
    z-index: 99999;
    overflow: hidden;
  }
  .row-debug\@desktop:before {
    pointer-events: none;
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 99999px;
    background: linear-gradient(to right, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.02) 50%);
    background-size: 16.66667% 100%;
    z-index: 99999;
  }
}

@media screen and (min-width: 1200px) {
  .float-left\@large {
    float: left;
  }
  .float-right\@large {
    float: right;
  }
  .clear\@large {
    clear: both;
  }
  .clear-left\@large {
    clear: left;
  }
  .clear-right\@large {
    clear: right;
  }
  .auto-height\@large {
    height: inherit;
    min-height: inherit;
    max-height: inherit;
  }
  .row\@large {
    padding-left: 0 !important;
    padding-right: 0 !important;
    margin-left: -15px;
    margin-right: -15px;
  }
  [class*="no-gutter"] > .row\@large {
    margin-left: 0 !important;
    margin-right: 0 !important;
  }
  .row-reverse\@large {
    padding-left: 0 !important;
    padding-right: 0 !important;
    margin-left: -15px;
    margin-right: -15px;
    transform: rotateY(180deg);
  }
  .row-reverse\@large > [class*="gr-"] {
    transform: rotateY(-180deg);
  }
  [class*="no-gutter"] > .row-reverse\@large {
    margin-left: 0 !important;
    margin-right: 0 !important;
  }
  .row-full\@large {
    width: 100vw;
    margin-left: 50% !important;
    margin-right: 0 !important;
    -webkit-transform: translateX(-50%);
    -moz-transition: translateX(-50%);
    -ms-transform: translateX(-50%);
    -o-transform: translateX(-50%);
    transform: translateX(-50%);
  }
  .col\@large {
    padding-left: 0 !important;
    padding-right: 0 !important;
    margin-left: -15px;
    margin-right: -15px;
  }
  .col-reverse\@large {
    padding-left: 0 !important;
    padding-right: 0 !important;
    margin-left: -15px;
    margin-right: -15px;
    transform: rotateX(180deg);
  }
  .col-reverse\@large > [class*="gr-"] {
    transform: rotateX(-180deg);
  }
  .gr-table\@large {
    display: table-cell;
    float: none;
    vertical-align: top;
  }
  .row-no-gutter\@large {
    margin-left: 0;
    margin-right: 0;
  }
  .row-no-gutter\@large > [class*="gr-"] {
    padding-top: 0;
    padding-right: 0;
    padding-bottom: 0;
    padding-left: 0;
  }
  .row-no-gutter-top\@large {
    margin-left: 0;
    margin-right: 0;
  }
  .row-no-gutter-top\@large > [class*="gr-"] {
    padding-top: 0;
  }
  .row-no-gutter-right\@large {
    margin-left: 0;
    margin-right: 0;
  }
  .row-no-gutter-right\@large > [class*="gr-"] {
    padding-right: 0;
  }
  .row-no-gutter-bottom\@large {
    margin-left: 0;
    margin-right: 0;
  }
  .row-no-gutter-bottom\@large > [class*="gr-"] {
    padding-bottom: 0;
  }
  .row-no-gutter-left\@large {
    margin-left: 0;
    margin-right: 0;
  }
  .row-no-gutter-left\@large > [class*="gr-"] {
    padding-left: 0;
  }
  .row-align-left\@large {
    font-size: 0;
    word-spacing: 0;
    letter-spacing: 0;
    clear: both;
    text-align: left;
  }
  .row-align-left\@large > * {
    word-spacing: normal;
    letter-spacing: normal;
    float: none !important;
    vertical-align: top;
    font-size: 1rem;
  }
  .row-align-center\@large {
    font-size: 0;
    word-spacing: 0;
    letter-spacing: 0;
    clear: both;
    text-align: center;
  }
  .row-align-center\@large > * {
    word-spacing: normal;
    letter-spacing: normal;
    float: none !important;
    vertical-align: top;
    font-size: 1rem;
  }
  .row-align-center\@large > * {
    text-align: left;
  }
  .row-align-right\@large {
    font-size: 0;
    word-spacing: 0;
    letter-spacing: 0;
    clear: both;
    text-align: right;
  }
  .row-align-right\@large > * {
    word-spacing: normal;
    letter-spacing: normal;
    float: none !important;
    vertical-align: top;
    font-size: 1rem;
  }
  .row-align-right\@large > * {
    text-align: left;
  }
  .row-align-middle\@large {
    font-size: 0;
    word-spacing: 0;
    letter-spacing: 0;
    clear: both;
    vertical-align: middle;
  }
  .row-align-middle\@large > * {
    word-spacing: normal;
    letter-spacing: normal;
    float: none !important;
    vertical-align: middle;
    font-size: 1rem;
  }
  .row-align-top\@large {
    font-size: 0;
    word-spacing: 0;
    letter-spacing: 0;
    clear: both;
    vertical-align: top;
  }
  .row-align-top\@large > * {
    word-spacing: normal;
    letter-spacing: normal;
    float: none !important;
    vertical-align: top;
    font-size: 1rem;
  }
  .row-align-bottom\@large {
    font-size: 0;
    word-spacing: 0;
    letter-spacing: 0;
    clear: both;
    vertical-align: bottom;
  }
  .row-align-bottom\@large > * {
    word-spacing: normal;
    letter-spacing: normal;
    float: none !important;
    vertical-align: bottom;
    font-size: 1rem;
  }
  .no-gutter\@large {
    padding-top: 0;
    padding-right: 0;
    padding-bottom: 0;
    padding-left: 0;
  }
  .no-gutter-left\@large {
    padding-left: 0;
  }
  .no-gutter-right\@large {
    padding-right: 0;
  }
  .no-gutter-top\@large {
    padding-top: 0;
  }
  .no-gutter-bottom\@large {
    padding-bottom: 0;
  }
  .gutter\@large {
    padding-right: 15px;
    padding-left: 15px;
  }
  .gutter-left\@large {
    padding-left: 15px;
  }
  .gutter-right\@large {
    padding-right: 15px;
  }
  .hide\@large {
    display: none !important;
  }
  .not-visible\@large {
    visibility: hidden;
  }
  .show\@large {
    display: block !important;
  }
  .show-inline\@large {
    display: inline-block !important;
  }
  .visible\@large {
    visibility: visible;
  }
  .row-debug\@large {
    position: relative;
    z-index: 99999;
    overflow: hidden;
  }
  .row-debug\@large:before {
    pointer-events: none;
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 99999px;
    background: linear-gradient(to right, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.02) 50%);
    background-size: 16.66667% 100%;
    z-index: 99999;
  }
}

[class*="gr-"] > [class^="row"],
[class*="gr-"] > [class^="col"] {
  margin-left: -15px;
  margin-right: -15px;
}

@media screen and (min-width: 320px) {
  [class*="gr-"] > [class^="row"],
  [class*="gr-"] > [class^="col"] {
    margin-left: -15px;
    margin-right: -15px;
  }
}

@media screen and (min-width: 640px) {
  [class*="gr-"] > [class^="row"],
  [class*="gr-"] > [class^="col"] {
    margin-left: -15px;
    margin-right: -15px;
  }
}

@media screen and (min-width: 992px) {
  [class*="gr-"] > [class^="row"],
  [class*="gr-"] > [class^="col"] {
    margin-left: -15px;
    margin-right: -15px;
  }
}

@media screen and (min-width: 1200px) {
  [class*="gr-"] > [class^="row"],
  [class*="gr-"] > [class^="col"] {
    margin-left: -15px;
    margin-right: -15px;
  }
}

.container {
  max-width: 1280px;
  margin: 0 auto;
  padding: 0 5.71429rem;
}

.container--wide {
  max-width: 100%;
}

@media screen and (min-width: 640px) {
  .container {
    padding: 0 2.85714rem;
  }
}

@media screen and (min-width: 320px) {
  .container {
    padding: 0 1.42857rem;
  }
}

@media screen and (min-width: 320px) and (min-width: 320px) and (min-width: 320px) {
  [class*="gr-"]:not([class*="gr-1@mobile"]):not([class*="gr-2@mobile"]):not([class*="gr-3@mobile"]):not([class*="gr-4@mobile"]):not([class*="gr-5@mobile"]):not([class*="gr-6@mobile"]):not([class*="gr-7@mobile"]):not([class*="gr-8@mobile"]):not([class*="gr-9@mobile"]):not([class*="gr-10@mobile"]):not([class*="gr-10@mobile"]):not([class*="gr-11@mobile"]):not([class*="gr-12@mobile"]) {
    width: 100%;
    margin-left: 0%;
  }
}

/**
 * Contextual alignement from gridle states
 */
.t-left {
  text-align: left;
}

@media screen and (min-width: 320px) {
  .t-left\@mobile {
    text-align: left;
  }
}

@media screen and (min-width: 640px) {
  .t-left\@tablet {
    text-align: left;
  }
}

@media screen and (min-width: 992px) {
  .t-left\@desktop {
    text-align: left;
  }
}

@media screen and (min-width: 1200px) {
  .t-left\@large {
    text-align: left;
  }
}

.t-right {
  text-align: right;
}

@media screen and (min-width: 320px) {
  .t-right\@mobile {
    text-align: right;
  }
}

@media screen and (min-width: 640px) {
  .t-right\@tablet {
    text-align: right;
  }
}

@media screen and (min-width: 992px) {
  .t-right\@desktop {
    text-align: right;
  }
}

@media screen and (min-width: 1200px) {
  .t-right\@large {
    text-align: right;
  }
}

.t-center {
  text-align: center;
}

@media screen and (min-width: 320px) {
  .t-center\@mobile {
    text-align: center;
  }
}

@media screen and (min-width: 640px) {
  .t-center\@tablet {
    text-align: center;
  }
}

@media screen and (min-width: 992px) {
  .t-center\@desktop {
    text-align: center;
  }
}

@media screen and (min-width: 1200px) {
  .t-center\@large {
    text-align: center;
  }
}

/**
 * @name 		Lines overlay
 * Apply a nice lines overlay
 * @styleguide 		Decorators / Overlays
 * @example 	html
 * <div class="overlay-lines ratio-16-9 bkg-secondary"></div>
 */
.overlay-lines {
  position: relative;
}

.overlay-lines:after {
  pointer-events: none;
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-image: url('data:image/svg+xml;utf8,<svg id="Layer_1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 236.4 236.4">\a 		  <style>\a 		    .st0{fill:none;stroke:rgba(226, 220, 212, 0.2);stroke-width:.5px;}\a 		  </style>\a 		  <path class="st0" d="M118.196-.30992l118.50996 118.50996L118.196 236.71-.31396 118.20004z"/>\a 		</svg>');
  background-repeat: repeat;
  background-size: 30vw;
  background-position: 50% 50%;
}

html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

article, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section {
  display: block;
}

body {
  line-height: 1;
}

ol, ul {
  list-style: none;
}

blockquote, q {
  quotes: none;
}

blockquote:before, blockquote:after {
  content: '';
  content: none;
}

q:before, q:after {
  content: '';
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

/**
		 * @styleguide 	Colors / Swatches
		 * @name 		default
		 * @color 		#f7f0e7
		 * @display 	color
		 */
/**
		 * @styleguide 	Colors / Swatches
		 * @name 		title
		 * @color 		#363636
		 * @display 	color
		 */
/**
		 * @styleguide 	Colors / Swatches
		 * @name 		text
		 * @color 		#282828
		 * @display 	color
		 */
/**
		 * @styleguide 	Colors / Swatches
		 * @name 		link
		 * @color 		#a48135
		 * @display 	color
		 */
/**
		 * @styleguide 	Colors / Swatches
		 * @name 		primary
		 * @color 		#f63e3e
		 * @display 	color
		 */
/**
		 * @styleguide 	Colors / Swatches
		 * @name 		secondary
		 * @color 		#000
		 * @display 	color
		 */
/**
		 * @styleguide 	Colors / Swatches
		 * @name 		success
		 * @color 		#5cb85c
		 * @display 	color
		 */
/**
		 * @styleguide 	Colors / Swatches
		 * @name 		warning
		 * @color 		#f0ad4e
		 * @display 	color
		 */
/**
		 * @styleguide 	Colors / Swatches
		 * @name 		error
		 * @color 		#d9534f
		 * @display 	color
		 */
/**
		 * @styleguide 	Colors / Swatches
		 * @name 		info
		 * @color 		#2199e8
		 * @display 	color
		 */
/**
		 * @styleguide 	Colors / Swatches
		 * @name 		facebook
		 * @color 		#3B5998
		 * @display 	color
		 */
.s-settings:after {
  content: '{"unit": "rem", "reset": true, "border-box": true, "sizes": {"smaller": 0.3, "small": 0.6, "default": 1, "medium": 1.4, "big": 2, "bigger": 3}, "typography": {"font-family": "gt-walsheim-regular", "font-size": "14px", "font-sizes": null, "line-letters-count": 55, "font-format": {"eot": "embedded-opentype", "woff2": "woff2", "woff": "woff", "ttf": "truetype", "otf": "opentype", "svg": "svg", "svgz": "svgz"}}, "look-and-feel": {"border-radius": "0em", "padding-vertical": "1.4em", "padding-horizontal": "0.8em", "disabled-opacity": 0.5, "line-height": 1.4}, "spaces": {"default": "20px", "smaller": "5px", "small": "10px", "medium": "30px", "big": "40px", "bigger": "60px"}, "colors": {"default": {"color": "#f7f0e7"}, "title": {"color": "#363636"}, "text": {"color": "#282828"}, "link": {"color": "#a48135"}, "primary": {"color": "#f63e3e"}, "secondary": {"color": "#000"}, "success": {"color": "#5cb85c"}, "warning": {"color": "#f0ad4e"}, "error": {"color": "#d9534f"}, "info": {"color": "#2199e8"}, "facebook": {"color": "#3B5998"}}, "modular-scale": {"base": "1rem", "ratio": 1.33}, "text-format": {"scope-class": "tf"}, "vertical-rhythme": {"enabled": true, "scope-class": "vr"}, "BEM": {"standelone-modifier": false, "element-separator": "__", "modifier-separator": "--"}, "fonts": {"default": {"font-family": ["Helvetica Neue", "Helvetica", "Verdana", "Arial", "sans-serif"], "font-weight": "normal", "cap-height": 0.65}, "quote": {"font-family": ["Palatino", "Times", "Georgia", "serif"], "font-weight": "normal", "cap-height": 0.65}, "code": {"font-family": ["Menlo", "Monaco", "Consolas", "Courier New", "monospace"], "font-weight": "normal", "cap-height": 0.65}, "gt-walsheim-bold": {"src": "../fonts/gt-walsheim-bold/gt-walsheim-bold.woff", "extensions": ["woff", "woff2"]}, "gt-walsheim-light": {"src": "../fonts/gt-walsheim-light/gt-walsheim-light.woff", "extensions": ["woff", "woff2"]}, "gt-walsheim-medium": {"src": "../fonts/gt-walsheim-medium/gt-walsheim-medium.woff", "extensions": ["woff", "woff2"]}, "gt-walsheim-ultra-light": {"src": "../fonts/gt-walsheim-ultra-light/gt-walsheim-ultra-light.woff", "extensions": ["woff", "woff2"]}, "gt-walsheim-regular": {"src": "../fonts/gt-walsheim-regular/gt-walsheim-regular.woff", "extensions": ["woff", "woff2"]}}, "filters": {"shadowed": "drop-shadow(rgba(0, 0, 0, 0.3) 0 0 5px)"}, "transitions": {"fast": ["all", "0.1s", "ease-in-out", "0s"], "default": ["all", "0.2s", "ease-in-out", "0s"], "slow": ["all", "0.5s", "ease-in-out", "0s"]}}';
  display: none;
}

html {
  box-sizing: border-box;
}

*, *:before, *:after {
  box-sizing: inherit;
}

a {
  color: inherit;
}

html {
  font-size: 14Px;
  color: #282828;
  font-family: gt-walsheim-regular;
}

body {
  color: #282828;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/**
				 * @name   			default
				 * @styleguide 		Fonts / Faces
				 * @display 		font
				 * @font-family 	Helvetica Neue, Helvetica, Verdana, Arial, sans-serif
				 * @font-style 		
				 * @font-weight 	normal
				 */
/**
				 * @name   			quote
				 * @styleguide 		Fonts / Faces
				 * @display 		font
				 * @font-family 	Palatino, Times, Georgia, serif
				 * @font-style 		
				 * @font-weight 	normal
				 */
/**
				 * @name   			code
				 * @styleguide 		Fonts / Faces
				 * @display 		font
				 * @font-family 	Menlo, Monaco, Consolas, Courier New, monospace
				 * @font-style 		
				 * @font-weight 	normal
				 */
/**
	 * @name   			gt-walsheim-bold
	 * @styleguide 		Fonts / Faces
	 * @display 		font
	 * @font-family 	gt-walsheim-bold
	 * @font-style 		normal
	 * @font-weight 	normal
	 */
@font-face {
  font-family: "gt-walsheim-bold";
  src: url("../fonts/gt-walsheim-bold/gt-walsheim-bold.woff") format("woff"), url("../fonts/gt-walsheim-bold/gt-walsheim-bold.woff2") format("woff2");
  font-style: normal;
  font-weight: normal;
}

/**
	 * @name   			gt-walsheim-light
	 * @styleguide 		Fonts / Faces
	 * @display 		font
	 * @font-family 	gt-walsheim-light
	 * @font-style 		normal
	 * @font-weight 	normal
	 */
@font-face {
  font-family: "gt-walsheim-light";
  src: url("../fonts/gt-walsheim-light/gt-walsheim-light.woff") format("woff"), url("../fonts/gt-walsheim-light/gt-walsheim-light.woff2") format("woff2");
  font-style: normal;
  font-weight: normal;
}

/**
	 * @name   			gt-walsheim-medium
	 * @styleguide 		Fonts / Faces
	 * @display 		font
	 * @font-family 	gt-walsheim-medium
	 * @font-style 		normal
	 * @font-weight 	normal
	 */
@font-face {
  font-family: "gt-walsheim-medium";
  src: url("../fonts/gt-walsheim-medium/gt-walsheim-medium.woff") format("woff"), url("../fonts/gt-walsheim-medium/gt-walsheim-medium.woff2") format("woff2");
  font-style: normal;
  font-weight: normal;
}

/**
	 * @name   			gt-walsheim-ultra-light
	 * @styleguide 		Fonts / Faces
	 * @display 		font
	 * @font-family 	gt-walsheim-ultra-light
	 * @font-style 		normal
	 * @font-weight 	normal
	 */
@font-face {
  font-family: "gt-walsheim-ultra-light";
  src: url("../fonts/gt-walsheim-ultra-light/gt-walsheim-ultra-light.woff") format("woff"), url("../fonts/gt-walsheim-ultra-light/gt-walsheim-ultra-light.woff2") format("woff2");
  font-style: normal;
  font-weight: normal;
}

/**
	 * @name   			gt-walsheim-regular
	 * @styleguide 		Fonts / Faces
	 * @display 		font
	 * @font-family 	gt-walsheim-regular
	 * @font-style 		normal
	 * @font-weight 	normal
	 */
@font-face {
  font-family: "gt-walsheim-regular";
  src: url("../fonts/gt-walsheim-regular/gt-walsheim-regular.woff") format("woff"), url("../fonts/gt-walsheim-regular/gt-walsheim-regular.woff2") format("woff2");
  font-style: normal;
  font-weight: normal;
}

/**
			 * @name 	```.fi-shadowed```
			 * @styleguide  	Helpers / Filters
			 * @example 	html
			 * <div class="fi-shadowed">
			 * 	I'm filtered with shadowed
			 * </div>
			 */
.fi-shadowed {
  filter: drop-shadow(rgba(0, 0, 0, 0.3) 0 0 5px);
}

/**
			 * @name 	```.tr-fast```
			 * @styleguide  	Helpers / Transitions
			 * @example 	html
			 * <div class="tr-fast">
			 * 	I'm transitionned with fast
			 * </div>
			 */
.tr-fast {
  transition: all 0.1s ease-in-out 0s, outline-color 0s linear 0s;
  outline-color: black;
}

/**
			 * @name 	```.tr-default```
			 * @styleguide  	Helpers / Transitions
			 * @example 	html
			 * <div class="tr-default">
			 * 	I'm transitionned with default
			 * </div>
			 */
.tr-default {
  transition: all 0.2s ease-in-out 0s, outline-color 0s linear 0s;
  outline-color: black;
}

/**
			 * @name 	```.tr-slow```
			 * @styleguide  	Helpers / Transitions
			 * @example 	html
			 * <div class="tr-slow">
			 * 	I'm transitionned with slow
			 * </div>
			 */
.tr-slow {
  transition: all 0.5s ease-in-out 0s, outline-color 0s linear 0s;
  outline-color: black;
}

/**
			 * @name 	```.f-default```
			 * @styleguide  	Fonts / Classes
			 * @example 	html
			 * <div class="f-default">
			 * 	I have the font "default" applied
			 * </div>
			 */
.f-default {
  font-family: "Helvetica Neue", Helvetica, Verdana, Arial, sans-serif;
  font-weight: normal;
}

/**
			 * @name 	```.f-quote```
			 * @styleguide  	Fonts / Classes
			 * @example 	html
			 * <div class="f-quote">
			 * 	I have the font "quote" applied
			 * </div>
			 */
.f-quote {
  font-family: Palatino, Times, Georgia, serif;
  font-weight: normal;
}

/**
			 * @name 	```.f-code```
			 * @styleguide  	Fonts / Classes
			 * @example 	html
			 * <div class="f-code">
			 * 	I have the font "code" applied
			 * </div>
			 */
.f-code {
  font-family: Menlo, Monaco, Consolas, "Courier New", monospace;
  font-weight: normal;
}

/**
			 * @name 	```.f-gt-walsheim-bold```
			 * @styleguide  	Fonts / Classes
			 * @example 	html
			 * <div class="f-gt-walsheim-bold">
			 * 	I have the font "gt-walsheim-bold" applied
			 * </div>
			 */
.f-gt-walsheim-bold {
  font-family: gt-walsheim-bold;
}

/**
			 * @name 	```.f-gt-walsheim-light```
			 * @styleguide  	Fonts / Classes
			 * @example 	html
			 * <div class="f-gt-walsheim-light">
			 * 	I have the font "gt-walsheim-light" applied
			 * </div>
			 */
.f-gt-walsheim-light {
  font-family: gt-walsheim-light;
}

/**
			 * @name 	```.f-gt-walsheim-medium```
			 * @styleguide  	Fonts / Classes
			 * @example 	html
			 * <div class="f-gt-walsheim-medium">
			 * 	I have the font "gt-walsheim-medium" applied
			 * </div>
			 */
.f-gt-walsheim-medium {
  font-family: gt-walsheim-medium;
}

/**
			 * @name 	```.f-gt-walsheim-ultra-light```
			 * @styleguide  	Fonts / Classes
			 * @example 	html
			 * <div class="f-gt-walsheim-ultra-light">
			 * 	I have the font "gt-walsheim-ultra-light" applied
			 * </div>
			 */
.f-gt-walsheim-ultra-light {
  font-family: gt-walsheim-ultra-light;
}

/**
			 * @name 	```.f-gt-walsheim-regular```
			 * @styleguide  	Fonts / Classes
			 * @example 	html
			 * <div class="f-gt-walsheim-regular">
			 * 	I have the font "gt-walsheim-regular" applied
			 * </div>
			 */
.f-gt-walsheim-regular {
  font-family: gt-walsheim-regular;
}

/**
			 * @name 	```.m-b-smaller```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-b-smaller" style="background:#f63e3e; width:100px; height:5px"></div>
			 * <div style="background:#000; width:100px; height:5px"></div>
			 */
.m-b-smaller {
  margin-bottom: 0.35714rem;
}

/**
			 * @name 	```.m-t-smaller```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div style="background:#f63e3e; width:100px; height:5px"></div>
			 * <div class="m-t-smaller" style="background:#000; width:100px; height:5px"></div>
			 */
.m-t-smaller {
  margin-top: 0.35714rem;
}

/**
			 * @name 	```.m-l-smaller```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div style="display:inline-block; background:#f63e3e; width:50px; height:50px"></div>
			 * <div class="m-l-smaller" style="display:inline-block; background:#000; width:50px; height:50px"></div>
			 */
.m-l-smaller {
  margin-left: 0.35714rem;
}

/**
			 * @name 	```.m-r-smaller```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-r-smaller" style="display:inline-block; background:#f63e3e; width:50px; height:50px"></div>
			 * <div style="display:inline-block; background:#000; width:50px; height:50px"></div>
			 */
.m-r-smaller {
  margin-right: 0.35714rem;
}

/**
			 * @name 	```.m-s-smaller```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-s-smaller" style="display:inline-block; background:#f63e3e; width:50px; height:50px"></div>
			 * <div style="display:inline-block; background:#000; width:50px; height:50px"></div>
			 */
.m-s-smaller {
  margin-left: 0.35714rem;
  margin-right: 0.35714rem;
}

/**
			 * @name 	```.p-smaller```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-smaller" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-smaller {
  padding: 0.35714rem;
}

/**
			 * @name 	```.p-b-smaller```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-b-smaller" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-b-smaller {
  padding-bottom: 0.35714rem;
}

/**
			 * @name 	```.p-t-smaller```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-t-smaller" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-t-smaller {
  padding-top: 0.35714rem;
}

/**
			 * @name 	```.p-l-smaller```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-l-smaller" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-l-smaller {
  padding-left: 0.35714rem;
}

/**
			 * @name 	```.p-r-smaller```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-r-smaller" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-r-smaller {
  padding-right: 0.35714rem;
}

/**
			 * @name 	```.p-s-smaller```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-s-smaller" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-s-smaller {
  padding-left: 0.35714rem;
  padding-right: 0.35714rem;
}

/**
			 * @name 	```.m-b-small```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-b-small" style="background:#f63e3e; width:100px; height:5px"></div>
			 * <div style="background:#000; width:100px; height:5px"></div>
			 */
.m-b-small {
  margin-bottom: 0.71429rem;
}

/**
			 * @name 	```.m-t-small```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div style="background:#f63e3e; width:100px; height:5px"></div>
			 * <div class="m-t-small" style="background:#000; width:100px; height:5px"></div>
			 */
.m-t-small {
  margin-top: 0.71429rem;
}

/**
			 * @name 	```.m-l-small```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div style="display:inline-block; background:#f63e3e; width:50px; height:50px"></div>
			 * <div class="m-l-small" style="display:inline-block; background:#000; width:50px; height:50px"></div>
			 */
.m-l-small {
  margin-left: 0.71429rem;
}

/**
			 * @name 	```.m-r-small```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-r-small" style="display:inline-block; background:#f63e3e; width:50px; height:50px"></div>
			 * <div style="display:inline-block; background:#000; width:50px; height:50px"></div>
			 */
.m-r-small {
  margin-right: 0.71429rem;
}

/**
			 * @name 	```.m-s-small```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-s-small" style="display:inline-block; background:#f63e3e; width:50px; height:50px"></div>
			 * <div style="display:inline-block; background:#000; width:50px; height:50px"></div>
			 */
.m-s-small {
  margin-left: 0.71429rem;
  margin-right: 0.71429rem;
}

/**
			 * @name 	```.p-small```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-small" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-small {
  padding: 0.71429rem;
}

/**
			 * @name 	```.p-b-small```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-b-small" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-b-small {
  padding-bottom: 0.71429rem;
}

/**
			 * @name 	```.p-t-small```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-t-small" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-t-small {
  padding-top: 0.71429rem;
}

/**
			 * @name 	```.p-l-small```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-l-small" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-l-small {
  padding-left: 0.71429rem;
}

/**
			 * @name 	```.p-r-small```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-r-small" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-r-small {
  padding-right: 0.71429rem;
}

/**
			 * @name 	```.p-s-small```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-s-small" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-s-small {
  padding-left: 0.71429rem;
  padding-right: 0.71429rem;
}

/**
			 * @name 	```.m-b```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-b" style="background:#f63e3e; width:100px; height:5px"></div>
			 * <div style="background:#000; width:100px; height:5px"></div>
			 */
.m-b {
  margin-bottom: 1.42857rem;
}

/**
			 * @name 	```.m-t```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div style="background:#f63e3e; width:100px; height:5px"></div>
			 * <div class="m-t" style="background:#000; width:100px; height:5px"></div>
			 */
.m-t {
  margin-top: 1.42857rem;
}

/**
			 * @name 	```.m-l```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div style="display:inline-block; background:#f63e3e; width:50px; height:50px"></div>
			 * <div class="m-l" style="display:inline-block; background:#000; width:50px; height:50px"></div>
			 */
.m-l {
  margin-left: 1.42857rem;
}

/**
			 * @name 	```.m-r```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-r" style="display:inline-block; background:#f63e3e; width:50px; height:50px"></div>
			 * <div style="display:inline-block; background:#000; width:50px; height:50px"></div>
			 */
.m-r {
  margin-right: 1.42857rem;
}

/**
			 * @name 	```.m-s```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-s" style="display:inline-block; background:#f63e3e; width:50px; height:50px"></div>
			 * <div style="display:inline-block; background:#000; width:50px; height:50px"></div>
			 */
.m-s {
  margin-left: 1.42857rem;
  margin-right: 1.42857rem;
}

/**
			 * @name 	```.p```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p:not(p) {
  padding: 1.42857rem;
}

/**
			 * @name 	```.p-b```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-b" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-b {
  padding-bottom: 1.42857rem;
}

/**
			 * @name 	```.p-t```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-t" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-t {
  padding-top: 1.42857rem;
}

/**
			 * @name 	```.p-l```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-l" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-l {
  padding-left: 1.42857rem;
}

/**
			 * @name 	```.p-r```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-r" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-r {
  padding-right: 1.42857rem;
}

/**
			 * @name 	```.p-s```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-s" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-s {
  padding-left: 1.42857rem;
  padding-right: 1.42857rem;
}

/**
			 * @name 	```.m-b-medium```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-b-medium" style="background:#f63e3e; width:100px; height:5px"></div>
			 * <div style="background:#000; width:100px; height:5px"></div>
			 */
.m-b-medium {
  margin-bottom: 2.14286rem;
}

/**
			 * @name 	```.m-t-medium```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div style="background:#f63e3e; width:100px; height:5px"></div>
			 * <div class="m-t-medium" style="background:#000; width:100px; height:5px"></div>
			 */
.m-t-medium {
  margin-top: 2.14286rem;
}

/**
			 * @name 	```.m-l-medium```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div style="display:inline-block; background:#f63e3e; width:50px; height:50px"></div>
			 * <div class="m-l-medium" style="display:inline-block; background:#000; width:50px; height:50px"></div>
			 */
.m-l-medium {
  margin-left: 2.14286rem;
}

/**
			 * @name 	```.m-r-medium```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-r-medium" style="display:inline-block; background:#f63e3e; width:50px; height:50px"></div>
			 * <div style="display:inline-block; background:#000; width:50px; height:50px"></div>
			 */
.m-r-medium {
  margin-right: 2.14286rem;
}

/**
			 * @name 	```.m-s-medium```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-s-medium" style="display:inline-block; background:#f63e3e; width:50px; height:50px"></div>
			 * <div style="display:inline-block; background:#000; width:50px; height:50px"></div>
			 */
.m-s-medium {
  margin-left: 2.14286rem;
  margin-right: 2.14286rem;
}

/**
			 * @name 	```.p-medium```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-medium" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-medium {
  padding: 2.14286rem;
}

/**
			 * @name 	```.p-b-medium```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-b-medium" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-b-medium {
  padding-bottom: 2.14286rem;
}

/**
			 * @name 	```.p-t-medium```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-t-medium" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-t-medium {
  padding-top: 2.14286rem;
}

/**
			 * @name 	```.p-l-medium```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-l-medium" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-l-medium {
  padding-left: 2.14286rem;
}

/**
			 * @name 	```.p-r-medium```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-r-medium" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-r-medium {
  padding-right: 2.14286rem;
}

/**
			 * @name 	```.p-s-medium```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-s-medium" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-s-medium {
  padding-left: 2.14286rem;
  padding-right: 2.14286rem;
}

/**
			 * @name 	```.m-b-big```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-b-big" style="background:#f63e3e; width:100px; height:5px"></div>
			 * <div style="background:#000; width:100px; height:5px"></div>
			 */
.m-b-big {
  margin-bottom: 2.85714rem;
}

/**
			 * @name 	```.m-t-big```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div style="background:#f63e3e; width:100px; height:5px"></div>
			 * <div class="m-t-big" style="background:#000; width:100px; height:5px"></div>
			 */
.m-t-big {
  margin-top: 2.85714rem;
}

/**
			 * @name 	```.m-l-big```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div style="display:inline-block; background:#f63e3e; width:50px; height:50px"></div>
			 * <div class="m-l-big" style="display:inline-block; background:#000; width:50px; height:50px"></div>
			 */
.m-l-big {
  margin-left: 2.85714rem;
}

/**
			 * @name 	```.m-r-big```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-r-big" style="display:inline-block; background:#f63e3e; width:50px; height:50px"></div>
			 * <div style="display:inline-block; background:#000; width:50px; height:50px"></div>
			 */
.m-r-big {
  margin-right: 2.85714rem;
}

/**
			 * @name 	```.m-s-big```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-s-big" style="display:inline-block; background:#f63e3e; width:50px; height:50px"></div>
			 * <div style="display:inline-block; background:#000; width:50px; height:50px"></div>
			 */
.m-s-big {
  margin-left: 2.85714rem;
  margin-right: 2.85714rem;
}

/**
			 * @name 	```.p-big```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-big" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-big {
  padding: 2.85714rem;
}

/**
			 * @name 	```.p-b-big```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-b-big" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-b-big {
  padding-bottom: 2.85714rem;
}

/**
			 * @name 	```.p-t-big```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-t-big" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-t-big {
  padding-top: 2.85714rem;
}

/**
			 * @name 	```.p-l-big```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-l-big" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-l-big {
  padding-left: 2.85714rem;
}

/**
			 * @name 	```.p-r-big```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-r-big" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-r-big {
  padding-right: 2.85714rem;
}

/**
			 * @name 	```.p-s-big```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-s-big" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-s-big {
  padding-left: 2.85714rem;
  padding-right: 2.85714rem;
}

/**
			 * @name 	```.m-b-bigger```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-b-bigger" style="background:#f63e3e; width:100px; height:5px"></div>
			 * <div style="background:#000; width:100px; height:5px"></div>
			 */
.m-b-bigger {
  margin-bottom: 4.28571rem;
}

/**
			 * @name 	```.m-t-bigger```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div style="background:#f63e3e; width:100px; height:5px"></div>
			 * <div class="m-t-bigger" style="background:#000; width:100px; height:5px"></div>
			 */
.m-t-bigger {
  margin-top: 4.28571rem;
}

/**
			 * @name 	```.m-l-bigger```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div style="display:inline-block; background:#f63e3e; width:50px; height:50px"></div>
			 * <div class="m-l-bigger" style="display:inline-block; background:#000; width:50px; height:50px"></div>
			 */
.m-l-bigger {
  margin-left: 4.28571rem;
}

/**
			 * @name 	```.m-r-bigger```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-r-bigger" style="display:inline-block; background:#f63e3e; width:50px; height:50px"></div>
			 * <div style="display:inline-block; background:#000; width:50px; height:50px"></div>
			 */
.m-r-bigger {
  margin-right: 4.28571rem;
}

/**
			 * @name 	```.m-s-bigger```
			 * @styleguide  	Layout / Margins
			 * @example 	html
			 * <div class="m-s-bigger" style="display:inline-block; background:#f63e3e; width:50px; height:50px"></div>
			 * <div style="display:inline-block; background:#000; width:50px; height:50px"></div>
			 */
.m-s-bigger {
  margin-left: 4.28571rem;
  margin-right: 4.28571rem;
}

/**
			 * @name 	```.p-bigger```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-bigger" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-bigger {
  padding: 4.28571rem;
}

/**
			 * @name 	```.p-b-bigger```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-b-bigger" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-b-bigger {
  padding-bottom: 4.28571rem;
}

/**
			 * @name 	```.p-t-bigger```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-t-bigger" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-t-bigger {
  padding-top: 4.28571rem;
}

/**
			 * @name 	```.p-l-bigger```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-l-bigger" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-l-bigger {
  padding-left: 4.28571rem;
}

/**
			 * @name 	```.p-r-bigger```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-r-bigger" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-r-bigger {
  padding-right: 4.28571rem;
}

/**
			 * @name 	```.p-s-bigger```
			 * @styleguide  	Layout / Paddings
			 * @example 	html
			 * <div class="p-s-bigger" style="border:1px solid #f63e3e; width:150px; height:150px;">
			 * 	<div style="background:#000; width:100%; height:100%"></div>
			 * </div>
			 */
.p-s-bigger {
  padding-left: 4.28571rem;
  padding-right: 4.28571rem;
}

/**
			 * @name 	```.s-smaller```
			 * @styleguide  	Layout / Sizes
			 * @example 	html
			 * <div class="s-smaller">
			 * 	I have the size "smaller" defined
			 * </div>
			 */
.s-smaller {
  font-size: 0.3rem;
}

/**
			 * @name 	```.s-smaller-rel```
			 * @styleguide  	Layout / Sizes
			 * @example 	html
			 * <div class="s-smaller-rel">
			 * 	I have the size "smaller" defined relative to my parent
			 * </div>
			 */
.s-smaller-rel {
  font-size: 0.3em;
}

/**
			 * @name 	```.s-small```
			 * @styleguide  	Layout / Sizes
			 * @example 	html
			 * <div class="s-small">
			 * 	I have the size "small" defined
			 * </div>
			 */
.s-small {
  font-size: 0.6rem;
}

/**
			 * @name 	```.s-small-rel```
			 * @styleguide  	Layout / Sizes
			 * @example 	html
			 * <div class="s-small-rel">
			 * 	I have the size "small" defined relative to my parent
			 * </div>
			 */
.s-small-rel {
  font-size: 0.6em;
}

/**
			 * @name 	```.s-default```
			 * @styleguide  	Layout / Sizes
			 * @example 	html
			 * <div class="s-default">
			 * 	I have the size "default" defined
			 * </div>
			 */
.s-default {
  font-size: 1rem;
}

/**
			 * @name 	```.s-default-rel```
			 * @styleguide  	Layout / Sizes
			 * @example 	html
			 * <div class="s-default-rel">
			 * 	I have the size "default" defined relative to my parent
			 * </div>
			 */
.s-default-rel {
  font-size: 1em;
}

/**
			 * @name 	```.s-medium```
			 * @styleguide  	Layout / Sizes
			 * @example 	html
			 * <div class="s-medium">
			 * 	I have the size "medium" defined
			 * </div>
			 */
.s-medium {
  font-size: 1.4rem;
}

/**
			 * @name 	```.s-medium-rel```
			 * @styleguide  	Layout / Sizes
			 * @example 	html
			 * <div class="s-medium-rel">
			 * 	I have the size "medium" defined relative to my parent
			 * </div>
			 */
.s-medium-rel {
  font-size: 1.4em;
}

/**
			 * @name 	```.s-big```
			 * @styleguide  	Layout / Sizes
			 * @example 	html
			 * <div class="s-big">
			 * 	I have the size "big" defined
			 * </div>
			 */
.s-big {
  font-size: 2rem;
}

/**
			 * @name 	```.s-big-rel```
			 * @styleguide  	Layout / Sizes
			 * @example 	html
			 * <div class="s-big-rel">
			 * 	I have the size "big" defined relative to my parent
			 * </div>
			 */
.s-big-rel {
  font-size: 2em;
}

/**
			 * @name 	```.s-bigger```
			 * @styleguide  	Layout / Sizes
			 * @example 	html
			 * <div class="s-bigger">
			 * 	I have the size "bigger" defined
			 * </div>
			 */
.s-bigger {
  font-size: 3rem;
}

/**
			 * @name 	```.s-bigger-rel```
			 * @styleguide  	Layout / Sizes
			 * @example 	html
			 * <div class="s-bigger-rel">
			 * 	I have the size "bigger" defined relative to my parent
			 * </div>
			 */
.s-bigger-rel {
  font-size: 3em;
}

/**
		 * @name 	```.no-p-t```
		 * Reset **top** padding
		 * @styleguide  	Layout / No padding
		 * @example 	html
		 * <div class="no-p-t" style="display:inline-block; background:#f63e3e; width:50px; height:50px;"></div>
		 */
.no-p-t {
  padding-top: 0 !important;
}

/**
		 * @name 	```.no-p-r```
		 * Reset **right** padding
		 * @styleguide  	Layout / No padding
		 * @example 	html
		 * <div class="no-p-r" style="display:inline-block; background:#f63e3e; width:50px; height:50px;"></div>
		 */
.no-p-r {
  padding-right: 0 !important;
}

/**
		 * @name 	```.no-p-b```
		 * Reset **bottom** padding
		 * @styleguide  	Layout / No padding
		 * @example 	html
		 * <div class="no-p-b" style="display:inline-block; background:#f63e3e; width:50px; height:50px;"></div>
		 */
.no-p-b {
  padding-bottom: 0 !important;
}

/**
		 * @name 	```.no-p-l```
		 * Reset **left** padding
		 * @styleguide  	Layout / No padding
		 * @example 	html
		 * <div class="no-p-l" style="display:inline-block; background:#f63e3e; width:50px; height:50px;"></div>
		 */
.no-p-l {
  padding-left: 0 !important;
}

/**
		 * @name 	```.no-p-s```
		 * Reset **left** and **right** paddings
		 * @styleguide  	Layout / No padding
		 * @example 	html
		 * <div class="no-p-s" style="display:inline-block; background:#f63e3e; width:50px; height:50px;"></div>
		 */
.no-p-s {
  padding-left: 0 !important;
  padding-right: 0 !important;
}

/**
		 * @name 	```.no-m-t```
		 * Reset **top** padding
		 * @styleguide  	Layout / No margin
		 * @example 	html
		 * <div class="no-m-t" style="display:inline-block; background:#f63e3e; width:50px; height:50px;"></div>
		 */
.no-m-t {
  margin-top: 0 !important;
}

/**
		 * @name 	```.no-m-r```
		 * Reset **right** padding
		 * @styleguide  	Layout / No margin
		 * @example 	html
		 * <div class="no-m-r" style="display:inline-block; background:#f63e3e; width:50px; height:50px;"></div>
		 */
.no-m-r {
  margin-right: 0 !important;
}

/**
		 * @name 	```.no-m-b```
		 * Reset **bottom** padding
		 * @styleguide  	Layout / No margin
		 * @example 	html
		 * <div class="no-m-b" style="display:inline-block; background:#f63e3e; width:50px; height:50px;"></div>
		 */
.no-m-b {
  margin-bottom: 0 !important;
}

/**
		 * @name 	```.no-m-l```
		 * Reset **left** padding
		 * @styleguide  	Layout / No margin
		 * @example 	html
		 * <div class="no-m-l" style="display:inline-block; background:#f63e3e; width:50px; height:50px;"></div>
		 */
.no-m-l {
  margin-left: 0 !important;
}

/**
		 * @name 	```.no-m-s```
		 * Reset **left** and **right** margins
		 * @styleguide  	Layout / No padding
		 * @example 	html
		 * <div class="no-m-s" style="display:inline-block; background:#f63e3e; width:50px; height:50px;"></div>
		 */
.no-m-s {
  margin-left: 0 !important;
  margin-right: 0 !important;
}

/**
				 * @name 	```.c-default```
				 * Specify the color to **default**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="c-default">
				 * 	I'm in "default" color
				 * </div>
				 */
.c-default {
  color: #f7f0e7;
}

/**
				 * @name 	```.bkg-default```
				 * Specify the background color to **default**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="bkg-default p" style="color:white">
				 * 	My background color is "default"
				 * </div>
				 */
.bkg-default {
  background-color: #f7f0e7;
}

/**
				 * @name 	```.c-title```
				 * Specify the color to **title**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="c-title">
				 * 	I'm in "title" color
				 * </div>
				 */
.c-title {
  color: #363636;
}

/**
				 * @name 	```.bkg-title```
				 * Specify the background color to **title**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="bkg-title p" style="color:white">
				 * 	My background color is "title"
				 * </div>
				 */
.bkg-title {
  background-color: #363636;
}

/**
				 * @name 	```.c-text```
				 * Specify the color to **text**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="c-text">
				 * 	I'm in "text" color
				 * </div>
				 */
.c-text {
  color: #282828;
}

/**
				 * @name 	```.bkg-text```
				 * Specify the background color to **text**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="bkg-text p" style="color:white">
				 * 	My background color is "text"
				 * </div>
				 */
.bkg-text {
  background-color: #282828;
}

/**
				 * @name 	```.c-link```
				 * Specify the color to **link**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="c-link">
				 * 	I'm in "link" color
				 * </div>
				 */
.c-link {
  color: #a48135;
}

/**
				 * @name 	```.bkg-link```
				 * Specify the background color to **link**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="bkg-link p" style="color:white">
				 * 	My background color is "link"
				 * </div>
				 */
.bkg-link {
  background-color: #a48135;
}

/**
				 * @name 	```.c-primary```
				 * Specify the color to **primary**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="c-primary">
				 * 	I'm in "primary" color
				 * </div>
				 */
.c-primary {
  color: #f63e3e;
}

/**
				 * @name 	```.bkg-primary```
				 * Specify the background color to **primary**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="bkg-primary p" style="color:white">
				 * 	My background color is "primary"
				 * </div>
				 */
.bkg-primary {
  background-color: #f63e3e;
}

/**
				 * @name 	```.c-secondary```
				 * Specify the color to **secondary**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="c-secondary">
				 * 	I'm in "secondary" color
				 * </div>
				 */
.c-secondary {
  color: #000;
}

/**
				 * @name 	```.bkg-secondary```
				 * Specify the background color to **secondary**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="bkg-secondary p" style="color:white">
				 * 	My background color is "secondary"
				 * </div>
				 */
.bkg-secondary {
  background-color: #000;
}

/**
				 * @name 	```.c-success```
				 * Specify the color to **success**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="c-success">
				 * 	I'm in "success" color
				 * </div>
				 */
.c-success {
  color: #5cb85c;
}

/**
				 * @name 	```.bkg-success```
				 * Specify the background color to **success**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="bkg-success p" style="color:white">
				 * 	My background color is "success"
				 * </div>
				 */
.bkg-success {
  background-color: #5cb85c;
}

/**
				 * @name 	```.c-warning```
				 * Specify the color to **warning**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="c-warning">
				 * 	I'm in "warning" color
				 * </div>
				 */
.c-warning {
  color: #f0ad4e;
}

/**
				 * @name 	```.bkg-warning```
				 * Specify the background color to **warning**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="bkg-warning p" style="color:white">
				 * 	My background color is "warning"
				 * </div>
				 */
.bkg-warning {
  background-color: #f0ad4e;
}

/**
				 * @name 	```.c-error```
				 * Specify the color to **error**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="c-error">
				 * 	I'm in "error" color
				 * </div>
				 */
.c-error {
  color: #d9534f;
}

/**
				 * @name 	```.bkg-error```
				 * Specify the background color to **error**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="bkg-error p" style="color:white">
				 * 	My background color is "error"
				 * </div>
				 */
.bkg-error {
  background-color: #d9534f;
}

/**
				 * @name 	```.c-info```
				 * Specify the color to **info**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="c-info">
				 * 	I'm in "info" color
				 * </div>
				 */
.c-info {
  color: #2199e8;
}

/**
				 * @name 	```.bkg-info```
				 * Specify the background color to **info**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="bkg-info p" style="color:white">
				 * 	My background color is "info"
				 * </div>
				 */
.bkg-info {
  background-color: #2199e8;
}

/**
				 * @name 	```.c-facebook```
				 * Specify the color to **facebook**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="c-facebook">
				 * 	I'm in "facebook" color
				 * </div>
				 */
.c-facebook {
  color: #3B5998;
}

/**
				 * @name 	```.bkg-facebook```
				 * Specify the background color to **facebook**
				 * @styleguide  	Colors / Classes
				 * @example 	html
				 * <div class="bkg-facebook p" style="color:white">
				 * 	My background color is "facebook"
				 * </div>
				 */
.bkg-facebook {
  background-color: #3B5998;
}

/**
 * Titles
 */
/**
	 * @name 	```.h1```
	 * h1 title styling
	 * @styleguide 	Typography / Titles
	 * @example 	html
	 * <h1 class="h1">Hello World</h1>
	 * <div class="tf">
	 * 	<h1>Hello World</h1>
	 * </div>
	 */
.h1,
.tf h1 {
  font-size: 3.5em;
  line-height: 1.5;
}

/**
	 * @name 	```.h2```
	 * h2 title styling
	 * @styleguide 	Typography / Titles
	 * @example 	html
	 * <h2 class="h2">Hello World</h2>
	 * <div class="tf">
	 * 	<h2>Hello World</h2>
	 * </div>
	 */
.h2,
.tf h2 {
  font-size: 3em;
  line-height: 1.5;
}

/**
	 * @name 	```.h3```
	 * h3 title styling
	 * @styleguide 	Typography / Titles
	 * @example 	html
	 * <h3 class="h3">Hello World</h3>
	 * <div class="tf">
	 * 	<h3>Hello World</h3>
	 * </div>
	 */
.h3,
.tf h3 {
  font-size: 2.5em;
  line-height: 1.5;
}

/**
	 * @name 	```.h4```
	 * h4 title styling
	 * @styleguide 	Typography / Titles
	 * @example 	html
	 * <h4 class="h4">Hello World</h4>
	 * <div class="tf">
	 * 	<h4>Hello World</h4>
	 * </div>
	 */
.h4,
.tf h4 {
  font-size: 2em;
  line-height: 1.5;
}

/**
	 * @name 	```.h5```
	 * h5 title styling
	 * @styleguide 	Typography / Titles
	 * @example 	html
	 * <h5 class="h5">Hello World</h5>
	 * <div class="tf">
	 * 	<h5>Hello World</h5>
	 * </div>
	 */
.h5,
.tf h5 {
  font-size: 1.5em;
  line-height: 1.5;
}

/**
	 * @name 	```.h6```
	 * h6 title styling
	 * @styleguide 	Typography / Titles
	 * @example 	html
	 * <h6 class="h6">Hello World</h6>
	 * <div class="tf">
	 * 	<h6>Hello World</h6>
	 * </div>
	 */
.h6,
.tf h6 {
  font-size: 1em;
  line-height: 1.5;
}

h1.vr,
.vr h1, h2.vr,
.vr h2, h3.vr,
.vr h3, h4.vr,
.vr h4, h5.vr,
.vr h5, h6.vr,
.vr h6,
.h1.vr,
.vr
.h1, .h2.vr,
.vr .h2, .h3.vr,
.vr .h3, .h4.vr,
.vr .h4, .h5.vr,
.vr .h5, .h6.vr,
.vr .h6 {
  margin-bottom: 1.42857rem;
}

h1.vr:last-child,
.vr h1:last-child, h2.vr:last-child,
.vr h2:last-child, h3.vr:last-child,
.vr h3:last-child, h4.vr:last-child,
.vr h4:last-child, h5.vr:last-child,
.vr h5:last-child, h6.vr:last-child,
.vr h6:last-child,
.h1.vr:last-child,
.vr
.h1:last-child, .h2.vr:last-child,
.vr .h2:last-child, .h3.vr:last-child,
.vr .h3:last-child, .h4.vr:last-child,
.vr .h4:last-child, .h5.vr:last-child,
.vr .h5:last-child, .h6.vr:last-child,
.vr .h6:last-child {
  margin-bottom: 0;
}

.h1, .tf h1,
.h2, .tf h2,
.h3, .tf h3,
.h4, .tf h4,
.h5, .tf h5,
.h6, .tf h6 {
  font-family: gt-walsheim-bold;
  line-height: 1;
}

.h1,
.tf h1 {
  font-size: 1.42857em;
  position: relative;
  font-size: 5.71429em;
}

@media screen and (min-width: 640px) {
  .h1,
  .tf h1 {
    font-size: 5vw;
  }
}

.h1.h1--prefix:before, .tf h1.h1--prefix:before {
  content: '';
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  width: .5em;
  height: 1em;
  background: currentColor;
  transform: translateX(calc(-100% - 40px));
}

.h2,
.tf h2 {
  font-size: 4.57143em;
}

.h3,
.tf h3 {
  font-size: 2.57143em;
}

.h4,
.tf h4 {
  font-size: 1.57143em;
}

.h5,
.tf h5 {
  font-size: 1em;
}

.h6,
.tf h6 {
  font-size: 0.71429em;
}

/**
 * @name 		Paragraphs
 * Display a standard paragraph
 * @styleguide 		Typography / Paragraphs
 * @example 		html
 * <p class="p">
 * 	Suspendisse potenti. Etiam auctor lacus id consectetur bibendum. Pellentesque vel ex eget tortor rhoncus ultricies nec vitae neque. Nam consectetur metus ut ligula porttitor euismod. Nunc diam urna, porta sed.
 * </p>
 * <div class="tf">
 * 	<p>
 * 		Suspendisse potenti. Etiam auctor lacus id consectetur bibendum. Pellentesque vel ex eget tortor rhoncus ultricies nec vitae neque. Nam consectetur metus ut ligula porttitor euismod. Nunc diam urna, porta sed.
 * 	</p>
 * </div>
 */
.p, .tf p {
  font-size: 1em;
  line-height: 1.5;
}

@media screen and (min-width: 640px) {
  .p, .tf p {
    font-size: 1.28571em;
  }
}

/**
 * @name 		Lead Paragraph
 * Display a lead paragraph
 * @styleguide 		Typography / Paragraphs
 * @example 		html
 * <p class="p p--lead">
 * 	Suspendisse potenti. Etiam auctor lacus id consectetur bibendum. Pellentesque vel ex eget tortor rhoncus ultricies nec vitae neque. Nam consectetur metus ut ligula porttitor euismod. Nunc diam urna, porta sed.
 * </p>
 * <div class="tf">
 * 	<p class="p--lead">
 * 		Suspendisse potenti. Etiam auctor lacus id consectetur bibendum. Pellentesque vel ex eget tortor rhoncus ultricies nec vitae neque. Nam consectetur metus ut ligula porttitor euismod. Nunc diam urna, porta sed.
 * 	</p>
 * </div>
 */
.p--lead, .tf .p--lead {
  font-size: 1.42857em;
}

@media screen and (min-width: 640px) {
  .p--lead, .tf .p--lead {
    font-size: 2em;
  }
}

/**
 * Layout
 * All the layout level specific styling.
 */
/**
 * Layout
 * All the layout level specific styling.
 */
html,
body {
  height: 100%;
}

body {
  overflow-x: hidden;
}

body {
  background: black;
  background: black;
}

.ua-mobile.ua-safari * {
  transition: none !important;
}

.app__page_video {
  position: fixed;
  top: 0;
  left: 0;
  pointer-events: none;
  opacity: 0;
  transition: opacity .4s ease-in-out 0s;
}

.app__page_video:target {
  opacity: 1;
  pointer-events: all;
}

.app__page_video video {
  width: 100vw;
  height: 100vh;
  object-fit: cover;
}

.app__page {
  position: fixed;
  top: 50%;
  left: 50%;
  pointer-events: none;
  opacity: 0;
  transform: translateX(-50%) translateY(-50%);
  transition: opacity .4s ease-in-out 0s;
}

.app__page:target {
  opacity: 1;
  pointer-events: all;
}

/**
 * Pages
 * All the pages level specific styling.
 */
/**
 * Pages
 * All the pages level specific styling.
 */
@media screen and (min-width: 640px) {
  .gif {
    top: 55% !important;
  }
}

.gif img {
  max-height: 17.85714rem;
  width: auto;
}

@media screen and (min-width: 640px) {
  .gif img {
    max-height: 25rem;
  }
}

.grid {
  width: 1536px;
  height: 1024px;
}

@keyframes image-in {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes pixel-out {
  from {
    transform: scale(1, 1) rotate(0deg);
  }
  to {
    transform: scale(0, 0) rotate(-360deg);
  }
}

.grid__item {
  position: absolute;
  background: #242424;
  overflow: hidden;
}

.grid__item:not(.grid__item-logo):before {
  content: '';
  position: absolute;
  z-index: 99999999999;
  width: 34px;
  height: 68px;
  left: 6px;
  bottom: 0;
  background-image: url("../img/logo-bb_tl.png");
  background-repeat: no-repeat;
  background-position: center center;
  background-size: 20px 40px;
}

.grid__item:after {
  content: '';
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border: 2px solid black;
}

.grid__item:nth-child(1) img {
  transition: all 0.5s cubic-bezier(0.335, 0.06, 0.02, 1) 0.05s;
}

.grid__item:nth-child(1) img.loaded {
  transition: all 20s cubic-bezier(0.335, 0.06, 0.02, 1) 0.05s;
}

.grid__item:nth-child(2) img {
  transition: all 0.5s cubic-bezier(0.335, 0.06, 0.02, 1) 0.1s;
}

.grid__item:nth-child(2) img.loaded {
  transition: all 20s cubic-bezier(0.335, 0.06, 0.02, 1) 0.1s;
}

.grid__item:nth-child(3) img {
  transition: all 0.5s cubic-bezier(0.335, 0.06, 0.02, 1) 0.15s;
}

.grid__item:nth-child(3) img.loaded {
  transition: all 20s cubic-bezier(0.335, 0.06, 0.02, 1) 0.15s;
}

.grid__item:nth-child(4) img {
  transition: all 0.5s cubic-bezier(0.335, 0.06, 0.02, 1) 0.2s;
}

.grid__item:nth-child(4) img.loaded {
  transition: all 20s cubic-bezier(0.335, 0.06, 0.02, 1) 0.2s;
}

.grid__item:nth-child(5) img {
  transition: all 0.5s cubic-bezier(0.335, 0.06, 0.02, 1) 0.25s;
}

.grid__item:nth-child(5) img.loaded {
  transition: all 20s cubic-bezier(0.335, 0.06, 0.02, 1) 0.25s;
}

.grid__item:nth-child(6) img {
  transition: all 0.5s cubic-bezier(0.335, 0.06, 0.02, 1) 0.3s;
}

.grid__item:nth-child(6) img.loaded {
  transition: all 20s cubic-bezier(0.335, 0.06, 0.02, 1) 0.3s;
}

.grid__item:nth-child(7) img {
  transition: all 0.5s cubic-bezier(0.335, 0.06, 0.02, 1) 0.35s;
}

.grid__item:nth-child(7) img.loaded {
  transition: all 20s cubic-bezier(0.335, 0.06, 0.02, 1) 0.35s;
}

.grid__item:nth-child(8) img {
  transition: all 0.5s cubic-bezier(0.335, 0.06, 0.02, 1) 0.4s;
}

.grid__item:nth-child(8) img.loaded {
  transition: all 20s cubic-bezier(0.335, 0.06, 0.02, 1) 0.4s;
}

.grid__item:nth-child(9) img {
  transition: all 0.5s cubic-bezier(0.335, 0.06, 0.02, 1) 0.45s;
}

.grid__item:nth-child(9) img.loaded {
  transition: all 20s cubic-bezier(0.335, 0.06, 0.02, 1) 0.45s;
}

.grid__item:nth-child(10) img {
  transition: all 0.5s cubic-bezier(0.335, 0.06, 0.02, 1) 0.5s;
}

.grid__item:nth-child(10) img.loaded {
  transition: all 20s cubic-bezier(0.335, 0.06, 0.02, 1) 0.5s;
}

.grid__item:nth-child(11) img {
  transition: all 0.5s cubic-bezier(0.335, 0.06, 0.02, 1) 0.55s;
}

.grid__item:nth-child(11) img.loaded {
  transition: all 20s cubic-bezier(0.335, 0.06, 0.02, 1) 0.55s;
}

.grid__item:nth-child(12) img {
  transition: all 0.5s cubic-bezier(0.335, 0.06, 0.02, 1) 0.6s;
}

.grid__item:nth-child(12) img.loaded {
  transition: all 20s cubic-bezier(0.335, 0.06, 0.02, 1) 0.6s;
}

.grid__item .pixel {
  background: #000;
  width: 20%;
  height: 20%;
  position: absolute;
}

.grid__item .pixel:nth-of-type(1) {
  top: 0;
  left: 0%;
  animation: pixel-out 0.3s linear 0.08s forwards;
}

.grid__item .pixel:nth-of-type(2) {
  top: 0;
  left: 20%;
  animation: pixel-out 0.3s linear 0.12s forwards;
}

.grid__item .pixel:nth-of-type(3) {
  top: 0;
  left: 40%;
  animation: pixel-out 0.3s linear 0.16s forwards;
}

.grid__item .pixel:nth-of-type(4) {
  top: 0;
  left: 60%;
  animation: pixel-out 0.3s linear 0.2s forwards;
}

.grid__item .pixel:nth-of-type(5) {
  top: 0;
  left: 80%;
  animation: pixel-out 0.3s linear 0.24s forwards;
}

.grid__item .pixel:nth-of-type(6) {
  top: 20%;
  left: 0%;
  animation: pixel-out 0.3s linear 0.12s forwards;
}

.grid__item .pixel:nth-of-type(7) {
  top: 20%;
  left: 20%;
  animation: pixel-out 0.3s linear 0.16s forwards;
}

.grid__item .pixel:nth-of-type(8) {
  top: 20%;
  left: 40%;
  animation: pixel-out 0.3s linear 0.2s forwards;
}

.grid__item .pixel:nth-of-type(9) {
  top: 20%;
  left: 60%;
  animation: pixel-out 0.3s linear 0.24s forwards;
}

.grid__item .pixel:nth-of-type(10) {
  top: 20%;
  left: 80%;
  animation: pixel-out 0.3s linear 0.28s forwards;
}

.grid__item .pixel:nth-of-type(11) {
  top: 40%;
  left: 0%;
  animation: pixel-out 0.3s linear 0.16s forwards;
}

.grid__item .pixel:nth-of-type(12) {
  top: 40%;
  left: 20%;
  animation: pixel-out 0.3s linear 0.2s forwards;
}

.grid__item .pixel:nth-of-type(13) {
  top: 40%;
  left: 40%;
  animation: pixel-out 0.3s linear 0.24s forwards;
}

.grid__item .pixel:nth-of-type(14) {
  top: 40%;
  left: 60%;
  animation: pixel-out 0.3s linear 0.28s forwards;
}

.grid__item .pixel:nth-of-type(15) {
  top: 40%;
  left: 80%;
  animation: pixel-out 0.3s linear 0.32s forwards;
}

.grid__item .pixel:nth-of-type(16) {
  top: 60%;
  left: 0%;
  animation: pixel-out 0.3s linear 0.2s forwards;
}

.grid__item .pixel:nth-of-type(17) {
  top: 60%;
  left: 20%;
  animation: pixel-out 0.3s linear 0.24s forwards;
}

.grid__item .pixel:nth-of-type(18) {
  top: 60%;
  left: 40%;
  animation: pixel-out 0.3s linear 0.28s forwards;
}

.grid__item .pixel:nth-of-type(19) {
  top: 60%;
  left: 60%;
  animation: pixel-out 0.3s linear 0.32s forwards;
}

.grid__item .pixel:nth-of-type(20) {
  top: 60%;
  left: 80%;
  animation: pixel-out 0.3s linear 0.36s forwards;
}

.grid__item .pixel:nth-of-type(21) {
  top: 80%;
  left: 0%;
  animation: pixel-out 0.3s linear 0.24s forwards;
}

.grid__item .pixel:nth-of-type(22) {
  top: 80%;
  left: 20%;
  animation: pixel-out 0.3s linear 0.28s forwards;
}

.grid__item .pixel:nth-of-type(23) {
  top: 80%;
  left: 40%;
  animation: pixel-out 0.3s linear 0.32s forwards;
}

.grid__item .pixel:nth-of-type(24) {
  top: 80%;
  left: 60%;
  animation: pixel-out 0.3s linear 0.36s forwards;
}

.grid__item .pixel:nth-of-type(25) {
  top: 80%;
  left: 80%;
  animation: pixel-out 0.3s linear 0.4s forwards;
}

.grid__item .pixel:nth-of-type(26) {
  top: 100%;
  left: 0%;
  animation: pixel-out 0.3s linear 0.28s forwards;
}

.grid__item-logo {
  background: transparent;
}

.grid__item-logo img {
  position: absolute;
  width: 50%;
  height: auto;
  top: 50%;
  left: 50%;
  transform: translateX(-50%) translateY(-50%);
  opacity: 0 !important;
  transition: all 1s cubic-bezier(0.335, 0.06, 0.02, 1) 5s;
}

*:target .grid__item-logo img.loaded {
  opacity: 1 !important;
}

.grid--1 .grid__item-1,
.grid--1 .grid__item-3,
.grid--1 .grid__item-4,
.grid--1 .grid__item-5,
.grid--1 .grid__item-6,
.grid--1 .grid__item-7 {
  width: 256px;
  height: 256px;
  /*256*/
}

.grid--1 .grid__item-1 img,
.grid--1 .grid__item-3 img,
.grid--1 .grid__item-4 img,
.grid--1 .grid__item-5 img,
.grid--1 .grid__item-6 img,
.grid--1 .grid__item-7 img {
  position: absolute;
  top: 0;
  left: 50%;
  height: 100%;
  width: 455px;
  margin-left: -227.5px;
  /*left: 50%;*/
  /*top: 0;
            transform:	translateX(-50%);*/
}

.grid--1 .grid__item-1 img.loaded,
.grid--1 .grid__item-3 img.loaded,
.grid--1 .grid__item-4 img.loaded,
.grid--1 .grid__item-5 img.loaded,
.grid--1 .grid__item-6 img.loaded,
.grid--1 .grid__item-7 img.loaded {
  transform: scale(1.3);
  transition: transform 20s cubic-bezier(0.335, 0.06, 0.02, 1) 0s;
}

.grid--1 .grid__item-2,
.grid--1 .grid__item-8,
.grid--1 .grid__item-9,
.grid--1 .grid__item-10 {
  width: 512px;
  height: 512px;
  /*512*/
}

.grid--1 .grid__item-2 img,
.grid--1 .grid__item-8 img,
.grid--1 .grid__item-9 img,
.grid--1 .grid__item-10 img {
  position: absolute;
  top: 0;
  left: 50%;
  height: 100%;
  width: 910px;
  margin-left: -455px;
  /*left: 50%;*/
  /*top: 0;
            transform:	translateX(-50%);*/
}

.grid--1 .grid__item-2 img.loaded,
.grid--1 .grid__item-8 img.loaded,
.grid--1 .grid__item-9 img.loaded,
.grid--1 .grid__item-10 img.loaded {
  transform: scale(1.3);
  transition: transform 20s cubic-bezier(0.335, 0.06, 0.02, 1) 0s;
}

.grid--1 .grid__item-1 {
  top: 0;
  left: 0;
}

.grid--1 .grid__item-2 {
  top: 0;
  left: 256px;
}

.grid--1 .grid__item-3 {
  top: 0;
  left: 768px;
}

.grid--1 .grid__item-4 {
  top: 0;
  left: 1024px;
}

.grid--1 .grid__item-5 {
  top: 0;
  left: 1280px;
}

.grid--1 .grid__item-6 {
  top: 256px;
  left: 0;
}

.grid--1 .grid__item-7 {
  top: 256px;
  left: 768px;
}

.grid--1 .grid__item-8 {
  top: 256px;
  left: 1024px;
}

.grid--1 .grid__item-9 {
  top: 512px;
  left: 0;
}

.grid--1 .grid__item-10 {
  top: 512px;
  left: 512px;
}

.grid--1 .grid__item-logo {
  width: 512px;
  height: 256px;
  top: 768px;
  left: 1024px;
}

.grid--2 .grid__item-1,
.grid--2 .grid__item-4,
.grid--2 .grid__item-6,
.grid--2 .grid__item-8 {
  width: 512px;
  height: 512px;
  /*512*/
}

.grid--2 .grid__item-1 img,
.grid--2 .grid__item-4 img,
.grid--2 .grid__item-6 img,
.grid--2 .grid__item-8 img {
  position: absolute;
  top: 0;
  left: 50%;
  height: 100%;
  width: 910px;
  margin-left: -455px;
  /*left: 50%;*/
  /*top: 0;
            transform:	translateX(-50%);*/
}

.grid--2 .grid__item-1 img.loaded,
.grid--2 .grid__item-4 img.loaded,
.grid--2 .grid__item-6 img.loaded,
.grid--2 .grid__item-8 img.loaded {
  transform: scale(1.3);
  transition: transform 20s cubic-bezier(0.335, 0.06, 0.02, 1) 0s;
}

.grid--2 .grid__item-2,
.grid--2 .grid__item-3,
.grid--2 .grid__item-5,
.grid--2 .grid__item-7,
.grid--2 .grid__item-9,
.grid--2 .grid__item-10 {
  width: 256px;
  height: 256px;
  /*256*/
}

.grid--2 .grid__item-2 img,
.grid--2 .grid__item-3 img,
.grid--2 .grid__item-5 img,
.grid--2 .grid__item-7 img,
.grid--2 .grid__item-9 img,
.grid--2 .grid__item-10 img {
  position: absolute;
  top: 0;
  left: 50%;
  height: 100%;
  width: 455px;
  margin-left: -227.5px;
  /*left: 50%;*/
  /*top: 0;
            transform:	translateX(-50%);*/
}

.grid--2 .grid__item-2 img.loaded,
.grid--2 .grid__item-3 img.loaded,
.grid--2 .grid__item-5 img.loaded,
.grid--2 .grid__item-7 img.loaded,
.grid--2 .grid__item-9 img.loaded,
.grid--2 .grid__item-10 img.loaded {
  transform: scale(1.3);
  transition: transform 20s cubic-bezier(0.335, 0.06, 0.02, 1) 0s;
}

.grid--2 .grid__item-1 {
  top: 0;
  left: 0;
}

.grid--2 .grid__item-2 {
  top: 0;
  left: 512px;
}

.grid--2 .grid__item-3 {
  top: 0;
  left: 768px;
}

.grid--2 .grid__item-4 {
  top: 0;
  left: 1024px;
}

.grid--2 .grid__item-5 {
  top: 512px;
  left: 0;
}

.grid--2 .grid__item-6 {
  top: 512px;
  left: 256px;
}

.grid--2 .grid__item-7 {
  top: 512px;
  left: 768px;
}

.grid--2 .grid__item-8 {
  top: 512px;
  left: 1024px;
}

.grid--2 .grid__item-9 {
  top: 768px;
  left: 0;
}

.grid--2 .grid__item-10 {
  top: 768px;
  left: 768px;
}

.grid--2 .grid__item-logo {
  width: 512px;
  height: 256px;
  top: 256px;
  left: 512px;
}

.grid--3 .grid__item-1,
.grid--3 .grid__item-4,
.grid--3 .grid__item-5,
.grid--3 .grid__item-6,
.grid--3 .grid__item-7 {
  width: 512px;
  height: 512px;
  /*512*/
}

.grid--3 .grid__item-1 img,
.grid--3 .grid__item-4 img,
.grid--3 .grid__item-5 img,
.grid--3 .grid__item-6 img,
.grid--3 .grid__item-7 img {
  position: absolute;
  top: 0;
  left: 50%;
  height: 100%;
  width: 910px;
  margin-left: -455px;
  /*left: 50%;*/
  /*top: 0;
            transform:	translateX(-50%);*/
}

.grid--3 .grid__item-1 img.loaded,
.grid--3 .grid__item-4 img.loaded,
.grid--3 .grid__item-5 img.loaded,
.grid--3 .grid__item-6 img.loaded,
.grid--3 .grid__item-7 img.loaded {
  transform: scale(1.3);
  transition: transform 20s cubic-bezier(0.335, 0.06, 0.02, 1) 0s;
}

.grid--3 .grid__item-2,
.grid--3 .grid__item-3 {
  width: 256px;
  height: 256px;
  /*256*/
}

.grid--3 .grid__item-2 img,
.grid--3 .grid__item-3 img {
  position: absolute;
  top: 0;
  left: 50%;
  height: 100%;
  width: 455px;
  margin-left: -227.5px;
  /*left: 50%;*/
  /*top: 0;
            transform:	translateX(-50%);*/
}

.grid--3 .grid__item-2 img.loaded,
.grid--3 .grid__item-3 img.loaded {
  transform: scale(1.3);
  transition: transform 20s cubic-bezier(0.335, 0.06, 0.02, 1) 0s;
}

.grid--3 .grid__item-1 {
  top: 0;
  left: 0;
}

.grid--3 .grid__item-2 {
  top: 0;
  left: 512px;
}

.grid--3 .grid__item-3 {
  top: 0;
  left: 768px;
}

.grid--3 .grid__item-4 {
  top: 0;
  left: 1024px;
}

.grid--3 .grid__item-5 {
  top: 256px;
  left: 512px;
}

.grid--3 .grid__item-6 {
  top: 512px;
  left: 0;
}

.grid--3 .grid__item-7 {
  top: 512px;
  left: 1024px;
}

.grid--3 .grid__item-logo {
  width: 512px;
  height: 256px;
  top: 768px;
  left: 512px;
}

/**
 * Blocks
 * All the blocks styling.
 * A block can contain other blocks or objects and does not have to relay on his ancestors
 * to be properly displayed.
 */
/**
 * Blocks
 * All the blocks styling.
 * A block can contain other blocks or objects and does not have to relay on his ancestors
 * to be properly displayed.
 */
.card {
  background: #f7f0e7;
  padding: 1.42857rem;
  border-radius: 0.14286rem;
}

.section {
  /*padding:s-rem(180px) 0;

	& + .section:not([class*="bkg-"]) {
		padding-top:0;
	}

	@include g-state(mobile) {
		padding: s-rem(80px) 0;
	}*/
}

/**
 * Objects
 * All the objects styling.
 * An object response to the same rules has the blocks, unless they cannot contain any other objects or blocks.
 */
/**
 * Objects
 * All the objects styling.
 * An object response to the same rules has the blocks, unless they cannot contain any other objects or blocks.
 */
/**
 * @name 		Simple button
 * Display a simple button
 * @styleguide 		Objects / Buttons
 * @example 		html
 * <a class="btn" href="#">
 * 	I'm a cool button
 * </a>
 */
.btn {
  color: #a48135;
  font-size: 1.28571rem;
  display: inline-block;
  text-decoration: none;
  position: relative;
  padding: 0.8em 1.4em;
  background: none;
  border: none;
  cursor: pointer;
  user-select: none;
  outline: none;
  transition: all 0.2s ease-in-out 0s, outline-color 0s linear 0s;
  outline-color: black;
}

.btn[disabled] {
  opacity: .2;
  pointer-events: none;
}

.btn:before {
  content: '';
  display: block;
  border: 1px solid #a48135;
  border-right: 0;
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  transform: scale(0, 1);
  transform-origin: 0 0;
  transition: all 0.3s cubic-bezier(0.855, 0, 0.045, 1) 0s, outline-color 0s linear 0s;
  outline-color: black;
}

.btn:hover:before {
  transform: scale(1, 1);
}

.btn:after {
  display: none;
  content: '';
  background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 57.06 7.35'><polygon fill='%23a48135' points='53.38 0 52.54 0.85 54.76 3.08 0 3.08 0 4.28 54.76 4.28 52.54 6.5 53.38 7.35 57.06 3.68 53.38 0'/></svg>");
  background-repeat: repeat-x;
  background-position: top right;
  background-size: 4.07143rem 0.57143rem;
  width: 4.07143rem;
  height: 0.57143rem;
  position: relative;
  margin-left: 0.71429rem;
  top: -0.14286rem;
  transition: all 0.2s ease-in-out 0s, outline-color 0s linear 0s;
  outline-color: black;
}

.btn:hover {
  padding: s-lng(padding-horizontal) 0.7em;
}

.btn:hover:before {
  border-right: 1px solid #a48135;
  transition: all 0.3s cubic-bezier(0.855, 0, 0.045, 1) 0s, border-right 0.3s ease-in-out 0.3s, outline-color 0s linear 0s;
  outline-color: black;
}

.btn:hover:after {
  width: 0.71429rem;
}

@media screen and (min-width: 640px) {
  .btn:after {
    display: inline-block;
  }
}

.btn-facebook {
  background-color: #3B5998;
  color: white;
  padding: 0.8em 1.4em;
  text-decoration: none;
  font-size: 1.28571rem;
  display: inline-block;
  outline: none;
  transition: background-color .1s ease-in-out 0s;
}

.btn-facebook:hover {
  background-color: #2d4373;
}

/**
		 * @name 	```.form-input```
		 * @styleguide 		Forms / Input
		 * @example 	html
		 * <input class="form-input" placeholder="Hello world" />
		 */
.form-input {
  font-family: gt-walsheim-regular;
  border-radius: 0em;
  padding: 0 1.4em;
  height: 2.6em;
}

.form-input:not(input):not(select) {
  padding: 0.8em 1.4em;
}

.form-input::-webkit-contacts-auto-fill-button {
  visibility: hidden;
  display: none !important;
  pointer-events: none;
  position: absolute;
  right: 0;
}

.form-input::-ms-clear {
  display: none;
}

/**
		 * @name 	```.form-select```
		 * @styleguide 		Forms / Select
		 * @example 	html
		 * <select class="form-select">
		 * 	<option>Value 1</option>
		 * 	<option>Value 2</option>
		 * 	<option>Value 3</option>
		 * </select>
		 */
.form-select {
  font-family: gt-walsheim-regular;
  background-size: 9px 6px;
  background-position: right center;
  background-origin: content-box;
  background-repeat: no-repeat;
  background-color: white;
  border-radius: 0em;
  padding: 0 1.4em;
  height: 2.6em;
}

.form-select:not(input):not(select) {
  padding: 0.8em 1.4em;
}

.form-select::-ms-expand {
  display: none;
}

/**
		 * @name 	```.form-textarea```
		 * @styleguide 		Forms / Textarea
		 * @example 	html
		 * <textarea class="form-textarea" placeholder="Hello world"></textarea>
		 */
.form-textarea {
  font-family: gt-walsheim-regular;
  padding: 0.8em 1.4em;
  display: inline-block;
}

/**
		 * @name 	```.form-group```
		 * @styleguide 		Forms / Group
		 * @example 	html
		 * <div class="form-group">
		 * 	<input class="form-input" placeholder="Hello world" />
		 * 	<input class="btn" type="submit" value="Ok" />
		 * </div>
		 */
.form-group {
  display: flex !important;
  flex: 1 !important;
  align-items: center !important;
}

.form-group > * {
  flex: 1;
}

.form-group > input[type="submit"],
.form-group > input[type="checkbox"],
.form-group > input[type="radio"],
.form-group > button,
.form-group .form-addon {
  flex: 0;
}

/**
		 * @name 	```.form-addon```
		 * @styleguide 		Forms / Addon
		 * @example 	html
		 * <div class="form-group">
		 * 	<div class="form-addon">
		 *  	Email
		 *  </div>
		 * 	<input class="form-input" placeholder="john.doe@gmail.com" />
		 * 	<input class="btn" type="submit" value="Ok" />
		 * </div>
		 */
.form-addon {
  border-radius: 0em;
  padding: 0 1.4em;
  height: 2.6em;
}

.form-addon:not(input):not(select) {
  padding: 0.8em 1.4em;
}

.form-addon.vr,
.vr .form-addon {
  margin-bottom: 1em;
}

/**
			 * @name 	<span class="c-default">Default</span> ```.form-input--default```
			 * @styleguide 		Forms / Input
			 * @example 	html
			 * <input class="form-input form-input--default" placeholder="Hello world" />
			 */
.form-input {
  color: #282828;
  transition: border 0.1s ease-in-out 0s, outline-color 0s linear 0s;
  outline-color: black;
  border-color: rgba(247, 240, 231, 0.1);
}

.form-input::-webkit-input-placeholder {
  color: rgba(40, 40, 40, 0.4);
}

.form-input:-moz-placeholder {
  color: rgba(40, 40, 40, 0.4);
}

.form-input::-moz-placeholder {
  color: rgba(40, 40, 40, 0.4);
}

.form-input:-ms-input-placeholder {
  color: rgba(40, 40, 40, 0.4);
}

.input--placeholder {
  color: rgba(40, 40, 40, 0.4);
}

.form-input:disabled {
  opacity: 0.5;
}

[data-input-activator]:focus ~ .form-input,
[data-input-activator]:checked ~ .form-input, .form-input:hover:not(:disabled) {
  border-bottom-color: rgba(247, 240, 231, 0.6);
}

[data-input-activator]:focus ~ .form-input,
[data-input-activator]:checked ~ .form-input, .form-input:focus:not(:disabled), .form-input.active:not(:disabled) {
  border-color: rgba(247, 240, 231, 0.6);
}

/**
			 * @name 	<span class="c-default">Default</span> ```.form-select--default```
			 * @styleguide 		Forms / Select
			 * @example 	html
			 * <select class="form-select form-select--default">
			 * 	<option>Value 1</option>
			 * 	<option>Value 2</option>
			 * 	<option>Value 3</option>
			 * </select>
			 */
.form-select {
  color: #282828;
  transition: border 0.1s ease-in-out 0s, outline-color 0s linear 0s;
  outline-color: black;
  border-color: rgba(247, 240, 231, 0.1);
  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' version='1.1' width='32' height='24' viewBox='0 0 32 24'%3E%3Cpolygon points='0,0 32,0 16,24' style='fill:%23f7f0e7'%3E%3C/polygon%3E%3C/svg%3E");
}

.form-select::-webkit-input-placeholder {
  color: rgba(40, 40, 40, 0.4);
}

.form-select:-moz-placeholder {
  color: rgba(40, 40, 40, 0.4);
}

.form-select::-moz-placeholder {
  color: rgba(40, 40, 40, 0.4);
}

.form-select:-ms-input-placeholder {
  color: rgba(40, 40, 40, 0.4);
}

.input--placeholder {
  color: rgba(40, 40, 40, 0.4);
}

.form-select:disabled {
  opacity: 0.5;
}

[data-input-activator]:focus ~ .form-select,
[data-input-activator]:checked ~ .form-select, .form-select:hover:not(:disabled) {
  border-bottom-color: rgba(247, 240, 231, 0.6);
}

[data-input-activator]:focus ~ .form-select,
[data-input-activator]:checked ~ .form-select, .form-select:focus:not(:disabled), .form-select.active:not(:disabled) {
  border-color: rgba(247, 240, 231, 0.6);
}

/**
			 * @name 	<span class="c-default">Default</span> ```.form-textear--default```
			 * @styleguide 		Forms / Textarea
			 * @example 	html
			 * <textarea class="form-textarea form-textarea--default" placeholder="Hello world"></textarea>
			 */
.form-textarea {
  color: #282828;
  transition: border 0.1s ease-in-out 0s, outline-color 0s linear 0s;
  outline-color: black;
  border-color: rgba(247, 240, 231, 0.1);
}

.form-textarea::-webkit-input-placeholder {
  color: rgba(40, 40, 40, 0.4);
}

.form-textarea:-moz-placeholder {
  color: rgba(40, 40, 40, 0.4);
}

.form-textarea::-moz-placeholder {
  color: rgba(40, 40, 40, 0.4);
}

.form-textarea:-ms-input-placeholder {
  color: rgba(40, 40, 40, 0.4);
}

.input--placeholder {
  color: rgba(40, 40, 40, 0.4);
}

.form-textarea:disabled {
  opacity: 0.5;
}

[data-input-activator]:focus ~ .form-textarea,
[data-input-activator]:checked ~ .form-textarea, .form-textarea:hover:not(:disabled) {
  border-bottom-color: rgba(247, 240, 231, 0.6);
}

[data-input-activator]:focus ~ .form-textarea,
[data-input-activator]:checked ~ .form-textarea, .form-textarea:focus:not(:disabled), .form-textarea.active:not(:disabled) {
  border-color: rgba(247, 240, 231, 0.6);
}

/**
			 * @name 	<span class="c-default">Default</span> ```.form-addon--default```
			 * @styleguide 		Forms / Addon
			 * @example 	html
			 * <div class="form-group">
			 * 	<div class="form-addon form-addon--default">
			 *  	Email
			 *  </div>
			 * 	<input class="form-input" placeholder="john.doe@gmail.com" />
			 * 	<input class="btn" type="submit" value="Ok" />
			 * </div>
			 */
.form-addon {
  border-color: rgba(247, 240, 231, 0.1);
  background-color: rgba(247, 240, 231, 0.08);
  color: #ead8c1;
}

[data-input-activator]:focus ~ .form-addon,
[data-input-activator]:checked ~ .form-addon, .form-addon:hover:not(:disabled) {
  border-bottom-color: rgba(247, 240, 231, 0.6);
}

[data-input-activator]:focus ~ .form-addon,
[data-input-activator]:checked ~ .form-addon, .form-addon:focus:not(:disabled), .form-addon.active:not(:disabled) {
  border-color: rgba(247, 240, 231, 0.6);
}

.form-input {
  font-size: 1.28571rem;
}

.form-input::-webkit-input-placeholder {
  color: #f7f0e7;
}

.form-input:-moz-placeholder {
  color: #f7f0e7;
}

.form-input::-moz-placeholder {
  color: #f7f0e7;
}

.form-input:-ms-input-placeholder {
  color: #f7f0e7;
}

.input--placeholder {
  color: #f7f0e7;
}

.reply {
  padding: 1.42857rem;
  color: white;
  margin-top: 1.42857rem;
  border-radius: 0.14286rem;
}

.reply--error {
  background-color: #FF2D2D;
}

/**
 * @name 	Plyr ripple
 * Display a cool ripple effect for the plyr play button
 * @styleguide 		Objects / Ripples
 * @example 	html
 * <div class="ratio-16-9 bkg-secondary">
 * 	<s-ripple class="ripple--plyr" contains="false"></s-ripple>
 * </div>
 */
@keyframes s-ripple-plyr {
  0% {
    border-width: 0;
    transform: translateX(-50%) translateY(-50%) scale(0, 0) rotate(45deg);
  }
  50% {
    border-width: 50px;
  }
  100% {
    border-width: 0;
    transform: translateX(-50%) translateY(-50%) scale(1, 1) rotate(45deg);
  }
}

s-ripple.ripple--plyr .s-ripple__particle {
  width: 14.28571rem;
  height: 14.28571rem;
  animation: s-ripple-plyr 0.3s 0s ease-out 1 normal forwards;
  opacity: 1 !important;
  background: transparent;
  border: 20px solid white;
  border-radius: 0;
  transform: rotate(45deg) translateX(-50%) translateY(-50%) !important;
}

/**
 * Trumps
 * All the things that does not fit in any others directory. Try to keep this folder has small as possible.
 * If you have to many things in here, that mean that you probably need to refactor your codebase...
 */
/**
 * Trumps
 * All the things that does not fit in any others directory. Try to keep this folder has small as possible.
 * If you have to many things in here, that mean that you probably need to refactor your codebase...
 */
